#if !os(Linux)
#if SWIFT_PACKAGE
import Clang_C
#endif
private let library = toolchainLoader.load(path: "libclang.dylib")
// swiftlint:disable unused_declaration - We don't care if some of these are unused.
internal let clang_Cursor_getParsedComment: @convention(c) (CXCursor) -> (CXComment) = library.load(symbol: "clang_Cursor_getParsedComment")
internal let clang_Comment_getKind: @convention(c) (CXComment) -> (CXCommentKind) = library.load(symbol: "clang_Comment_getKind")
internal let clang_Comment_getNumChildren: @convention(c) (CXComment) -> (UInt32) = library.load(symbol: "clang_Comment_getNumChildren")
internal let clang_Comment_getChild: @convention(c) (CXComment, UInt32) -> (CXComment) = library.load(symbol: "clang_Comment_getChild")
internal let clang_Comment_isWhitespace: @convention(c) (CXComment) -> (UInt32) = library.load(symbol: "clang_Comment_isWhitespace")
internal let clang_InlineContentComment_hasTrailingNewline: @convention(c) (CXComment) -> (UInt32) = library.load(symbol: "clang_InlineContentComment_hasTrailingNewline")
internal let clang_TextComment_getText: @convention(c) (CXComment) -> (CXString) = library.load(symbol: "clang_TextComment_getText")
internal let clang_InlineCommandComment_getCommandName: @convention(c) (CXComment) -> (CXString) = library.load(symbol: "clang_InlineCommandComment_getCommandName")
internal let clang_InlineCommandComment_getRenderKind: @convention(c) (CXComment) -> (CXCommentInlineCommandRenderKind) = library.load(symbol: "clang_InlineCommandComment_getRenderKind")
internal let clang_InlineCommandComment_getNumArgs: @convention(c) (CXComment) -> (UInt32) = library.load(symbol: "clang_InlineCommandComment_getNumArgs")
internal let clang_InlineCommandComment_getArgText: @convention(c) (CXComment, UInt32) -> (CXString) = library.load(symbol: "clang_InlineCommandComment_getArgText")
internal let clang_HTMLTagComment_getTagName: @convention(c) (CXComment) -> (CXString) = library.load(symbol: "clang_HTMLTagComment_getTagName")
internal let clang_HTMLStartTagComment_isSelfClosing: @convention(c) (CXComment) -> (UInt32) = library.load(symbol: "clang_HTMLStartTagComment_isSelfClosing")
internal let clang_HTMLStartTag_getNumAttrs: @convention(c) (CXComment) -> (UInt32) = library.load(symbol: "clang_HTMLStartTag_getNumAttrs")
internal let clang_HTMLStartTag_getAttrName: @convention(c) (CXComment, UInt32) -> (CXString) = library.load(symbol: "clang_HTMLStartTag_getAttrName")
internal let clang_HTMLStartTag_getAttrValue: @convention(c) (CXComment, UInt32) -> (CXString) = library.load(symbol: "clang_HTMLStartTag_getAttrValue")
internal let clang_BlockCommandComment_getCommandName: @convention(c) (CXComment) -> (CXString) = library.load(symbol: "clang_BlockCommandComment_getCommandName")
internal let clang_BlockCommandComment_getNumArgs: @convention(c) (CXComment) -> (UInt32) = library.load(symbol: "clang_BlockCommandComment_getNumArgs")
internal let clang_BlockCommandComment_getArgText: @convention(c) (CXComment, UInt32) -> (CXString) = library.load(symbol: "clang_BlockCommandComment_getArgText")
internal let clang_BlockCommandComment_getParagraph: @convention(c) (CXComment) -> (CXComment) = library.load(symbol: "clang_BlockCommandComment_getParagraph")
internal let clang_ParamCommandComment_getParamName: @convention(c) (CXComment) -> (CXString) = library.load(symbol: "clang_ParamCommandComment_getParamName")
internal let clang_ParamCommandComment_isParamIndexValid: @convention(c) (CXComment) -> (UInt32) = library.load(symbol: "clang_ParamCommandComment_isParamIndexValid")
internal let clang_ParamCommandComment_getParamIndex: @convention(c) (CXComment) -> (UInt32) = library.load(symbol: "clang_ParamCommandComment_getParamIndex")
internal let clang_ParamCommandComment_isDirectionExplicit: @convention(c) (CXComment) -> (UInt32) = library.load(symbol: "clang_ParamCommandComment_isDirectionExplicit")
internal let clang_ParamCommandComment_getDirection: @convention(c) (CXComment) -> (CXCommentParamPassDirection) = library.load(symbol: "clang_ParamCommandComment_getDirection")
internal let clang_TParamCommandComment_getParamName: @convention(c) (CXComment) -> (CXString) = library.load(symbol: "clang_TParamCommandComment_getParamName")
internal let clang_TParamCommandComment_isParamPositionValid: @convention(c) (CXComment) -> (UInt32) = library.load(symbol: "clang_TParamCommandComment_isParamPositionValid")
internal let clang_TParamCommandComment_getDepth: @convention(c) (CXComment) -> (UInt32) = library.load(symbol: "clang_TParamCommandComment_getDepth")
internal let clang_TParamCommandComment_getIndex: @convention(c) (CXComment, UInt32) -> (UInt32) = library.load(symbol: "clang_TParamCommandComment_getIndex")
internal let clang_VerbatimBlockLineComment_getText: @convention(c) (CXComment) -> (CXString) = library.load(symbol: "clang_VerbatimBlockLineComment_getText")
internal let clang_VerbatimLineComment_getText: @convention(c) (CXComment) -> (CXString) = library.load(symbol: "clang_VerbatimLineComment_getText")
internal let clang_HTMLTagComment_getAsString: @convention(c) (CXComment) -> (CXString) = library.load(symbol: "clang_HTMLTagComment_getAsString")
internal let clang_FullComment_getAsHTML: @convention(c) (CXComment) -> (CXString) = library.load(symbol: "clang_FullComment_getAsHTML")
internal let clang_FullComment_getAsXML: @convention(c) (CXComment) -> (CXString) = library.load(symbol: "clang_FullComment_getAsXML")
#endif
