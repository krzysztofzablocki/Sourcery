{% for type in types.implementing.AutoDiffable %}

extension {{ type.name }}{% if not type.supertype.implements.AutoDiffable %}: Diffable {% endif %} {
    {% if type.based.Type %} override {% endif %}func diffAgainst(_ object: Any?) -> DiffableResult {
        let results = DiffableResult()
    {% if type.storedVariables.count %}
        guard let rhs = object as? {{ type.name }} else {
          results.append("Incorrect type <expected: {{ type.name }}, received: \(type(of: object))>")
          return results
        }
        {% for variable in type.storedVariables %}{% if not variable.annotations.skipEquality %} results.append(contentsOf: DiffableResult(identifier: "{{ variable.name }}").trackDifference(actual: self.{{ variable.name }}, expected: rhs.{{ variable.name }}))
        {% endif %}{% endfor %}
    {% endif %}
        {% if type.supertype.implements.AutoDiffable %}results.append(contentsOf: super.diffAgainst(object)) {% endif %}
        return results
    }
}
{% endfor %}
