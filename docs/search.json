{"Other%20Typealiases.html#/s:15SourceryRuntime11Annotationsa":{"name":"Annotations"},"Other%20Typealiases.html#/s:15SourceryRuntime13Documentationa":{"name":"Documentation"},"Other%20Typealiases.html#/s:15SourceryRuntime0A8Modifiera":{"name":"SourceryModifier"},"Protocols/Typed.html#/s:15SourceryRuntime5TypedP4typeAA4TypeCSgvp":{"name":"type","abstract":"\u003cp\u003eType, if known\u003c/p\u003e","parent_name":"Typed"},"Protocols/Typed.html#/s:15SourceryRuntime5TypedP8typeNameAA04TypeE0Cvp":{"name":"typeName","abstract":"\u003cp\u003eType name\u003c/p\u003e","parent_name":"Typed"},"Protocols/Typed.html#/s:15SourceryRuntime5TypedP10isOptionalSbvp":{"name":"isOptional","abstract":"\u003cp\u003eWhether type is optional\u003c/p\u003e","parent_name":"Typed"},"Protocols/Typed.html#/s:15SourceryRuntime5TypedP29isImplicitlyUnwrappedOptionalSbvp":{"name":"isImplicitlyUnwrappedOptional","abstract":"\u003cp\u003eWhether type is implicitly unwrapped optional\u003c/p\u003e","parent_name":"Typed"},"Protocols/Typed.html#/s:15SourceryRuntime5TypedP17unwrappedTypeNameSSvp":{"name":"unwrappedTypeName","abstract":"\u003cp\u003eType name without attributes and optional type information\u003c/p\u003e","parent_name":"Typed"},"Protocols/Documented.html#/s:15SourceryRuntime10DocumentedP13documentationSaySSGvp":{"name":"documentation","parent_name":"Documented"},"Protocols/Definition.html#/s:15SourceryRuntime10DefinitionP17definedInTypeNameAA0fG0CSgvp":{"name":"definedInTypeName","abstract":"\u003cp\u003eReference to type name where the object is defined,","parent_name":"Definition"},"Protocols/Definition.html#/s:15SourceryRuntime10DefinitionP13definedInTypeAA0F0CSgvp":{"name":"definedInType","abstract":"\u003cp\u003eReference to actual type where the object is defined,","parent_name":"Definition"},"Protocols/Definition.html#/s:15SourceryRuntime10DefinitionP23actualDefinedInTypeNameAA0gH0CSgvp":{"name":"actualDefinedInTypeName","abstract":"\u003cp\u003eReference to actual type name where the method is defined if declaration uses typealias, otherwise just a \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Definition.html#/s:15SourceryRuntime10DefinitionP17definedInTypeNameAA0fG0CSgvp\"\u003edefinedInTypeName\u003c/a\u003e\u003c/code\u003e\u003c/p\u003e","parent_name":"Definition"},"Protocols/Annotated.html#/s:15SourceryRuntime9AnnotatedP11annotationsSDySSSo8NSObjectCGvp":{"name":"annotations","abstract":"\u003cp\u003eAll annotations of declaration stored by their name. Value can be \u003ccode\u003ebool\u003c/code\u003e, \u003ccode\u003eString\u003c/code\u003e, float \u003ccode\u003eNSNumber\u003c/code\u003e","parent_name":"Annotated"},"Protocols/Annotated.html":{"name":"Annotated","abstract":"\u003cp\u003eDescribes annotated declaration, i.e. type, method, variable, enum case\u003c/p\u003e"},"Protocols/Definition.html":{"name":"Definition","abstract":"\u003cp\u003eDescribes that the object is defined in a context of some \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Type.html\"\u003eType\u003c/a\u003e\u003c/code\u003e\u003c/p\u003e"},"Protocols/Documented.html":{"name":"Documented","abstract":"\u003cp\u003eDescribes a declaration with documentation, i.e. type, method, variable, enum case\u003c/p\u003e"},"Protocols/Typed.html":{"name":"Typed","abstract":"\u003cp\u003eDescibes typed declaration, i.e. variable, method parameter, tuple element, enum case associated value\u003c/p\u003e"},"Extensions/Typealias.html#/c:@CM@SourceryRuntime@objc(cs)Typealias(py)isOptional":{"name":"isOptional","abstract":"\u003cp\u003eWhether type is optional. Shorthand for \u003ccode\u003etypeName.isOptional\u003c/code\u003e\u003c/p\u003e","parent_name":"Typealias"},"Extensions/Typealias.html#/c:@CM@SourceryRuntime@objc(cs)Typealias(py)isImplicitlyUnwrappedOptional":{"name":"isImplicitlyUnwrappedOptional","abstract":"\u003cp\u003eWhether type is implicitly unwrapped optional. Shorthand for \u003ccode\u003etypeName.isImplicitlyUnwrappedOptional\u003c/code\u003e\u003c/p\u003e","parent_name":"Typealias"},"Extensions/Typealias.html#/c:@CM@SourceryRuntime@objc(cs)Typealias(py)unwrappedTypeName":{"name":"unwrappedTypeName","abstract":"\u003cp\u003eType name without attributes and optional type information. Shorthand for \u003ccode\u003etypeName.unwrappedTypeName\u003c/code\u003e\u003c/p\u003e","parent_name":"Typealias"},"Extensions/Typealias.html#/c:@CM@SourceryRuntime@objc(cs)Typealias(py)actualTypeName":{"name":"actualTypeName","abstract":"\u003cp\u003eActual type name if declaration uses typealias, otherwise just a \u003ccode\u003etypeName\u003c/code\u003e. Shorthand for \u003ccode\u003etypeName.actualTypeName\u003c/code\u003e\u003c/p\u003e","parent_name":"Typealias"},"Extensions/Typealias.html#/c:@CM@SourceryRuntime@objc(cs)Typealias(py)isTuple":{"name":"isTuple","abstract":"\u003cp\u003eWhether type is a tuple. Shorthand for \u003ccode\u003etypeName.isTuple\u003c/code\u003e\u003c/p\u003e","parent_name":"Typealias"},"Extensions/Typealias.html#/c:@CM@SourceryRuntime@objc(cs)Typealias(py)isClosure":{"name":"isClosure","abstract":"\u003cp\u003eWhether type is a closure. Shorthand for \u003ccode\u003etypeName.isClosure\u003c/code\u003e\u003c/p\u003e","parent_name":"Typealias"},"Extensions/Typealias.html#/c:@CM@SourceryRuntime@objc(cs)Typealias(py)isArray":{"name":"isArray","abstract":"\u003cp\u003eWhether type is an array. Shorthand for \u003ccode\u003etypeName.isArray\u003c/code\u003e\u003c/p\u003e","parent_name":"Typealias"},"Extensions/Typealias.html#/c:@CM@SourceryRuntime@objc(cs)Typealias(py)isSet":{"name":"isSet","abstract":"\u003cp\u003eWhether type is a set. Shorthand for \u003ccode\u003etypeName.isSet\u003c/code\u003e\u003c/p\u003e","parent_name":"Typealias"},"Extensions/Typealias.html#/c:@CM@SourceryRuntime@objc(cs)Typealias(py)isDictionary":{"name":"isDictionary","abstract":"\u003cp\u003eWhether type is a dictionary. Shorthand for \u003ccode\u003etypeName.isDictionary\u003c/code\u003e\u003c/p\u003e","parent_name":"Typealias"},"Extensions/String.html#/s:SS15SourceryRuntimeE10nilIfEmptySSSgvp":{"name":"nilIfEmpty","abstract":"\u003cp\u003eReturns nil if string is empty\u003c/p\u003e","parent_name":"String"},"Extensions/String.html#/s:SS15SourceryRuntimeE26nilIfNotValidParameterNameSSSgvp":{"name":"nilIfNotValidParameterName","abstract":"\u003cp\u003eReturns nil if string is empty or contains \u003ccode\u003e_\u003c/code\u003e character\u003c/p\u003e","parent_name":"String"},"Extensions/StringProtocol.html#/s:Sy15SourceryRuntimeE7trimmedSSvp":{"name":"trimmed","abstract":"\u003cp\u003eTrimms leading and trailing whitespaces and newlines\u003c/p\u003e","parent_name":"StringProtocol"},"Extensions/Array.html#/s:Sa15SourceryRuntimeE15parallelFlatMap9transformSayqd__GADxXE_tlF":{"name":"parallelFlatMap(transform:)","parent_name":"Array"},"Extensions/Array.html#/s:Sa15SourceryRuntimeE18parallelCompactMap9transformSayqd__Gqd__SgxXE_tlF":{"name":"parallelCompactMap(transform:)","parent_name":"Array"},"Extensions/Array.html#/s:Sa15SourceryRuntimeE11parallelMap9transformSayqd__Gqd__xXE_tlF":{"name":"parallelMap(transform:)","parent_name":"Array"},"Extensions/Array.html#/s:Sa15SourceryRuntimeE15parallelPerformyyyxXEF":{"name":"parallelPerform(_:)","parent_name":"Array"},"Extensions/Array.html#/s:Sa15SourceryRuntimeAA16ClosureParameterCRszlE8asSourceSSvp":{"name":"asSource","parent_name":"Array"},"Extensions/Array.html#/s:Sa15SourceryRuntimeAA15MethodParameterCRszlE8asSourceSSvp":{"name":"asSource","parent_name":"Array"},"Extensions/Array.html#/s:Sa15SourceryRuntimeAA12TupleElementCRszlE8asSourceSSvp":{"name":"asSource","parent_name":"Array"},"Extensions/Array.html#/s:Sa15SourceryRuntimeAA12TupleElementCRszlE10asTypeNameSSvp":{"name":"asTypeName","parent_name":"Array"},"Extensions/Array.html":{"name":"Array"},"Extensions/StringProtocol.html":{"name":"StringProtocol"},"Extensions/String.html":{"name":"String"},"Other%20Extensions.html#/c:@M@SourceryRuntime@objc(cs)BytesRange":{"name":"BytesRange"},"Other%20Extensions.html#/c:@M@SourceryRuntime@objc(cs)FileParserResult":{"name":"FileParserResult"},"Extensions/Typealias.html":{"name":"Typealias"},"Enums/Composer.html#/s:15SourceryRuntime8ComposerO23uniqueTypesAndFunctions_6serialSayAA4TypeCG5types_SayAA6MethodCG9functionsSayAA9TypealiasCG11typealiasestAA16FileParserResultC_SbtFZ":{"name":"uniqueTypesAndFunctions(_:serial:)","abstract":"\u003cp\u003ePerforms final processing of discovered types:\u003c/p\u003e","parent_name":"Composer"},"Enums/Composer.html":{"name":"Composer","abstract":"\u003cp\u003eResponsible for composing results of \u003ccode\u003eFileParser\u003c/code\u003e.\u003c/p\u003e"},"Classes/GenericRequirement/Relationship.html#/s:15SourceryRuntime18GenericRequirementC12RelationshipO6equalsyA2EmF":{"name":"equals","parent_name":"Relationship"},"Classes/GenericRequirement/Relationship.html#/s:15SourceryRuntime18GenericRequirementC12RelationshipO10conformsToyA2EmF":{"name":"conformsTo","parent_name":"Relationship"},"Classes/GenericRequirement/Relationship.html":{"name":"Relationship","parent_name":"GenericRequirement"},"Classes/GenericRequirement.html#/c:@M@SourceryRuntime@objc(cs)GenericRequirement(py)leftType":{"name":"leftType","parent_name":"GenericRequirement"},"Classes/GenericRequirement.html#/c:@M@SourceryRuntime@objc(cs)GenericRequirement(py)rightType":{"name":"rightType","parent_name":"GenericRequirement"},"Classes/GenericRequirement.html#/c:@M@SourceryRuntime@objc(cs)GenericRequirement(py)relationship":{"name":"relationship","abstract":"\u003cp\u003erelationship name\u003c/p\u003e","parent_name":"GenericRequirement"},"Classes/GenericRequirement.html#/c:@M@SourceryRuntime@objc(cs)GenericRequirement(py)relationshipSyntax":{"name":"relationshipSyntax","abstract":"\u003cp\u003eSyntax e.g. \u003ccode\u003e==\u003c/code\u003e or \u003ccode\u003e:\u003c/code\u003e\u003c/p\u003e","parent_name":"GenericRequirement"},"Classes/GenericRequirement.html#/s:15SourceryRuntime18GenericRequirementC8leftType05rightF012relationshipAcA010AssociatedF0C_AA0cF9ParameterCAC12RelationshipOtcfc":{"name":"init(leftType:rightType:relationship:)","parent_name":"GenericRequirement"},"Classes/GenericRequirement.html#/s:15SourceryRuntime8DiffableP11diffAgainstyAA0C6ResultCypSgF":{"name":"diffAgainst(_:)","parent_name":"GenericRequirement"},"Classes/GenericParameter.html#/c:@M@SourceryRuntime@objc(cs)GenericParameter(py)name":{"name":"name","abstract":"\u003cp\u003eGeneric parameter name\u003c/p\u003e","parent_name":"GenericParameter"},"Classes/GenericParameter.html#/c:@M@SourceryRuntime@objc(cs)GenericParameter(py)inheritedTypeName":{"name":"inheritedTypeName","abstract":"\u003cp\u003eGeneric parameter inherited type\u003c/p\u003e","parent_name":"GenericParameter"},"Classes/GenericParameter.html#/s:15SourceryRuntime8DiffableP11diffAgainstyAA0C6ResultCypSgF":{"name":"diffAgainst(_:)","parent_name":"GenericParameter"},"Classes/ClosureParameter.html#/c:@M@SourceryRuntime@objc(cs)ClosureParameter(py)argumentLabel":{"name":"argumentLabel","abstract":"\u003cp\u003eParameter external name\u003c/p\u003e","parent_name":"ClosureParameter"},"Classes/ClosureParameter.html#/c:@M@SourceryRuntime@objc(cs)ClosureParameter(py)name":{"name":"name","abstract":"\u003cp\u003eParameter internal name\u003c/p\u003e","parent_name":"ClosureParameter"},"Classes/ClosureParameter.html#/c:@M@SourceryRuntime@objc(cs)ClosureParameter(py)typeName":{"name":"typeName","abstract":"\u003cp\u003eParameter type name\u003c/p\u003e","parent_name":"ClosureParameter"},"Classes/ClosureParameter.html#/c:@M@SourceryRuntime@objc(cs)ClosureParameter(py)inout":{"name":"inout","abstract":"\u003cp\u003eParameter flag whether it\u0026rsquo;s inout or not\u003c/p\u003e","parent_name":"ClosureParameter"},"Classes/ClosureParameter.html#/c:@M@SourceryRuntime@objc(cs)ClosureParameter(py)type":{"name":"type","abstract":"\u003cp\u003eParameter type, if known\u003c/p\u003e","parent_name":"ClosureParameter"},"Classes/ClosureParameter.html#/c:@M@SourceryRuntime@objc(cs)ClosureParameter(py)isVariadic":{"name":"isVariadic","abstract":"\u003cp\u003eParameter if the argument has a variadic type or not\u003c/p\u003e","parent_name":"ClosureParameter"},"Classes/ClosureParameter.html#/c:@M@SourceryRuntime@objc(cs)ClosureParameter(py)typeAttributes":{"name":"typeAttributes","abstract":"\u003cp\u003eParameter type attributes, i.e. \u003ccode\u003e@escaping\u003c/code\u003e\u003c/p\u003e","parent_name":"ClosureParameter"},"Classes/ClosureParameter.html#/c:@M@SourceryRuntime@objc(cs)ClosureParameter(py)defaultValue":{"name":"defaultValue","abstract":"\u003cp\u003eMethod parameter default value expression\u003c/p\u003e","parent_name":"ClosureParameter"},"Classes/ClosureParameter.html#/c:@M@SourceryRuntime@objc(cs)ClosureParameter(py)annotations":{"name":"annotations","abstract":"\u003cp\u003eAnnotations, that were created with // sourcery: annotation1, other = \u0026ldquo;annotation value\u0026rdquo;, alterantive = 2\u003c/p\u003e","parent_name":"ClosureParameter"},"Classes/ClosureParameter.html#/c:@M@SourceryRuntime@objc(cs)ClosureParameter(py)asSource":{"name":"asSource","parent_name":"ClosureParameter"},"Classes/ClosureParameter.html#/c:@CM@SourceryRuntime@objc(cs)ClosureParameter(py)isOptional":{"name":"isOptional","abstract":"\u003cp\u003eWhether type is optional. Shorthand for \u003ccode\u003etypeName.isOptional\u003c/code\u003e\u003c/p\u003e","parent_name":"ClosureParameter"},"Classes/ClosureParameter.html#/c:@CM@SourceryRuntime@objc(cs)ClosureParameter(py)isImplicitlyUnwrappedOptional":{"name":"isImplicitlyUnwrappedOptional","abstract":"\u003cp\u003eWhether type is implicitly unwrapped optional. Shorthand for \u003ccode\u003etypeName.isImplicitlyUnwrappedOptional\u003c/code\u003e\u003c/p\u003e","parent_name":"ClosureParameter"},"Classes/ClosureParameter.html#/c:@CM@SourceryRuntime@objc(cs)ClosureParameter(py)unwrappedTypeName":{"name":"unwrappedTypeName","abstract":"\u003cp\u003eType name without attributes and optional type information. Shorthand for \u003ccode\u003etypeName.unwrappedTypeName\u003c/code\u003e\u003c/p\u003e","parent_name":"ClosureParameter"},"Classes/ClosureParameter.html#/c:@CM@SourceryRuntime@objc(cs)ClosureParameter(py)actualTypeName":{"name":"actualTypeName","abstract":"\u003cp\u003eActual type name if declaration uses typealias, otherwise just a \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ClosureParameter.html#/c:@M@SourceryRuntime@objc(cs)ClosureParameter(py)typeName\"\u003etypeName\u003c/a\u003e\u003c/code\u003e. Shorthand for \u003ccode\u003etypeName.actualTypeName\u003c/code\u003e\u003c/p\u003e","parent_name":"ClosureParameter"},"Classes/ClosureParameter.html#/c:@CM@SourceryRuntime@objc(cs)ClosureParameter(py)isTuple":{"name":"isTuple","abstract":"\u003cp\u003eWhether type is a tuple. Shorthand for \u003ccode\u003etypeName.isTuple\u003c/code\u003e\u003c/p\u003e","parent_name":"ClosureParameter"},"Classes/ClosureParameter.html#/c:@CM@SourceryRuntime@objc(cs)ClosureParameter(py)isClosure":{"name":"isClosure","abstract":"\u003cp\u003eWhether type is a closure. Shorthand for \u003ccode\u003etypeName.isClosure\u003c/code\u003e\u003c/p\u003e","parent_name":"ClosureParameter"},"Classes/ClosureParameter.html#/c:@CM@SourceryRuntime@objc(cs)ClosureParameter(py)isArray":{"name":"isArray","abstract":"\u003cp\u003eWhether type is an array. Shorthand for \u003ccode\u003etypeName.isArray\u003c/code\u003e\u003c/p\u003e","parent_name":"ClosureParameter"},"Classes/ClosureParameter.html#/c:@CM@SourceryRuntime@objc(cs)ClosureParameter(py)isSet":{"name":"isSet","abstract":"\u003cp\u003eWhether type is a set. Shorthand for \u003ccode\u003etypeName.isSet\u003c/code\u003e\u003c/p\u003e","parent_name":"ClosureParameter"},"Classes/ClosureParameter.html#/c:@CM@SourceryRuntime@objc(cs)ClosureParameter(py)isDictionary":{"name":"isDictionary","abstract":"\u003cp\u003eWhether type is a dictionary. Shorthand for \u003ccode\u003etypeName.isDictionary\u003c/code\u003e\u003c/p\u003e","parent_name":"ClosureParameter"},"Classes/DiffableResult.html#/c:@M@SourceryRuntime@objc(cs)DiffableResult(py)description":{"name":"description","parent_name":"DiffableResult"},"Classes/SetType.html#/c:@M@SourceryRuntime@objc(cs)SetType(py)name":{"name":"name","abstract":"\u003cp\u003eType name used in declaration\u003c/p\u003e","parent_name":"SetType"},"Classes/SetType.html#/c:@M@SourceryRuntime@objc(cs)SetType(py)elementTypeName":{"name":"elementTypeName","abstract":"\u003cp\u003eArray element type name\u003c/p\u003e","parent_name":"SetType"},"Classes/SetType.html#/c:@M@SourceryRuntime@objc(cs)SetType(py)elementType":{"name":"elementType","abstract":"\u003cp\u003eArray element type, if known\u003c/p\u003e","parent_name":"SetType"},"Classes/SetType.html#/c:@M@SourceryRuntime@objc(cs)SetType(py)asGeneric":{"name":"asGeneric","abstract":"\u003cp\u003eReturns array as generic type\u003c/p\u003e","parent_name":"SetType"},"Classes/SetType.html#/c:@M@SourceryRuntime@objc(cs)SetType(py)asSource":{"name":"asSource","parent_name":"SetType"},"Classes/SetType.html#/s:15SourceryRuntime8DiffableP11diffAgainstyAA0C6ResultCypSgF":{"name":"diffAgainst(_:)","parent_name":"SetType"},"Classes/Modifier.html#/c:@M@SourceryRuntime@objc(cs)Modifier(py)name":{"name":"name","abstract":"\u003cp\u003eThe declaration modifier name.\u003c/p\u003e","parent_name":"Modifier"},"Classes/Modifier.html#/c:@M@SourceryRuntime@objc(cs)Modifier(py)detail":{"name":"detail","abstract":"\u003cp\u003eThe modifier detail, if any.\u003c/p\u003e","parent_name":"Modifier"},"Classes/Modifier.html#/c:@M@SourceryRuntime@objc(cs)Modifier(im)initWithName:detail:":{"name":"init(name:detail:)","parent_name":"Modifier"},"Classes/Modifier.html#/c:@M@SourceryRuntime@objc(cs)Modifier(py)asSource":{"name":"asSource","parent_name":"Modifier"},"Classes/Modifier.html#/s:15SourceryRuntime8DiffableP11diffAgainstyAA0C6ResultCypSgF":{"name":"diffAgainst(_:)","parent_name":"Modifier"},"Classes/Import.html#/c:@M@SourceryRuntime@objc(cs)Import(py)kind":{"name":"kind","abstract":"\u003cp\u003eImport kind, e.g. class, struct in \u003ccode\u003eimport class Module.ClassName\u003c/code\u003e\u003c/p\u003e","parent_name":"Import"},"Classes/Import.html#/c:@M@SourceryRuntime@objc(cs)Import(py)path":{"name":"path","abstract":"\u003cp\u003eImport path\u003c/p\u003e","parent_name":"Import"},"Classes/Import.html#/c:@M@SourceryRuntime@objc(cs)Import(py)description":{"name":"description","abstract":"\u003cp\u003eFull import value e.g. \u003ccode\u003eimport struct Module.StructName\u003c/code\u003e\u003c/p\u003e","parent_name":"Import"},"Classes/Import.html#/c:@M@SourceryRuntime@objc(cs)Import(py)moduleName":{"name":"moduleName","abstract":"\u003cp\u003eReturns module name from a import, e.g. if you had \u003ccode\u003eimport struct Module.Submodule.Struct\u003c/code\u003e it will return \u003ccode\u003eModule.Submodule\u003c/code\u003e\u003c/p\u003e","parent_name":"Import"},"Classes/Import.html#/s:15SourceryRuntime8DiffableP11diffAgainstyAA0C6ResultCypSgF":{"name":"diffAgainst(_:)","parent_name":"Import"},"Classes/Actor.html#/c:@M@SourceryRuntime@objc(cs)SwiftActor(py)kind":{"name":"kind","abstract":"\u003cp\u003eReturns \u0026ldquo;actor\u0026rdquo;\u003c/p\u003e","parent_name":"Actor"},"Classes/Actor.html#/c:@M@SourceryRuntime@objc(cs)SwiftActor(py)isFinal":{"name":"isFinal","abstract":"\u003cp\u003eWhether type is final\u003c/p\u003e","parent_name":"Actor"},"Classes/Actor.html#/c:@M@SourceryRuntime@objc(cs)SwiftActor(im)diffAgainst:":{"name":"diffAgainst(_:)","parent_name":"Actor"},"Classes/Actor.html":{"name":"Actor","abstract":"\u003cp\u003eDescibes Swift actor\u003c/p\u003e"},"Classes/Import.html":{"name":"Import","abstract":"\u003cp\u003eDefines import type\u003c/p\u003e"},"Classes/Modifier.html":{"name":"Modifier","abstract":"\u003cp\u003emodifier can be thing like \u003ccode\u003eprivate\u003c/code\u003e, \u003ccode\u003eclass\u003c/code\u003e, \u003ccode\u003enonmutating\u003c/code\u003e"},"Classes/SetType.html":{"name":"SetType","abstract":"\u003cp\u003eDescribes set type\u003c/p\u003e"},"Classes/DiffableResult.html":{"name":"DiffableResult"},"Classes/ClosureParameter.html":{"name":"ClosureParameter"},"Classes/GenericParameter.html":{"name":"GenericParameter","abstract":"\u003cp\u003eDescibes Swift generic parameter\u003c/p\u003e"},"Classes/GenericRequirement.html":{"name":"GenericRequirement","abstract":"\u003cp\u003eDescibes Swift generic requirement\u003c/p\u003e"},"Classes/ProtocolComposition.html#/c:@M@SourceryRuntime@objc(cs)ProtocolComposition(py)kind":{"name":"kind","abstract":"\u003cp\u003eReturns \u0026ldquo;protocolComposition\u0026rdquo;\u003c/p\u003e","parent_name":"ProtocolComposition"},"Classes/ProtocolComposition.html#/c:@M@SourceryRuntime@objc(cs)ProtocolComposition(py)composedTypeNames":{"name":"composedTypeNames","abstract":"\u003cp\u003eThe names of the types composed to form this composition\u003c/p\u003e","parent_name":"ProtocolComposition"},"Classes/ProtocolComposition.html#/c:@M@SourceryRuntime@objc(cs)ProtocolComposition(py)composedTypes":{"name":"composedTypes","abstract":"\u003cp\u003eThe types composed to form this composition, if known\u003c/p\u003e","parent_name":"ProtocolComposition"},"Classes/ProtocolComposition.html#/c:@M@SourceryRuntime@objc(cs)ProtocolComposition(im)diffAgainst:":{"name":"diffAgainst(_:)","parent_name":"ProtocolComposition"},"Classes/Attribute.html#/c:@M@SourceryRuntime@objc(cs)Attribute(py)name":{"name":"name","abstract":"\u003cp\u003eAttribute name\u003c/p\u003e","parent_name":"Attribute"},"Classes/Attribute.html#/c:@M@SourceryRuntime@objc(cs)Attribute(py)arguments":{"name":"arguments","abstract":"\u003cp\u003eAttribute arguments\u003c/p\u003e","parent_name":"Attribute"},"Classes/Attribute.html#/c:@M@SourceryRuntime@objc(cs)Attribute(py)asSource":{"name":"asSource","abstract":"\u003cp\u003eTODO: unify \u003ccode\u003easSource\u003c/code\u003e / \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Attribute.html#/c:@M@SourceryRuntime@objc(cs)Attribute(py)description\"\u003edescription\u003c/a\u003e\u003c/code\u003e?\u003c/p\u003e","parent_name":"Attribute"},"Classes/Attribute.html#/c:@M@SourceryRuntime@objc(cs)Attribute(py)description":{"name":"description","abstract":"\u003cp\u003eAttribute description that can be used in a template.\u003c/p\u003e","parent_name":"Attribute"},"Classes/Attribute.html#/s:15SourceryRuntime8DiffableP11diffAgainstyAA0C6ResultCypSgF":{"name":"diffAgainst(_:)","parent_name":"Attribute"},"Classes/GenericTypeParameter.html#/c:@M@SourceryRuntime@objc(cs)GenericTypeParameter(py)typeName":{"name":"typeName","abstract":"\u003cp\u003eGeneric parameter type name\u003c/p\u003e","parent_name":"GenericTypeParameter"},"Classes/GenericTypeParameter.html#/c:@M@SourceryRuntime@objc(cs)GenericTypeParameter(py)type":{"name":"type","abstract":"\u003cp\u003eGeneric parameter type, if known\u003c/p\u003e","parent_name":"GenericTypeParameter"},"Classes/GenericTypeParameter.html#/s:15SourceryRuntime8DiffableP11diffAgainstyAA0C6ResultCypSgF":{"name":"diffAgainst(_:)","parent_name":"GenericTypeParameter"},"Classes/GenericType.html#/c:@M@SourceryRuntime@objc(cs)GenericType(py)name":{"name":"name","abstract":"\u003cp\u003eThe name of the base type, i.e. \u003ccode\u003eArray\u003c/code\u003e for \u003ccode\u003eArray\u0026lt;Int\u0026gt;\u003c/code\u003e\u003c/p\u003e","parent_name":"GenericType"},"Classes/GenericType.html#/c:@M@SourceryRuntime@objc(cs)GenericType(py)typeParameters":{"name":"typeParameters","abstract":"\u003cp\u003eThis generic type parameters\u003c/p\u003e","parent_name":"GenericType"},"Classes/GenericType.html#/c:@M@SourceryRuntime@objc(cs)GenericType(py)asSource":{"name":"asSource","parent_name":"GenericType"},"Classes/GenericType.html#/c:@M@SourceryRuntime@objc(cs)GenericType(py)description":{"name":"description","parent_name":"GenericType"},"Classes/GenericType.html#/s:15SourceryRuntime8DiffableP11diffAgainstyAA0C6ResultCypSgF":{"name":"diffAgainst(_:)","parent_name":"GenericType"},"Classes/ClosureType.html#/c:@M@SourceryRuntime@objc(cs)ClosureType(py)name":{"name":"name","abstract":"\u003cp\u003eType name used in declaration with stripped whitespaces and new lines\u003c/p\u003e","parent_name":"ClosureType"},"Classes/ClosureType.html#/c:@M@SourceryRuntime@objc(cs)ClosureType(py)parameters":{"name":"parameters","abstract":"\u003cp\u003eList of closure parameters\u003c/p\u003e","parent_name":"ClosureType"},"Classes/ClosureType.html#/c:@M@SourceryRuntime@objc(cs)ClosureType(py)returnTypeName":{"name":"returnTypeName","abstract":"\u003cp\u003eReturn value type name\u003c/p\u003e","parent_name":"ClosureType"},"Classes/ClosureType.html#/c:@M@SourceryRuntime@objc(cs)ClosureType(py)actualReturnTypeName":{"name":"actualReturnTypeName","abstract":"\u003cp\u003eActual return value type name if declaration uses typealias, otherwise just a \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ClosureType.html#/c:@M@SourceryRuntime@objc(cs)ClosureType(py)returnTypeName\"\u003ereturnTypeName\u003c/a\u003e\u003c/code\u003e\u003c/p\u003e","parent_name":"ClosureType"},"Classes/ClosureType.html#/c:@M@SourceryRuntime@objc(cs)ClosureType(py)returnType":{"name":"returnType","abstract":"\u003cp\u003eActual return value type, if known\u003c/p\u003e","parent_name":"ClosureType"},"Classes/ClosureType.html#/c:@M@SourceryRuntime@objc(cs)ClosureType(py)isOptionalReturnType":{"name":"isOptionalReturnType","abstract":"\u003cp\u003eWhether return value type is optional\u003c/p\u003e","parent_name":"ClosureType"},"Classes/ClosureType.html#/c:@M@SourceryRuntime@objc(cs)ClosureType(py)isImplicitlyUnwrappedOptionalReturnType":{"name":"isImplicitlyUnwrappedOptionalReturnType","abstract":"\u003cp\u003eWhether return value type is implicitly unwrapped optional\u003c/p\u003e","parent_name":"ClosureType"},"Classes/ClosureType.html#/c:@M@SourceryRuntime@objc(cs)ClosureType(py)unwrappedReturnTypeName":{"name":"unwrappedReturnTypeName","abstract":"\u003cp\u003eReturn value type name without attributes and optional type information\u003c/p\u003e","parent_name":"ClosureType"},"Classes/ClosureType.html#/c:@M@SourceryRuntime@objc(cs)ClosureType(py)isAsync":{"name":"isAsync","abstract":"\u003cp\u003eWhether method is async method\u003c/p\u003e","parent_name":"ClosureType"},"Classes/ClosureType.html#/c:@M@SourceryRuntime@objc(cs)ClosureType(py)asyncKeyword":{"name":"asyncKeyword","abstract":"\u003cp\u003easync keyword\u003c/p\u003e","parent_name":"ClosureType"},"Classes/ClosureType.html#/c:@M@SourceryRuntime@objc(cs)ClosureType(py)throws":{"name":"throws","abstract":"\u003cp\u003eWhether closure throws\u003c/p\u003e","parent_name":"ClosureType"},"Classes/ClosureType.html#/c:@M@SourceryRuntime@objc(cs)ClosureType(py)throwsOrRethrowsKeyword":{"name":"throwsOrRethrowsKeyword","abstract":"\u003cp\u003ethrows or rethrows keyword\u003c/p\u003e","parent_name":"ClosureType"},"Classes/ClosureType.html#/c:@M@SourceryRuntime@objc(cs)ClosureType(py)asSource":{"name":"asSource","parent_name":"ClosureType"},"Classes/ClosureType.html#/s:15SourceryRuntime8DiffableP11diffAgainstyAA0C6ResultCypSgF":{"name":"diffAgainst(_:)","parent_name":"ClosureType"},"Classes/DictionaryType.html#/c:@M@SourceryRuntime@objc(cs)DictionaryType(py)name":{"name":"name","abstract":"\u003cp\u003eType name used in declaration\u003c/p\u003e","parent_name":"DictionaryType"},"Classes/DictionaryType.html#/c:@M@SourceryRuntime@objc(cs)DictionaryType(py)valueTypeName":{"name":"valueTypeName","abstract":"\u003cp\u003eDictionary value type name\u003c/p\u003e","parent_name":"DictionaryType"},"Classes/DictionaryType.html#/c:@M@SourceryRuntime@objc(cs)DictionaryType(py)valueType":{"name":"valueType","abstract":"\u003cp\u003eDictionary value type, if known\u003c/p\u003e","parent_name":"DictionaryType"},"Classes/DictionaryType.html#/c:@M@SourceryRuntime@objc(cs)DictionaryType(py)keyTypeName":{"name":"keyTypeName","abstract":"\u003cp\u003eDictionary key type name\u003c/p\u003e","parent_name":"DictionaryType"},"Classes/DictionaryType.html#/c:@M@SourceryRuntime@objc(cs)DictionaryType(py)keyType":{"name":"keyType","abstract":"\u003cp\u003eDictionary key type, if known\u003c/p\u003e","parent_name":"DictionaryType"},"Classes/DictionaryType.html#/c:@M@SourceryRuntime@objc(cs)DictionaryType(py)asGeneric":{"name":"asGeneric","abstract":"\u003cp\u003eReturns dictionary as generic type\u003c/p\u003e","parent_name":"DictionaryType"},"Classes/DictionaryType.html#/c:@M@SourceryRuntime@objc(cs)DictionaryType(py)asSource":{"name":"asSource","parent_name":"DictionaryType"},"Classes/DictionaryType.html#/s:15SourceryRuntime8DiffableP11diffAgainstyAA0C6ResultCypSgF":{"name":"diffAgainst(_:)","parent_name":"DictionaryType"},"Classes/ArrayType.html#/c:@M@SourceryRuntime@objc(cs)ArrayType(py)name":{"name":"name","abstract":"\u003cp\u003eType name used in declaration\u003c/p\u003e","parent_name":"ArrayType"},"Classes/ArrayType.html#/c:@M@SourceryRuntime@objc(cs)ArrayType(py)elementTypeName":{"name":"elementTypeName","abstract":"\u003cp\u003eArray element type name\u003c/p\u003e","parent_name":"ArrayType"},"Classes/ArrayType.html#/c:@M@SourceryRuntime@objc(cs)ArrayType(py)elementType":{"name":"elementType","abstract":"\u003cp\u003eArray element type, if known\u003c/p\u003e","parent_name":"ArrayType"},"Classes/ArrayType.html#/c:@M@SourceryRuntime@objc(cs)ArrayType(py)asGeneric":{"name":"asGeneric","abstract":"\u003cp\u003eReturns array as generic type\u003c/p\u003e","parent_name":"ArrayType"},"Classes/ArrayType.html#/c:@M@SourceryRuntime@objc(cs)ArrayType(py)asSource":{"name":"asSource","parent_name":"ArrayType"},"Classes/ArrayType.html#/s:15SourceryRuntime8DiffableP11diffAgainstyAA0C6ResultCypSgF":{"name":"diffAgainst(_:)","parent_name":"ArrayType"},"Classes/TupleElement.html#/c:@M@SourceryRuntime@objc(cs)TupleElement(py)name":{"name":"name","abstract":"\u003cp\u003eTuple element name\u003c/p\u003e","parent_name":"TupleElement"},"Classes/TupleElement.html#/c:@M@SourceryRuntime@objc(cs)TupleElement(py)typeName":{"name":"typeName","abstract":"\u003cp\u003eTuple element type name\u003c/p\u003e","parent_name":"TupleElement"},"Classes/TupleElement.html#/c:@M@SourceryRuntime@objc(cs)TupleElement(py)type":{"name":"type","abstract":"\u003cp\u003eTuple element type, if known\u003c/p\u003e","parent_name":"TupleElement"},"Classes/TupleElement.html#/c:@M@SourceryRuntime@objc(cs)TupleElement(py)asSource":{"name":"asSource","parent_name":"TupleElement"},"Classes/TupleElement.html#/s:15SourceryRuntime8DiffableP11diffAgainstyAA0C6ResultCypSgF":{"name":"diffAgainst(_:)","parent_name":"TupleElement"},"Classes/TupleElement.html#/c:@CM@SourceryRuntime@objc(cs)TupleElement(py)isOptional":{"name":"isOptional","abstract":"\u003cp\u003eWhether type is optional. Shorthand for \u003ccode\u003etypeName.isOptional\u003c/code\u003e\u003c/p\u003e","parent_name":"TupleElement"},"Classes/TupleElement.html#/c:@CM@SourceryRuntime@objc(cs)TupleElement(py)isImplicitlyUnwrappedOptional":{"name":"isImplicitlyUnwrappedOptional","abstract":"\u003cp\u003eWhether type is implicitly unwrapped optional. Shorthand for \u003ccode\u003etypeName.isImplicitlyUnwrappedOptional\u003c/code\u003e\u003c/p\u003e","parent_name":"TupleElement"},"Classes/TupleElement.html#/c:@CM@SourceryRuntime@objc(cs)TupleElement(py)unwrappedTypeName":{"name":"unwrappedTypeName","abstract":"\u003cp\u003eType name without attributes and optional type information. Shorthand for \u003ccode\u003etypeName.unwrappedTypeName\u003c/code\u003e\u003c/p\u003e","parent_name":"TupleElement"},"Classes/TupleElement.html#/c:@CM@SourceryRuntime@objc(cs)TupleElement(py)actualTypeName":{"name":"actualTypeName","abstract":"\u003cp\u003eActual type name if declaration uses typealias, otherwise just a \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/TupleElement.html#/c:@M@SourceryRuntime@objc(cs)TupleElement(py)typeName\"\u003etypeName\u003c/a\u003e\u003c/code\u003e. Shorthand for \u003ccode\u003etypeName.actualTypeName\u003c/code\u003e\u003c/p\u003e","parent_name":"TupleElement"},"Classes/TupleElement.html#/c:@CM@SourceryRuntime@objc(cs)TupleElement(py)isTuple":{"name":"isTuple","abstract":"\u003cp\u003eWhether type is a tuple. Shorthand for \u003ccode\u003etypeName.isTuple\u003c/code\u003e\u003c/p\u003e","parent_name":"TupleElement"},"Classes/TupleElement.html#/c:@CM@SourceryRuntime@objc(cs)TupleElement(py)isClosure":{"name":"isClosure","abstract":"\u003cp\u003eWhether type is a closure. Shorthand for \u003ccode\u003etypeName.isClosure\u003c/code\u003e\u003c/p\u003e","parent_name":"TupleElement"},"Classes/TupleElement.html#/c:@CM@SourceryRuntime@objc(cs)TupleElement(py)isArray":{"name":"isArray","abstract":"\u003cp\u003eWhether type is an array. Shorthand for \u003ccode\u003etypeName.isArray\u003c/code\u003e\u003c/p\u003e","parent_name":"TupleElement"},"Classes/TupleElement.html#/c:@CM@SourceryRuntime@objc(cs)TupleElement(py)isSet":{"name":"isSet","abstract":"\u003cp\u003eWhether type is a set. Shorthand for \u003ccode\u003etypeName.isSet\u003c/code\u003e\u003c/p\u003e","parent_name":"TupleElement"},"Classes/TupleElement.html#/c:@CM@SourceryRuntime@objc(cs)TupleElement(py)isDictionary":{"name":"isDictionary","abstract":"\u003cp\u003eWhether type is a dictionary. Shorthand for \u003ccode\u003etypeName.isDictionary\u003c/code\u003e\u003c/p\u003e","parent_name":"TupleElement"},"Classes/TupleType.html#/c:@M@SourceryRuntime@objc(cs)TupleType(py)name":{"name":"name","abstract":"\u003cp\u003eType name used in declaration\u003c/p\u003e","parent_name":"TupleType"},"Classes/TupleType.html#/c:@M@SourceryRuntime@objc(cs)TupleType(py)elements":{"name":"elements","abstract":"\u003cp\u003eTuple elements\u003c/p\u003e","parent_name":"TupleType"},"Classes/TupleType.html#/s:15SourceryRuntime8DiffableP11diffAgainstyAA0C6ResultCypSgF":{"name":"diffAgainst(_:)","parent_name":"TupleType"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)name":{"name":"name","abstract":"\u003cp\u003eType name used in declaration\u003c/p\u003e","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)generic":{"name":"generic","abstract":"\u003cp\u003eThe generics of this TypeName\u003c/p\u003e","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)isGeneric":{"name":"isGeneric","abstract":"\u003cp\u003eWhether this TypeName is generic\u003c/p\u003e","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)isProtocolComposition":{"name":"isProtocolComposition","abstract":"\u003cp\u003eWhether this TypeName is protocol composition\u003c/p\u003e","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)actualTypeName":{"name":"actualTypeName","abstract":"\u003cp\u003eActual type name if given type name is a typealias\u003c/p\u003e","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)attributes":{"name":"attributes","abstract":"\u003cp\u003eType name attributes, i.e. \u003ccode\u003e@escaping\u003c/code\u003e\u003c/p\u003e","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)modifiers":{"name":"modifiers","abstract":"\u003cp\u003eModifiers, i.e. \u003ccode\u003eescaping\u003c/code\u003e\u003c/p\u003e","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)isOptional":{"name":"isOptional","abstract":"\u003cp\u003eWhether type is optional\u003c/p\u003e","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)isImplicitlyUnwrappedOptional":{"name":"isImplicitlyUnwrappedOptional","abstract":"\u003cp\u003eWhether type is implicitly unwrapped optional\u003c/p\u003e","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)unwrappedTypeName":{"name":"unwrappedTypeName","abstract":"\u003cp\u003eType name without attributes and optional type information\u003c/p\u003e","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)isVoid":{"name":"isVoid","abstract":"\u003cp\u003eWhether type is void (\u003ccode\u003eVoid\u003c/code\u003e or \u003ccode\u003e()\u003c/code\u003e)\u003c/p\u003e","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)isTuple":{"name":"isTuple","abstract":"\u003cp\u003eWhether type is a tuple\u003c/p\u003e","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)tuple":{"name":"tuple","abstract":"\u003cp\u003eTuple type data\u003c/p\u003e","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)isArray":{"name":"isArray","abstract":"\u003cp\u003eWhether type is an array\u003c/p\u003e","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)array":{"name":"array","abstract":"\u003cp\u003eArray type data\u003c/p\u003e","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)isDictionary":{"name":"isDictionary","abstract":"\u003cp\u003eWhether type is a dictionary\u003c/p\u003e","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)dictionary":{"name":"dictionary","abstract":"\u003cp\u003eDictionary type data\u003c/p\u003e","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)isClosure":{"name":"isClosure","abstract":"\u003cp\u003eWhether type is a closure\u003c/p\u003e","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)closure":{"name":"closure","abstract":"\u003cp\u003eClosure type data\u003c/p\u003e","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)isSet":{"name":"isSet","abstract":"\u003cp\u003eWhether type is a Set\u003c/p\u003e","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)set":{"name":"set","abstract":"\u003cp\u003eSet type data\u003c/p\u003e","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)asSource":{"name":"asSource","abstract":"\u003cp\u003ePrints typename as it would appear on definition\u003c/p\u003e","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)description":{"name":"description","parent_name":"TypeName"},"Classes/TypeName.html#/s:15SourceryRuntime8DiffableP11diffAgainstyAA0C6ResultCypSgF":{"name":"diffAgainst(_:)","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)hash":{"name":"hash","parent_name":"TypeName"},"Classes/TypeName.html#/s:s25LosslessStringConvertiblePyxSgSScfc":{"name":"init(_:)","parent_name":"TypeName"},"Classes/TypeName.html#/c:@CM@SourceryRuntime@objc(cs)TypeName(cm)unknownWithDescription:attributes:":{"name":"unknown(description:attributes:)","parent_name":"TypeName"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)parameters":{"name":"parameters","abstract":"\u003cp\u003eMethod parameters\u003c/p\u003e","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)returnTypeName":{"name":"returnTypeName","abstract":"\u003cp\u003eReturn value type name used in declaration, including generic constraints, i.e. \u003ccode\u003ewhere T: Equatable\u003c/code\u003e\u003c/p\u003e","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)actualReturnTypeName":{"name":"actualReturnTypeName","abstract":"\u003cp\u003eActual return value type name if declaration uses typealias, otherwise just a \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)returnTypeName\"\u003ereturnTypeName\u003c/a\u003e\u003c/code\u003e\u003c/p\u003e","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)returnType":{"name":"returnType","abstract":"\u003cp\u003eActual return value type, if known\u003c/p\u003e","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)isOptionalReturnType":{"name":"isOptionalReturnType","abstract":"\u003cp\u003eWhether return value type is optional\u003c/p\u003e","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)isImplicitlyUnwrappedOptionalReturnType":{"name":"isImplicitlyUnwrappedOptionalReturnType","abstract":"\u003cp\u003eWhether return value type is implicitly unwrapped optional\u003c/p\u003e","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)unwrappedReturnTypeName":{"name":"unwrappedReturnTypeName","abstract":"\u003cp\u003eReturn value type name without attributes and optional type information\u003c/p\u003e","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)isFinal":{"name":"isFinal","abstract":"\u003cp\u003eWhether method is final\u003c/p\u003e","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)readAccess":{"name":"readAccess","abstract":"\u003cp\u003eVariable read access level, i.e. \u003ccode\u003einternal\u003c/code\u003e, \u003ccode\u003eprivate\u003c/code\u003e, \u003ccode\u003efileprivate\u003c/code\u003e, \u003ccode\u003epublic\u003c/code\u003e, \u003ccode\u003eopen\u003c/code\u003e\u003c/p\u003e","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)writeAccess":{"name":"writeAccess","abstract":"\u003cp\u003eVariable write access, i.e. \u003ccode\u003einternal\u003c/code\u003e, \u003ccode\u003eprivate\u003c/code\u003e, \u003ccode\u003efileprivate\u003c/code\u003e, \u003ccode\u003epublic\u003c/code\u003e, \u003ccode\u003eopen\u003c/code\u003e.","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)isAsync":{"name":"isAsync","abstract":"\u003cp\u003eWhether subscript is async\u003c/p\u003e","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)throws":{"name":"throws","abstract":"\u003cp\u003eWhether subscript throws\u003c/p\u003e","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)isMutable":{"name":"isMutable","abstract":"\u003cp\u003eWhether variable is mutable or not\u003c/p\u003e","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)annotations":{"name":"annotations","abstract":"\u003cp\u003eAnnotations, that were created with // sourcery: annotation1, other = \u0026ldquo;annotation value\u0026rdquo;, alterantive = 2\u003c/p\u003e","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)documentation":{"name":"documentation","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)definedInTypeName":{"name":"definedInTypeName","abstract":"\u003cp\u003eReference to type name where the method is defined,","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)actualDefinedInTypeName":{"name":"actualDefinedInTypeName","abstract":"\u003cp\u003eReference to actual type name where the method is defined if declaration uses typealias, otherwise just a \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)definedInTypeName\"\u003edefinedInTypeName\u003c/a\u003e\u003c/code\u003e\u003c/p\u003e","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)definedInType":{"name":"definedInType","abstract":"\u003cp\u003eReference to actual type where the object is defined,","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)attributes":{"name":"attributes","abstract":"\u003cp\u003eMethod attributes, i.e. \u003ccode\u003e@discardableResult\u003c/code\u003e\u003c/p\u003e","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)modifiers":{"name":"modifiers","abstract":"\u003cp\u003eMethod modifiers, i.e. \u003ccode\u003eprivate\u003c/code\u003e\u003c/p\u003e","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)genericParameters":{"name":"genericParameters","abstract":"\u003cp\u003elist of generic parameters\u003c/p\u003e","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)genericRequirements":{"name":"genericRequirements","abstract":"\u003cp\u003elist of generic requirements\u003c/p\u003e","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)isGeneric":{"name":"isGeneric","abstract":"\u003cp\u003eWhether subscript is generic or not\u003c/p\u003e","parent_name":"Subscript"},"Classes/Subscript.html#/s:15SourceryRuntime9SubscriptC10parameters14returnTypeName11accessLevel7isAsync6throws17genericParameters0M12Requirements10attributes9modifiers11annotations13documentation09definedInfG0ACSayAA15MethodParameterCG_AA0fG0CAA06AccessI0O4read_AV5writetS2bSayAA07GenericW0CGSayAA18GenericRequirementCGSDySSSayAA9AttributeCGGSayAA8ModifierCGSDySSSo8NSObjectCGSaySSGATSgtcfc":{"name":"init(parameters:returnTypeName:accessLevel:isAsync:throws:genericParameters:genericRequirements:attributes:modifiers:annotations:documentation:definedInTypeName:)","parent_name":"Subscript"},"Classes/Subscript.html#/s:15SourceryRuntime8DiffableP11diffAgainstyAA0C6ResultCypSgF":{"name":"diffAgainst(_:)","parent_name":"Subscript"},"Classes/MethodParameter.html#/c:@M@SourceryRuntime@objc(cs)MethodParameter(py)argumentLabel":{"name":"argumentLabel","abstract":"\u003cp\u003eParameter external name\u003c/p\u003e","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/c:@M@SourceryRuntime@objc(cs)MethodParameter(py)name":{"name":"name","abstract":"\u003cp\u003eParameter internal name\u003c/p\u003e","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/c:@M@SourceryRuntime@objc(cs)MethodParameter(py)typeName":{"name":"typeName","abstract":"\u003cp\u003eParameter type name\u003c/p\u003e","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/c:@M@SourceryRuntime@objc(cs)MethodParameter(py)inout":{"name":"inout","abstract":"\u003cp\u003eParameter flag whether it\u0026rsquo;s inout or not\u003c/p\u003e","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/c:@M@SourceryRuntime@objc(cs)MethodParameter(py)isVariadic":{"name":"isVariadic","abstract":"\u003cp\u003eIs this variadic parameter?\u003c/p\u003e","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/c:@M@SourceryRuntime@objc(cs)MethodParameter(py)type":{"name":"type","abstract":"\u003cp\u003eParameter type, if known\u003c/p\u003e","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/c:@M@SourceryRuntime@objc(cs)MethodParameter(py)typeAttributes":{"name":"typeAttributes","abstract":"\u003cp\u003eParameter type attributes, i.e. \u003ccode\u003e@escaping\u003c/code\u003e\u003c/p\u003e","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/c:@M@SourceryRuntime@objc(cs)MethodParameter(py)defaultValue":{"name":"defaultValue","abstract":"\u003cp\u003eMethod parameter default value expression\u003c/p\u003e","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/c:@M@SourceryRuntime@objc(cs)MethodParameter(py)annotations":{"name":"annotations","abstract":"\u003cp\u003eAnnotations, that were created with // sourcery: annotation1, other = \u0026ldquo;annotation value\u0026rdquo;, alterantive = 2\u003c/p\u003e","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/c:@M@SourceryRuntime@objc(cs)MethodParameter(py)asSource":{"name":"asSource","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/s:15SourceryRuntime8DiffableP11diffAgainstyAA0C6ResultCypSgF":{"name":"diffAgainst(_:)","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/c:@CM@SourceryRuntime@objc(cs)MethodParameter(py)isOptional":{"name":"isOptional","abstract":"\u003cp\u003eWhether type is optional. Shorthand for \u003ccode\u003etypeName.isOptional\u003c/code\u003e\u003c/p\u003e","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/c:@CM@SourceryRuntime@objc(cs)MethodParameter(py)isImplicitlyUnwrappedOptional":{"name":"isImplicitlyUnwrappedOptional","abstract":"\u003cp\u003eWhether type is implicitly unwrapped optional. Shorthand for \u003ccode\u003etypeName.isImplicitlyUnwrappedOptional\u003c/code\u003e\u003c/p\u003e","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/c:@CM@SourceryRuntime@objc(cs)MethodParameter(py)unwrappedTypeName":{"name":"unwrappedTypeName","abstract":"\u003cp\u003eType name without attributes and optional type information. Shorthand for \u003ccode\u003etypeName.unwrappedTypeName\u003c/code\u003e\u003c/p\u003e","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/c:@CM@SourceryRuntime@objc(cs)MethodParameter(py)actualTypeName":{"name":"actualTypeName","abstract":"\u003cp\u003eActual type name if declaration uses typealias, otherwise just a \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/MethodParameter.html#/c:@M@SourceryRuntime@objc(cs)MethodParameter(py)typeName\"\u003etypeName\u003c/a\u003e\u003c/code\u003e. Shorthand for \u003ccode\u003etypeName.actualTypeName\u003c/code\u003e\u003c/p\u003e","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/c:@CM@SourceryRuntime@objc(cs)MethodParameter(py)isTuple":{"name":"isTuple","abstract":"\u003cp\u003eWhether type is a tuple. Shorthand for \u003ccode\u003etypeName.isTuple\u003c/code\u003e\u003c/p\u003e","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/c:@CM@SourceryRuntime@objc(cs)MethodParameter(py)isClosure":{"name":"isClosure","abstract":"\u003cp\u003eWhether type is a closure. Shorthand for \u003ccode\u003etypeName.isClosure\u003c/code\u003e\u003c/p\u003e","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/c:@CM@SourceryRuntime@objc(cs)MethodParameter(py)isArray":{"name":"isArray","abstract":"\u003cp\u003eWhether type is an array. Shorthand for \u003ccode\u003etypeName.isArray\u003c/code\u003e\u003c/p\u003e","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/c:@CM@SourceryRuntime@objc(cs)MethodParameter(py)isSet":{"name":"isSet","abstract":"\u003cp\u003eWhether type is a set. Shorthand for \u003ccode\u003etypeName.isSet\u003c/code\u003e\u003c/p\u003e","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/c:@CM@SourceryRuntime@objc(cs)MethodParameter(py)isDictionary":{"name":"isDictionary","abstract":"\u003cp\u003eWhether type is a dictionary. Shorthand for \u003ccode\u003etypeName.isDictionary\u003c/code\u003e\u003c/p\u003e","parent_name":"MethodParameter"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)name":{"name":"name","abstract":"\u003cp\u003eFull method name, including generic constraints, i.e. \u003ccode\u003efoo\u0026lt;T\u0026gt;(bar: T)\u003c/code\u003e\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)selectorName":{"name":"selectorName","abstract":"\u003cp\u003eMethod name including arguments names, i.e. \u003ccode\u003efoo(bar:)\u003c/code\u003e\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)shortName":{"name":"shortName","abstract":"\u003cp\u003eMethod name without arguments names and parenthesis, i.e. \u003ccode\u003efoo\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)callName":{"name":"callName","abstract":"\u003cp\u003eMethod name without arguments names, parenthesis and generic types, i.e. \u003ccode\u003efoo\u003c/code\u003e (can be used to generate code for method call)\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)parameters":{"name":"parameters","abstract":"\u003cp\u003eMethod parameters\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)returnTypeName":{"name":"returnTypeName","abstract":"\u003cp\u003eReturn value type name used in declaration, including generic constraints, i.e. \u003ccode\u003ewhere T: Equatable\u003c/code\u003e\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)actualReturnTypeName":{"name":"actualReturnTypeName","abstract":"\u003cp\u003eActual return value type name if declaration uses typealias, otherwise just a \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)returnTypeName\"\u003ereturnTypeName\u003c/a\u003e\u003c/code\u003e\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)returnType":{"name":"returnType","abstract":"\u003cp\u003eActual return value type, if known\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isOptionalReturnType":{"name":"isOptionalReturnType","abstract":"\u003cp\u003eWhether return value type is optional\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isImplicitlyUnwrappedOptionalReturnType":{"name":"isImplicitlyUnwrappedOptionalReturnType","abstract":"\u003cp\u003eWhether return value type is implicitly unwrapped optional\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)unwrappedReturnTypeName":{"name":"unwrappedReturnTypeName","abstract":"\u003cp\u003eReturn value type name without attributes and optional type information\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isAsync":{"name":"isAsync","abstract":"\u003cp\u003eWhether method is async method\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)throws":{"name":"throws","abstract":"\u003cp\u003eWhether method throws\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)rethrows":{"name":"rethrows","abstract":"\u003cp\u003eWhether method rethrows\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)accessLevel":{"name":"accessLevel","abstract":"\u003cp\u003eMethod access level, i.e. \u003ccode\u003einternal\u003c/code\u003e, \u003ccode\u003eprivate\u003c/code\u003e, \u003ccode\u003efileprivate\u003c/code\u003e, \u003ccode\u003epublic\u003c/code\u003e, \u003ccode\u003eopen\u003c/code\u003e\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isStatic":{"name":"isStatic","abstract":"\u003cp\u003eWhether method is a static method\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isClass":{"name":"isClass","abstract":"\u003cp\u003eWhether method is a class method\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isInitializer":{"name":"isInitializer","abstract":"\u003cp\u003eWhether method is an initializer\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isDeinitializer":{"name":"isDeinitializer","abstract":"\u003cp\u003eWhether method is an deinitializer\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isFailableInitializer":{"name":"isFailableInitializer","abstract":"\u003cp\u003eWhether method is a failable initializer\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isConvenienceInitializer":{"name":"isConvenienceInitializer","abstract":"\u003cp\u003eWhether method is a convenience initializer\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isRequired":{"name":"isRequired","abstract":"\u003cp\u003eWhether method is required\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isFinal":{"name":"isFinal","abstract":"\u003cp\u003eWhether method is final\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isMutating":{"name":"isMutating","abstract":"\u003cp\u003eWhether method is mutating\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isGeneric":{"name":"isGeneric","abstract":"\u003cp\u003eWhether method is generic\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isOptional":{"name":"isOptional","abstract":"\u003cp\u003eWhether method is optional (in an Objective-C protocol)\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isNonisolated":{"name":"isNonisolated","abstract":"\u003cp\u003eWhether method is nonisolated (this modifier only applies to actor methods)\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isDynamic":{"name":"isDynamic","abstract":"\u003cp\u003eWhether method is dynamic\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)annotations":{"name":"annotations","abstract":"\u003cp\u003eAnnotations, that were created with // sourcery: annotation1, other = \u0026ldquo;annotation value\u0026rdquo;, alterantive = 2\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)documentation":{"name":"documentation","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)definedInTypeName":{"name":"definedInTypeName","abstract":"\u003cp\u003eReference to type name where the method is defined,","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)actualDefinedInTypeName":{"name":"actualDefinedInTypeName","abstract":"\u003cp\u003eReference to actual type name where the method is defined if declaration uses typealias, otherwise just a \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)definedInTypeName\"\u003edefinedInTypeName\u003c/a\u003e\u003c/code\u003e\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)definedInType":{"name":"definedInType","abstract":"\u003cp\u003eReference to actual type where the object is defined,","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)attributes":{"name":"attributes","abstract":"\u003cp\u003eMethod attributes, i.e. \u003ccode\u003e@discardableResult\u003c/code\u003e\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)modifiers":{"name":"modifiers","abstract":"\u003cp\u003eMethod modifiers, i.e. \u003ccode\u003eprivate\u003c/code\u003e\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)genericRequirements":{"name":"genericRequirements","abstract":"\u003cp\u003elist of generic requirements\u003c/p\u003e","parent_name":"Method"},"Classes/Method.html#/s:15SourceryRuntime8DiffableP11diffAgainstyAA0C6ResultCypSgF":{"name":"diffAgainst(_:)","parent_name":"Method"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)name":{"name":"name","abstract":"\u003cp\u003eVariable name\u003c/p\u003e","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)typeName":{"name":"typeName","abstract":"\u003cp\u003eVariable type name\u003c/p\u003e","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)type":{"name":"type","abstract":"\u003cp\u003eVariable type, if known, i.e. if the type is declared in the scanned sources.","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)isComputed":{"name":"isComputed","abstract":"\u003cp\u003eWhether variable is computed and not stored\u003c/p\u003e","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)isAsync":{"name":"isAsync","abstract":"\u003cp\u003eWhether variable is async\u003c/p\u003e","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)throws":{"name":"throws","abstract":"\u003cp\u003eWhether variable throws\u003c/p\u003e","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)isStatic":{"name":"isStatic","abstract":"\u003cp\u003eWhether variable is static\u003c/p\u003e","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)readAccess":{"name":"readAccess","abstract":"\u003cp\u003eVariable read access level, i.e. \u003ccode\u003einternal\u003c/code\u003e, \u003ccode\u003eprivate\u003c/code\u003e, \u003ccode\u003efileprivate\u003c/code\u003e, \u003ccode\u003epublic\u003c/code\u003e, \u003ccode\u003eopen\u003c/code\u003e\u003c/p\u003e","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)writeAccess":{"name":"writeAccess","abstract":"\u003cp\u003eVariable write access, i.e. \u003ccode\u003einternal\u003c/code\u003e, \u003ccode\u003eprivate\u003c/code\u003e, \u003ccode\u003efileprivate\u003c/code\u003e, \u003ccode\u003epublic\u003c/code\u003e, \u003ccode\u003eopen\u003c/code\u003e.","parent_name":"Variable"},"Classes/Variable.html#/s:15SourceryRuntime8VariableC11accessLevelAA06AccessE0O4read_AF5writetvp":{"name":"accessLevel","abstract":"\u003cp\u003ecomposed access level","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)isMutable":{"name":"isMutable","abstract":"\u003cp\u003eWhether variable is mutable or not\u003c/p\u003e","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)defaultValue":{"name":"defaultValue","abstract":"\u003cp\u003eVariable default value expression\u003c/p\u003e","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)annotations":{"name":"annotations","abstract":"\u003cp\u003eAnnotations, that were created with // sourcery: annotation1, other = \u0026ldquo;annotation value\u0026rdquo;, alterantive = 2\u003c/p\u003e","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)documentation":{"name":"documentation","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)attributes":{"name":"attributes","abstract":"\u003cp\u003eVariable attributes, i.e. \u003ccode\u003e@IBOutlet\u003c/code\u003e, \u003ccode\u003e@IBInspectable\u003c/code\u003e\u003c/p\u003e","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)modifiers":{"name":"modifiers","abstract":"\u003cp\u003eModifiers, i.e. \u003ccode\u003eprivate\u003c/code\u003e\u003c/p\u003e","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)isFinal":{"name":"isFinal","abstract":"\u003cp\u003eWhether variable is final or not\u003c/p\u003e","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)isLazy":{"name":"isLazy","abstract":"\u003cp\u003eWhether variable is lazy or not\u003c/p\u003e","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)isDynamic":{"name":"isDynamic","abstract":"\u003cp\u003eWhether variable is dynamic or not\u003c/p\u003e","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)definedInTypeName":{"name":"definedInTypeName","abstract":"\u003cp\u003eReference to type name where the variable is defined,","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)actualDefinedInTypeName":{"name":"actualDefinedInTypeName","abstract":"\u003cp\u003eReference to actual type name where the method is defined if declaration uses typealias, otherwise just a \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)definedInTypeName\"\u003edefinedInTypeName\u003c/a\u003e\u003c/code\u003e\u003c/p\u003e","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)definedInType":{"name":"definedInType","abstract":"\u003cp\u003eReference to actual type where the object is defined,","parent_name":"Variable"},"Classes/Variable.html#/s:15SourceryRuntime8DiffableP11diffAgainstyAA0C6ResultCypSgF":{"name":"diffAgainst(_:)","parent_name":"Variable"},"Classes/Variable.html#/c:@CM@SourceryRuntime@objc(cs)Variable(py)isOptional":{"name":"isOptional","abstract":"\u003cp\u003eWhether type is optional. Shorthand for \u003ccode\u003etypeName.isOptional\u003c/code\u003e\u003c/p\u003e","parent_name":"Variable"},"Classes/Variable.html#/c:@CM@SourceryRuntime@objc(cs)Variable(py)isImplicitlyUnwrappedOptional":{"name":"isImplicitlyUnwrappedOptional","abstract":"\u003cp\u003eWhether type is implicitly unwrapped optional. Shorthand for \u003ccode\u003etypeName.isImplicitlyUnwrappedOptional\u003c/code\u003e\u003c/p\u003e","parent_name":"Variable"},"Classes/Variable.html#/c:@CM@SourceryRuntime@objc(cs)Variable(py)unwrappedTypeName":{"name":"unwrappedTypeName","abstract":"\u003cp\u003eType name without attributes and optional type information. Shorthand for \u003ccode\u003etypeName.unwrappedTypeName\u003c/code\u003e\u003c/p\u003e","parent_name":"Variable"},"Classes/Variable.html#/c:@CM@SourceryRuntime@objc(cs)Variable(py)actualTypeName":{"name":"actualTypeName","abstract":"\u003cp\u003eActual type name if declaration uses typealias, otherwise just a \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)typeName\"\u003etypeName\u003c/a\u003e\u003c/code\u003e. Shorthand for \u003ccode\u003etypeName.actualTypeName\u003c/code\u003e\u003c/p\u003e","parent_name":"Variable"},"Classes/Variable.html#/c:@CM@SourceryRuntime@objc(cs)Variable(py)isTuple":{"name":"isTuple","abstract":"\u003cp\u003eWhether type is a tuple. Shorthand for \u003ccode\u003etypeName.isTuple\u003c/code\u003e\u003c/p\u003e","parent_name":"Variable"},"Classes/Variable.html#/c:@CM@SourceryRuntime@objc(cs)Variable(py)isClosure":{"name":"isClosure","abstract":"\u003cp\u003eWhether type is a closure. Shorthand for \u003ccode\u003etypeName.isClosure\u003c/code\u003e\u003c/p\u003e","parent_name":"Variable"},"Classes/Variable.html#/c:@CM@SourceryRuntime@objc(cs)Variable(py)isArray":{"name":"isArray","abstract":"\u003cp\u003eWhether type is an array. Shorthand for \u003ccode\u003etypeName.isArray\u003c/code\u003e\u003c/p\u003e","parent_name":"Variable"},"Classes/Variable.html#/c:@CM@SourceryRuntime@objc(cs)Variable(py)isSet":{"name":"isSet","abstract":"\u003cp\u003eWhether type is a set. Shorthand for \u003ccode\u003etypeName.isSet\u003c/code\u003e\u003c/p\u003e","parent_name":"Variable"},"Classes/Variable.html#/c:@CM@SourceryRuntime@objc(cs)Variable(py)isDictionary":{"name":"isDictionary","abstract":"\u003cp\u003eWhether type is a dictionary. Shorthand for \u003ccode\u003etypeName.isDictionary\u003c/code\u003e\u003c/p\u003e","parent_name":"Variable"},"Classes/AssociatedType.html#/c:@M@SourceryRuntime@objc(cs)AssociatedType(py)name":{"name":"name","abstract":"\u003cp\u003eAssociated type name\u003c/p\u003e","parent_name":"AssociatedType"},"Classes/AssociatedType.html#/c:@M@SourceryRuntime@objc(cs)AssociatedType(py)typeName":{"name":"typeName","abstract":"\u003cp\u003eAssociated type type constraint name, if specified\u003c/p\u003e","parent_name":"AssociatedType"},"Classes/AssociatedType.html#/c:@M@SourceryRuntime@objc(cs)AssociatedType(py)type":{"name":"type","abstract":"\u003cp\u003eAssociated type constrained type, if known, i.e. if the type is declared in the scanned sources.\u003c/p\u003e","parent_name":"AssociatedType"},"Classes/AssociatedType.html#/c:@M@SourceryRuntime@objc(cs)AssociatedType(im)diffAgainst:":{"name":"diffAgainst(_:)","parent_name":"AssociatedType"},"Classes/AssociatedValue.html#/c:@M@SourceryRuntime@objc(cs)AssociatedValue(py)localName":{"name":"localName","abstract":"\u003cp\u003eAssociated value local name.","parent_name":"AssociatedValue"},"Classes/AssociatedValue.html#/c:@M@SourceryRuntime@objc(cs)AssociatedValue(py)externalName":{"name":"externalName","abstract":"\u003cp\u003eAssociated value external name.","parent_name":"AssociatedValue"},"Classes/AssociatedValue.html#/c:@M@SourceryRuntime@objc(cs)AssociatedValue(py)typeName":{"name":"typeName","abstract":"\u003cp\u003eAssociated value type name\u003c/p\u003e","parent_name":"AssociatedValue"},"Classes/AssociatedValue.html#/c:@M@SourceryRuntime@objc(cs)AssociatedValue(py)type":{"name":"type","abstract":"\u003cp\u003eAssociated value type, if known\u003c/p\u003e","parent_name":"AssociatedValue"},"Classes/AssociatedValue.html#/c:@M@SourceryRuntime@objc(cs)AssociatedValue(py)defaultValue":{"name":"defaultValue","abstract":"\u003cp\u003eAssociated value default value\u003c/p\u003e","parent_name":"AssociatedValue"},"Classes/AssociatedValue.html#/c:@M@SourceryRuntime@objc(cs)AssociatedValue(py)annotations":{"name":"annotations","abstract":"\u003cp\u003eAnnotations, that were created with // sourcery: annotation1, other = \u0026ldquo;annotation value\u0026rdquo;, alterantive = 2\u003c/p\u003e","parent_name":"AssociatedValue"},"Classes/AssociatedValue.html#/s:15SourceryRuntime8DiffableP11diffAgainstyAA0C6ResultCypSgF":{"name":"diffAgainst(_:)","parent_name":"AssociatedValue"},"Classes/AssociatedValue.html#/c:@CM@SourceryRuntime@objc(cs)AssociatedValue(py)isOptional":{"name":"isOptional","abstract":"\u003cp\u003eWhether type is optional. Shorthand for \u003ccode\u003etypeName.isOptional\u003c/code\u003e\u003c/p\u003e","parent_name":"AssociatedValue"},"Classes/AssociatedValue.html#/c:@CM@SourceryRuntime@objc(cs)AssociatedValue(py)isImplicitlyUnwrappedOptional":{"name":"isImplicitlyUnwrappedOptional","abstract":"\u003cp\u003eWhether type is implicitly unwrapped optional. Shorthand for \u003ccode\u003etypeName.isImplicitlyUnwrappedOptional\u003c/code\u003e\u003c/p\u003e","parent_name":"AssociatedValue"},"Classes/AssociatedValue.html#/c:@CM@SourceryRuntime@objc(cs)AssociatedValue(py)unwrappedTypeName":{"name":"unwrappedTypeName","abstract":"\u003cp\u003eType name without attributes and optional type information. Shorthand for \u003ccode\u003etypeName.unwrappedTypeName\u003c/code\u003e\u003c/p\u003e","parent_name":"AssociatedValue"},"Classes/AssociatedValue.html#/c:@CM@SourceryRuntime@objc(cs)AssociatedValue(py)actualTypeName":{"name":"actualTypeName","abstract":"\u003cp\u003eActual type name if declaration uses typealias, otherwise just a \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/AssociatedValue.html#/c:@M@SourceryRuntime@objc(cs)AssociatedValue(py)typeName\"\u003etypeName\u003c/a\u003e\u003c/code\u003e. Shorthand for \u003ccode\u003etypeName.actualTypeName\u003c/code\u003e\u003c/p\u003e","parent_name":"AssociatedValue"},"Classes/AssociatedValue.html#/c:@CM@SourceryRuntime@objc(cs)AssociatedValue(py)isTuple":{"name":"isTuple","abstract":"\u003cp\u003eWhether type is a tuple. Shorthand for \u003ccode\u003etypeName.isTuple\u003c/code\u003e\u003c/p\u003e","parent_name":"AssociatedValue"},"Classes/AssociatedValue.html#/c:@CM@SourceryRuntime@objc(cs)AssociatedValue(py)isClosure":{"name":"isClosure","abstract":"\u003cp\u003eWhether type is a closure. Shorthand for \u003ccode\u003etypeName.isClosure\u003c/code\u003e\u003c/p\u003e","parent_name":"AssociatedValue"},"Classes/AssociatedValue.html#/c:@CM@SourceryRuntime@objc(cs)AssociatedValue(py)isArray":{"name":"isArray","abstract":"\u003cp\u003eWhether type is an array. Shorthand for \u003ccode\u003etypeName.isArray\u003c/code\u003e\u003c/p\u003e","parent_name":"AssociatedValue"},"Classes/AssociatedValue.html#/c:@CM@SourceryRuntime@objc(cs)AssociatedValue(py)isSet":{"name":"isSet","abstract":"\u003cp\u003eWhether type is a set. Shorthand for \u003ccode\u003etypeName.isSet\u003c/code\u003e\u003c/p\u003e","parent_name":"AssociatedValue"},"Classes/AssociatedValue.html#/c:@CM@SourceryRuntime@objc(cs)AssociatedValue(py)isDictionary":{"name":"isDictionary","abstract":"\u003cp\u003eWhether type is a dictionary. Shorthand for \u003ccode\u003etypeName.isDictionary\u003c/code\u003e\u003c/p\u003e","parent_name":"AssociatedValue"},"Classes/EnumCase.html#/c:@M@SourceryRuntime@objc(cs)EnumCase(py)name":{"name":"name","abstract":"\u003cp\u003eEnum case name\u003c/p\u003e","parent_name":"EnumCase"},"Classes/EnumCase.html#/c:@M@SourceryRuntime@objc(cs)EnumCase(py)rawValue":{"name":"rawValue","abstract":"\u003cp\u003eEnum case raw value, if any\u003c/p\u003e","parent_name":"EnumCase"},"Classes/EnumCase.html#/c:@M@SourceryRuntime@objc(cs)EnumCase(py)associatedValues":{"name":"associatedValues","abstract":"\u003cp\u003eEnum case associated values\u003c/p\u003e","parent_name":"EnumCase"},"Classes/EnumCase.html#/c:@M@SourceryRuntime@objc(cs)EnumCase(py)annotations":{"name":"annotations","abstract":"\u003cp\u003eEnum case annotations\u003c/p\u003e","parent_name":"EnumCase"},"Classes/EnumCase.html#/c:@M@SourceryRuntime@objc(cs)EnumCase(py)documentation":{"name":"documentation","parent_name":"EnumCase"},"Classes/EnumCase.html#/c:@M@SourceryRuntime@objc(cs)EnumCase(py)indirect":{"name":"indirect","abstract":"\u003cp\u003eWhether enum case is indirect\u003c/p\u003e","parent_name":"EnumCase"},"Classes/EnumCase.html#/c:@M@SourceryRuntime@objc(cs)EnumCase(py)hasAssociatedValue":{"name":"hasAssociatedValue","abstract":"\u003cp\u003eWhether enum case has associated value\u003c/p\u003e","parent_name":"EnumCase"},"Classes/EnumCase.html#/s:15SourceryRuntime8DiffableP11diffAgainstyAA0C6ResultCypSgF":{"name":"diffAgainst(_:)","parent_name":"EnumCase"},"Classes/Enum.html#/c:@M@SourceryRuntime@objc(cs)Enum(py)kind":{"name":"kind","abstract":"\u003cp\u003eReturns \u0026ldquo;enum\u0026rdquo;\u003c/p\u003e","parent_name":"Enum"},"Classes/Enum.html#/c:@M@SourceryRuntime@objc(cs)Enum(py)cases":{"name":"cases","abstract":"\u003cp\u003eEnum cases\u003c/p\u003e","parent_name":"Enum"},"Classes/Enum.html#/c:@M@SourceryRuntime@objc(cs)Enum(py)rawTypeName":{"name":"rawTypeName","abstract":"\u003cp\u003eEnum raw value type name, if any. This type is removed from enum\u0026rsquo;s \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Enum.html#/c:@M@SourceryRuntime@objc(cs)Enum(py)based\"\u003ebased\u003c/a\u003e\u003c/code\u003e and \u003ccode\u003einherited\u003c/code\u003e types collections.\u003c/p\u003e","parent_name":"Enum"},"Classes/Enum.html#/c:@M@SourceryRuntime@objc(cs)Enum(py)rawType":{"name":"rawType","abstract":"\u003cp\u003eEnum raw value type, if known\u003c/p\u003e","parent_name":"Enum"},"Classes/Enum.html#/c:@M@SourceryRuntime@objc(cs)Enum(py)based":{"name":"based","abstract":"\u003cp\u003eNames of types or protocols this type inherits from, including unknown (not scanned) types\u003c/p\u003e","parent_name":"Enum"},"Classes/Enum.html#/c:@M@SourceryRuntime@objc(cs)Enum(py)hasAssociatedValues":{"name":"hasAssociatedValues","abstract":"\u003cp\u003eWhether enum contains any associated values\u003c/p\u003e","parent_name":"Enum"},"Classes/Enum.html#/c:@M@SourceryRuntime@objc(cs)Enum(im)diffAgainst:":{"name":"diffAgainst(_:)","parent_name":"Enum"},"Classes/Struct.html#/c:@M@SourceryRuntime@objc(cs)Struct(py)kind":{"name":"kind","abstract":"\u003cp\u003eReturns \u0026ldquo;struct\u0026rdquo;\u003c/p\u003e","parent_name":"Struct"},"Classes/Struct.html#/c:@M@SourceryRuntime@objc(cs)Struct(im)diffAgainst:":{"name":"diffAgainst(_:)","parent_name":"Struct"},"Classes/Class.html#/c:@M@SourceryRuntime@objc(cs)SwiftClass(py)kind":{"name":"kind","abstract":"\u003cp\u003eReturns \u0026ldquo;class\u0026rdquo;\u003c/p\u003e","parent_name":"Class"},"Classes/Class.html#/c:@M@SourceryRuntime@objc(cs)SwiftClass(py)isFinal":{"name":"isFinal","abstract":"\u003cp\u003eWhether type is final\u003c/p\u003e","parent_name":"Class"},"Classes/Class.html#/c:@M@SourceryRuntime@objc(cs)SwiftClass(im)diffAgainst:":{"name":"diffAgainst(_:)","parent_name":"Class"},"Classes/Protocol.html#/c:@M@SourceryRuntime@objc(cs)Protocol(py)kind":{"name":"kind","abstract":"\u003cp\u003eReturns \u0026ldquo;protocol\u0026rdquo;\u003c/p\u003e","parent_name":"Protocol"},"Classes/Protocol.html#/c:@M@SourceryRuntime@objc(cs)Protocol(py)associatedTypes":{"name":"associatedTypes","abstract":"\u003cp\u003elist of all declared associated types with their names as keys\u003c/p\u003e","parent_name":"Protocol"},"Classes/Protocol.html#/c:@M@SourceryRuntime@objc(cs)Protocol(py)genericRequirements":{"name":"genericRequirements","abstract":"\u003cp\u003elist of generic requirements\u003c/p\u003e","parent_name":"Protocol"},"Classes/Protocol.html#/c:@M@SourceryRuntime@objc(cs)Protocol(im)diffAgainst:":{"name":"diffAgainst(_:)","parent_name":"Protocol"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)imports":{"name":"imports","abstract":"\u003cp\u003eImports that existed in the file that contained this type declaration\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)allImports":{"name":"allImports","abstract":"\u003cp\u003eImports existed in all files containing this type and all its super classes/protocols\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)isExtension":{"name":"isExtension","abstract":"\u003cp\u003eWhether declaration is an extension of some type\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)kind":{"name":"kind","abstract":"\u003cp\u003eKind of type declaration, i.e. \u003ccode\u003eenum\u003c/code\u003e, \u003ccode\u003estruct\u003c/code\u003e, \u003ccode\u003eclass\u003c/code\u003e, \u003ccode\u003eprotocol\u003c/code\u003e or \u003ccode\u003eextension\u003c/code\u003e\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)accessLevel":{"name":"accessLevel","abstract":"\u003cp\u003eType access level, i.e. \u003ccode\u003einternal\u003c/code\u003e, \u003ccode\u003eprivate\u003c/code\u003e, \u003ccode\u003efileprivate\u003c/code\u003e, \u003ccode\u003epublic\u003c/code\u003e, \u003ccode\u003eopen\u003c/code\u003e\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)name":{"name":"name","abstract":"\u003cp\u003eType name in global scope. For inner types includes the name of its containing type, i.e. \u003ccode\u003eType.Inner\u003c/code\u003e\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)isUnknownExtension":{"name":"isUnknownExtension","abstract":"\u003cp\u003eWhether the type has been resolved as unknown extension\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)globalName":{"name":"globalName","abstract":"\u003cp\u003eGlobal type name including module name, unless it\u0026rsquo;s an extension of unknown type\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)isGeneric":{"name":"isGeneric","abstract":"\u003cp\u003eWhether type is generic\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)localName":{"name":"localName","abstract":"\u003cp\u003eType name in its own scope.\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)variables":{"name":"variables","abstract":"\u003cp\u003eVariables defined in this type only, inluding variables defined in its extensions,","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)rawVariables":{"name":"rawVariables","abstract":"\u003cp\u003eUnfiltered (can contain duplications from extensions) variables defined in this type only, inluding variables defined in its extensions,","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)allVariables":{"name":"allVariables","abstract":"\u003cp\u003eAll variables defined for this type, including variables defined in extensions,","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)methods":{"name":"methods","abstract":"\u003cp\u003eMethods defined in this type only, inluding methods defined in its extensions,","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)rawMethods":{"name":"rawMethods","abstract":"\u003cp\u003eUnfiltered (can contain duplications from extensions) methods defined in this type only, inluding methods defined in its extensions,","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)allMethods":{"name":"allMethods","abstract":"\u003cp\u003eAll methods defined for this type, including methods defined in extensions,","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)subscripts":{"name":"subscripts","abstract":"\u003cp\u003eSubscripts defined in this type only, inluding subscripts defined in its extensions,","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)rawSubscripts":{"name":"rawSubscripts","abstract":"\u003cp\u003eUnfiltered (can contain duplications from extensions) Subscripts defined in this type only, inluding subscripts defined in its extensions,","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)allSubscripts":{"name":"allSubscripts","abstract":"\u003cp\u003eAll subscripts defined for this type, including subscripts defined in extensions,","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)bodyBytesRange":{"name":"bodyBytesRange","abstract":"\u003cp\u003eBytes position of the body of this type in its declaration file if available.\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)completeDeclarationRange":{"name":"completeDeclarationRange","abstract":"\u003cp\u003eBytes position of the whole declaration of this type in its declaration file if available.\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)initializers":{"name":"initializers","abstract":"\u003cp\u003eAll initializers defined in this type\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)annotations":{"name":"annotations","abstract":"\u003cp\u003eAll annotations for this type\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)documentation":{"name":"documentation","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)staticVariables":{"name":"staticVariables","abstract":"\u003cp\u003eStatic variables defined in this type\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)staticMethods":{"name":"staticMethods","abstract":"\u003cp\u003eStatic methods defined in this type\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)classMethods":{"name":"classMethods","abstract":"\u003cp\u003eClass methods defined in this type\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)instanceVariables":{"name":"instanceVariables","abstract":"\u003cp\u003eInstance variables defined in this type\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)instanceMethods":{"name":"instanceMethods","abstract":"\u003cp\u003eInstance methods defined in this type\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)computedVariables":{"name":"computedVariables","abstract":"\u003cp\u003eComputed instance variables defined in this type\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)storedVariables":{"name":"storedVariables","abstract":"\u003cp\u003eStored instance variables defined in this type\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)inheritedTypes":{"name":"inheritedTypes","abstract":"\u003cp\u003eNames of types this type inherits from (for classes only) and protocols it implements, in order of definition\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)based":{"name":"based","abstract":"\u003cp\u003eNames of types or protocols this type inherits from, including unknown (not scanned) types\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)basedTypes":{"name":"basedTypes","abstract":"\u003cp\u003eTypes this type inherits from or implements, including unknown (not scanned) types with extensions defined\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)inherits":{"name":"inherits","abstract":"\u003cp\u003eTypes this type inherits from\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)implements":{"name":"implements","abstract":"\u003cp\u003eProtocols this type implements\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)containedTypes":{"name":"containedTypes","abstract":"\u003cp\u003eContained types\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)containedType":{"name":"containedType","abstract":"\u003cp\u003eContained types groupd by their names\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)parentName":{"name":"parentName","abstract":"\u003cp\u003eName of parent type (for contained types only)\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)parent":{"name":"parent","abstract":"\u003cp\u003eParent type, if known (for contained types only)\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)supertype":{"name":"supertype","abstract":"\u003cp\u003eSuperclass type, if known (only for classes)\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)attributes":{"name":"attributes","abstract":"\u003cp\u003eType attributes, i.e. \u003ccode\u003e@objc\u003c/code\u003e\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)modifiers":{"name":"modifiers","abstract":"\u003cp\u003eType modifiers, i.e. \u003ccode\u003eprivate\u003c/code\u003e, \u003ccode\u003efinal\u003c/code\u003e\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)path":{"name":"path","abstract":"\u003cp\u003ePath to file where the type is defined\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)directory":{"name":"directory","abstract":"\u003cp\u003eDirectory to file where the type is defined\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)genericRequirements":{"name":"genericRequirements","abstract":"\u003cp\u003elist of generic requirements\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)fileName":{"name":"fileName","abstract":"\u003cp\u003eFile name where the type was defined\u003c/p\u003e","parent_name":"Type"},"Classes/Type.html#/s:15SourceryRuntime8DiffableP11diffAgainstyAA0C6ResultCypSgF":{"name":"diffAgainst(_:)","parent_name":"Type"},"Classes/Types.html#/c:@M@SourceryRuntime@objc(cs)Types(py)typealiases":{"name":"typealiases","abstract":"\u003cp\u003eAll known typealiases\u003c/p\u003e","parent_name":"Types"},"Classes/Types.html#/s:15SourceryRuntime8DiffableP11diffAgainstyAA0C6ResultCypSgF":{"name":"diffAgainst(_:)","parent_name":"Types"},"Classes/Types.html#/c:@M@SourceryRuntime@objc(cs)Types(py)all":{"name":"all","abstract":"\u003cp\u003eAll known types, excluding protocols or protocol compositions.\u003c/p\u003e","parent_name":"Types"},"Classes/Types.html#/c:@M@SourceryRuntime@objc(cs)Types(py)protocols":{"name":"protocols","abstract":"\u003cp\u003eAll known protocols\u003c/p\u003e","parent_name":"Types"},"Classes/Types.html#/c:@M@SourceryRuntime@objc(cs)Types(py)protocolCompositions":{"name":"protocolCompositions","abstract":"\u003cp\u003eAll known protocol compositions\u003c/p\u003e","parent_name":"Types"},"Classes/Types.html#/c:@M@SourceryRuntime@objc(cs)Types(py)classes":{"name":"classes","abstract":"\u003cp\u003eAll known classes\u003c/p\u003e","parent_name":"Types"},"Classes/Types.html#/c:@M@SourceryRuntime@objc(cs)Types(py)structs":{"name":"structs","abstract":"\u003cp\u003eAll known structs\u003c/p\u003e","parent_name":"Types"},"Classes/Types.html#/c:@M@SourceryRuntime@objc(cs)Types(py)enums":{"name":"enums","abstract":"\u003cp\u003eAll known enums\u003c/p\u003e","parent_name":"Types"},"Classes/Types.html#/c:@M@SourceryRuntime@objc(cs)Types(py)extensions":{"name":"extensions","abstract":"\u003cp\u003eAll known extensions\u003c/p\u003e","parent_name":"Types"},"Classes/Types.html#/c:@M@SourceryRuntime@objc(cs)Types(py)based":{"name":"based","abstract":"\u003cp\u003eTypes based on any other type, grouped by its name, even if they are not known.","parent_name":"Types"},"Classes/Types.html#/c:@M@SourceryRuntime@objc(cs)Types(py)inheriting":{"name":"inheriting","abstract":"\u003cp\u003eClasses inheriting from any known class, grouped by its name.","parent_name":"Types"},"Classes/Types.html#/c:@M@SourceryRuntime@objc(cs)Types(py)implementing":{"name":"implementing","abstract":"\u003cp\u003eTypes implementing known protocol, grouped by its name.","parent_name":"Types"},"Classes/Types.html":{"name":"Types","abstract":"\u003cp\u003eCollection of scanned types for accessing in templates\u003c/p\u003e"},"Classes/Type.html":{"name":"Type","abstract":"\u003cp\u003eDefines Swift type\u003c/p\u003e"},"Classes/Protocol.html":{"name":"Protocol","abstract":"\u003cp\u003eDescribes Swift protocol\u003c/p\u003e"},"Classes/Class.html":{"name":"Class","abstract":"\u003cp\u003eDescibes Swift class\u003c/p\u003e"},"Classes/Struct.html":{"name":"Struct","abstract":"\u003cp\u003eDescribes Swift struct\u003c/p\u003e"},"Classes/Enum.html":{"name":"Enum","abstract":"\u003cp\u003eDefines Swift enum\u003c/p\u003e"},"Classes/EnumCase.html":{"name":"EnumCase","abstract":"\u003cp\u003eDefines enum case\u003c/p\u003e"},"Classes/AssociatedValue.html":{"name":"AssociatedValue","abstract":"\u003cp\u003eDefines enum case associated value\u003c/p\u003e"},"Classes/AssociatedType.html":{"name":"AssociatedType","abstract":"\u003cp\u003eDescribes Swift AssociatedType\u003c/p\u003e"},"Classes/Variable.html":{"name":"Variable","abstract":"\u003cp\u003eDefines variable\u003c/p\u003e"},"Classes/Method.html":{"name":"Method","abstract":"\u003cp\u003eDescribes method\u003c/p\u003e"},"Classes/MethodParameter.html":{"name":"MethodParameter","abstract":"\u003cp\u003eDescribes method parameter\u003c/p\u003e"},"Classes/Subscript.html":{"name":"Subscript","abstract":"\u003cp\u003eDescribes subscript\u003c/p\u003e"},"Classes/TypeName.html":{"name":"TypeName","abstract":"\u003cp\u003eDescribes name of the type used in typed declaration (variable, method parameter or return value etc.)\u003c/p\u003e"},"Classes/TupleType.html":{"name":"TupleType","abstract":"\u003cp\u003eDescribes tuple type\u003c/p\u003e"},"Classes/TupleElement.html":{"name":"TupleElement","abstract":"\u003cp\u003eDescribes tuple type element\u003c/p\u003e"},"Classes/ArrayType.html":{"name":"ArrayType","abstract":"\u003cp\u003eDescribes array type\u003c/p\u003e"},"Classes/DictionaryType.html":{"name":"DictionaryType","abstract":"\u003cp\u003eDescribes dictionary type\u003c/p\u003e"},"Classes/ClosureType.html":{"name":"ClosureType","abstract":"\u003cp\u003eDescribes closure type\u003c/p\u003e"},"Classes/GenericType.html":{"name":"GenericType","abstract":"\u003cp\u003eDescibes Swift generic type\u003c/p\u003e"},"Classes/GenericTypeParameter.html":{"name":"GenericTypeParameter","abstract":"\u003cp\u003eDescibes Swift generic type parameter\u003c/p\u003e"},"Classes/Attribute.html":{"name":"Attribute","abstract":"\u003cp\u003eDescribes Swift attribute\u003c/p\u003e"},"Classes/ProtocolComposition.html":{"name":"ProtocolComposition","abstract":"\u003cp\u003eDescribes a Swift \u003ca href=\"https://docs.swift.org/swift-book/ReferenceManual/Types.html#ID454\"\u003eprotocol composition\u003c/a\u003e.\u003c/p\u003e"},"Protocols/Diffable.html#/s:15SourceryRuntime8DiffableP11diffAgainstyAA0C6ResultCypSgF":{"name":"diffAgainst(_:)","abstract":"\u003cp\u003eReturns \u003ccode\u003e\u003ca href=\"36f8f5912051ae747ef441d6511ca4cbClasses/DiffableResult.html\"\u003eDiffableResult\u003c/a\u003e\u003c/code\u003e for the given objects.\u003c/p\u003e","parent_name":"Diffable"},"equatable.html":{"name":"Equatable"},"hashable.html":{"name":"Hashable"},"enum-cases.html":{"name":"Enum cases"},"lenses.html":{"name":"Lenses"},"mocks.html":{"name":"Mocks"},"codable.html":{"name":"Codable"},"Protocols/Diffable.html":{"name":"Diffable"},"diffable.html":{"name":"Diffable"},"linuxmain.html":{"name":"LinuxMain"},"decorator.html":{"name":"Decorator"},"installing.html":{"name":"Installing"},"usage.html":{"name":"Usage"},"writing-templates.html":{"name":"Writing templates"},"Guides.html":{"name":"Guides"},"Examples.html":{"name":"Examples"},"Types.html":{"name":"Types"},"Other%20Classes.html":{"name":"Other Classes","abstract":"\u003cp\u003eThe following classes are available globally.\u003c/p\u003e"},"Other%20Enums.html":{"name":"Other Enumerations","abstract":"\u003cp\u003eThe following enumerations are available globally.\u003c/p\u003e"},"Other%20Extensions.html":{"name":"Other Extensions","abstract":"\u003cp\u003eThe following extensions are available globally.\u003c/p\u003e"},"Other%20Protocols.html":{"name":"Other Protocols","abstract":"\u003cp\u003eThe following protocols are available globally.\u003c/p\u003e"},"Other%20Typealiases.html":{"name":"Other Type Aliases","abstract":"\u003cp\u003eThe following type aliases are available globally.\u003c/p\u003e"}}