{"Protocols/Typed.html#/s:15SourceryRuntime5TypedP4typeAA4TypeCSgvp":{"name":"type","abstract":"<p>Type, if known</p>","parent_name":"Typed"},"Protocols/Typed.html#/s:15SourceryRuntime5TypedP8typeNameAA04TypeE0Cvp":{"name":"typeName","abstract":"<p>Type name</p>","parent_name":"Typed"},"Protocols/Typed.html#/s:15SourceryRuntime5TypedP10isOptionalSbvp":{"name":"isOptional","abstract":"<p>Whether type is optional</p>","parent_name":"Typed"},"Protocols/Typed.html#/s:15SourceryRuntime5TypedP29isImplicitlyUnwrappedOptionalSbvp":{"name":"isImplicitlyUnwrappedOptional","abstract":"<p>Whether type is implicitly unwrapped optional</p>","parent_name":"Typed"},"Protocols/Typed.html#/s:15SourceryRuntime5TypedP17unwrappedTypeNameSSvp":{"name":"unwrappedTypeName","abstract":"<p>Type name without attributes and optional type information</p>","parent_name":"Typed"},"Protocols/Definition.html#/s:15SourceryRuntime10DefinitionP17definedInTypeNameAA0fG0CSgvp":{"name":"definedInTypeName","abstract":"<p>Reference to type name where the object is defined,","parent_name":"Definition"},"Protocols/Definition.html#/s:15SourceryRuntime10DefinitionP13definedInTypeAA0F0CSgvp":{"name":"definedInType","abstract":"<p>Reference to actual type where the object is defined,","parent_name":"Definition"},"Protocols/Definition.html#/s:15SourceryRuntime10DefinitionP23actualDefinedInTypeNameAA0gH0CSgvp":{"name":"actualDefinedInTypeName","abstract":"<p>Reference to actual type name where the method is defined if declaration uses typealias, otherwise just a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/Definition.html#/s:15SourceryRuntime10DefinitionP17definedInTypeNameAA0fG0CSgvp\">definedInTypeName</a></code></p>","parent_name":"Definition"},"Protocols/Annotated.html#/s:15SourceryRuntime9AnnotatedP11annotationsSDySSSo8NSObjectCGvp":{"name":"annotations","abstract":"<p>All annotations of declaration stored by their name. Value can be <code>bool</code>, <code>String</code>, float <code>NSNumber</code>","parent_name":"Annotated"},"Protocols/Annotated.html":{"name":"Annotated","abstract":"<p>Describes annotated declaration, i.e. type, method, variable, enum case</p>"},"Protocols/Definition.html":{"name":"Definition","abstract":"<p>Describes that the object is defined in a context of some <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Type.html\">Type</a></code></p>"},"Protocols/Typed.html":{"name":"Typed","abstract":"<p>Descibes typed declaration, i.e. variable, method parameter, tuple element, enum case associated value</p>"},"Classes/Attribute.html#/c:@M@SourceryRuntime@objc(cs)Attribute(py)name":{"name":"name","abstract":"<p>Attribute name</p>","parent_name":"Attribute"},"Classes/Attribute.html#/c:@M@SourceryRuntime@objc(cs)Attribute(py)arguments":{"name":"arguments","abstract":"<p>Attribute arguments</p>","parent_name":"Attribute"},"Classes/Attribute.html#/c:@M@SourceryRuntime@objc(cs)Attribute(py)description":{"name":"description","abstract":"<p>Attribute description that can be used in a template.</p>","parent_name":"Attribute"},"Classes/GenericTypeParameter.html#/c:@M@SourceryRuntime@objc(cs)GenericTypeParameter(py)typeName":{"name":"typeName","abstract":"<p>Generic parameter type name</p>","parent_name":"GenericTypeParameter"},"Classes/GenericTypeParameter.html#/c:@M@SourceryRuntime@objc(cs)GenericTypeParameter(py)type":{"name":"type","abstract":"<p>Generic parameter type, if known</p>","parent_name":"GenericTypeParameter"},"Classes/GenericType.html#/c:@M@SourceryRuntime@objc(cs)GenericType(py)name":{"name":"name","abstract":"<p>The name of the base type, i.e. <code>Array</code> for <code>Array&lt;Int&gt;</code></p>","parent_name":"GenericType"},"Classes/GenericType.html#/c:@M@SourceryRuntime@objc(cs)GenericType(py)typeParameters":{"name":"typeParameters","abstract":"<p>This generic type parameters</p>","parent_name":"GenericType"},"Classes/ClosureType.html#/c:@M@SourceryRuntime@objc(cs)ClosureType(py)name":{"name":"name","abstract":"<p>Type name used in declaration with stripped whitespaces and new lines</p>","parent_name":"ClosureType"},"Classes/ClosureType.html#/c:@M@SourceryRuntime@objc(cs)ClosureType(py)parameters":{"name":"parameters","abstract":"<p>List of closure parameters</p>","parent_name":"ClosureType"},"Classes/ClosureType.html#/c:@M@SourceryRuntime@objc(cs)ClosureType(py)returnTypeName":{"name":"returnTypeName","abstract":"<p>Return value type name</p>","parent_name":"ClosureType"},"Classes/ClosureType.html#/c:@M@SourceryRuntime@objc(cs)ClosureType(py)actualReturnTypeName":{"name":"actualReturnTypeName","abstract":"<p>Actual return value type name if declaration uses typealias, otherwise just a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/ClosureType.html#/c:@M@SourceryRuntime@objc(cs)ClosureType(py)returnTypeName\">returnTypeName</a></code></p>","parent_name":"ClosureType"},"Classes/ClosureType.html#/c:@M@SourceryRuntime@objc(cs)ClosureType(py)returnType":{"name":"returnType","abstract":"<p>Actual return value type, if known</p>","parent_name":"ClosureType"},"Classes/ClosureType.html#/c:@M@SourceryRuntime@objc(cs)ClosureType(py)isOptionalReturnType":{"name":"isOptionalReturnType","abstract":"<p>Whether return value type is optional</p>","parent_name":"ClosureType"},"Classes/ClosureType.html#/c:@M@SourceryRuntime@objc(cs)ClosureType(py)isImplicitlyUnwrappedOptionalReturnType":{"name":"isImplicitlyUnwrappedOptionalReturnType","abstract":"<p>Whether return value type is implicitly unwrapped optional</p>","parent_name":"ClosureType"},"Classes/ClosureType.html#/c:@M@SourceryRuntime@objc(cs)ClosureType(py)unwrappedReturnTypeName":{"name":"unwrappedReturnTypeName","abstract":"<p>Return value type name without attributes and optional type information</p>","parent_name":"ClosureType"},"Classes/ClosureType.html#/c:@M@SourceryRuntime@objc(cs)ClosureType(py)throws":{"name":"throws","abstract":"<p>Whether closure throws</p>","parent_name":"ClosureType"},"Classes/DictionaryType.html#/c:@M@SourceryRuntime@objc(cs)DictionaryType(py)name":{"name":"name","abstract":"<p>Type name used in declaration</p>","parent_name":"DictionaryType"},"Classes/DictionaryType.html#/c:@M@SourceryRuntime@objc(cs)DictionaryType(py)valueTypeName":{"name":"valueTypeName","abstract":"<p>Dictionary value type name</p>","parent_name":"DictionaryType"},"Classes/DictionaryType.html#/c:@M@SourceryRuntime@objc(cs)DictionaryType(py)valueType":{"name":"valueType","abstract":"<p>Dictionary value type, if known</p>","parent_name":"DictionaryType"},"Classes/DictionaryType.html#/c:@M@SourceryRuntime@objc(cs)DictionaryType(py)keyTypeName":{"name":"keyTypeName","abstract":"<p>Dictionary key type name</p>","parent_name":"DictionaryType"},"Classes/DictionaryType.html#/c:@M@SourceryRuntime@objc(cs)DictionaryType(py)keyType":{"name":"keyType","abstract":"<p>Dictionary key type, if known</p>","parent_name":"DictionaryType"},"Classes/ArrayType.html#/c:@M@SourceryRuntime@objc(cs)ArrayType(py)name":{"name":"name","abstract":"<p>Type name used in declaration</p>","parent_name":"ArrayType"},"Classes/ArrayType.html#/c:@M@SourceryRuntime@objc(cs)ArrayType(py)elementTypeName":{"name":"elementTypeName","abstract":"<p>Array element type name</p>","parent_name":"ArrayType"},"Classes/ArrayType.html#/c:@M@SourceryRuntime@objc(cs)ArrayType(py)elementType":{"name":"elementType","abstract":"<p>Array element type, if known</p>","parent_name":"ArrayType"},"Classes/TupleElement.html#/c:@M@SourceryRuntime@objc(cs)TupleElement(py)name":{"name":"name","abstract":"<p>Tuple element name</p>","parent_name":"TupleElement"},"Classes/TupleElement.html#/c:@M@SourceryRuntime@objc(cs)TupleElement(py)typeName":{"name":"typeName","abstract":"<p>Tuple element type name</p>","parent_name":"TupleElement"},"Classes/TupleElement.html#/c:@M@SourceryRuntime@objc(cs)TupleElement(py)type":{"name":"type","abstract":"<p>Tuple element type, if known</p>","parent_name":"TupleElement"},"Classes/TupleType.html#/c:@M@SourceryRuntime@objc(cs)TupleType(py)name":{"name":"name","abstract":"<p>Type name used in declaration</p>","parent_name":"TupleType"},"Classes/TupleType.html#/c:@M@SourceryRuntime@objc(cs)TupleType(py)elements":{"name":"elements","abstract":"<p>Tuple elements</p>","parent_name":"TupleType"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)name":{"name":"name","abstract":"<p>Type name used in declaration</p>","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)generic":{"name":"generic","abstract":"<p>The generics of this TypeName</p>","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)isGeneric":{"name":"isGeneric","abstract":"<p>Whether this TypeName is generic</p>","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)actualTypeName":{"name":"actualTypeName","abstract":"<p>Actual type name if given type name is a typealias</p>","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)attributes":{"name":"attributes","abstract":"<p>Type name attributes, i.e. <code>@escaping</code></p>","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)isOptional":{"name":"isOptional","abstract":"<p>Whether type is optional</p>","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)isImplicitlyUnwrappedOptional":{"name":"isImplicitlyUnwrappedOptional","abstract":"<p>Whether type is implicitly unwrapped optional</p>","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)unwrappedTypeName":{"name":"unwrappedTypeName","abstract":"<p>Type name without attributes and optional type information</p>","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)isVoid":{"name":"isVoid","abstract":"<p>Whether type is void (<code>Void</code> or <code>()</code>)</p>","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)isTuple":{"name":"isTuple","abstract":"<p>Whether type is a tuple</p>","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)tuple":{"name":"tuple","abstract":"<p>Tuple type data</p>","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)isArray":{"name":"isArray","abstract":"<p>Whether type is an array</p>","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)array":{"name":"array","abstract":"<p>Array type data</p>","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)isDictionary":{"name":"isDictionary","abstract":"<p>Whether type is a dictionary</p>","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)dictionary":{"name":"dictionary","abstract":"<p>Dictionary type data</p>","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)isClosure":{"name":"isClosure","abstract":"<p>Whether type is a closure</p>","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)closure":{"name":"closure","abstract":"<p>Closure type data</p>","parent_name":"TypeName"},"Classes/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)description":{"name":"description","abstract":"<p>Returns value of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/TypeName.html#/c:@M@SourceryRuntime@objc(cs)TypeName(py)name\">name</a></code> property.</p>","parent_name":"TypeName"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)parameters":{"name":"parameters","abstract":"<p>Method parameters</p>","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)returnTypeName":{"name":"returnTypeName","abstract":"<p>Return value type name used in declaration, including generic constraints, i.e. <code>where T: Equatable</code></p>","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)actualReturnTypeName":{"name":"actualReturnTypeName","abstract":"<p>Actual return value type name if declaration uses typealias, otherwise just a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)returnTypeName\">returnTypeName</a></code></p>","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)returnType":{"name":"returnType","abstract":"<p>Actual return value type, if known</p>","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)isOptionalReturnType":{"name":"isOptionalReturnType","abstract":"<p>Whether return value type is optional</p>","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)isImplicitlyUnwrappedOptionalReturnType":{"name":"isImplicitlyUnwrappedOptionalReturnType","abstract":"<p>Whether return value type is implicitly unwrapped optional</p>","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)unwrappedReturnTypeName":{"name":"unwrappedReturnTypeName","abstract":"<p>Return value type name without attributes and optional type information</p>","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)isFinal":{"name":"isFinal","abstract":"<p>Whether method is final</p>","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)readAccess":{"name":"readAccess","abstract":"<p>Variable read access level, i.e. <code>internal</code>, <code>private</code>, <code>fileprivate</code>, <code>public</code>, <code>open</code></p>","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)writeAccess":{"name":"writeAccess","abstract":"<p>Variable write access, i.e. <code>internal</code>, <code>private</code>, <code>fileprivate</code>, <code>public</code>, <code>open</code>.","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)isMutable":{"name":"isMutable","abstract":"<p>Whether variable is mutable or not</p>","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)annotations":{"name":"annotations","abstract":"<p>Annotations, that were created with // sourcery: annotation1, other = <q>annotation value</q>, alterantive = 2</p>","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)definedInTypeName":{"name":"definedInTypeName","abstract":"<p>Reference to type name where the method is defined,","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)actualDefinedInTypeName":{"name":"actualDefinedInTypeName","abstract":"<p>Reference to actual type name where the method is defined if declaration uses typealias, otherwise just a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)definedInTypeName\">definedInTypeName</a></code></p>","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)definedInType":{"name":"definedInType","abstract":"<p>Reference to actual type where the object is defined,","parent_name":"Subscript"},"Classes/Subscript.html#/c:@M@SourceryRuntime@objc(cs)Subscript(py)attributes":{"name":"attributes","abstract":"<p>Method attributes, i.e. <code>@discardableResult</code></p>","parent_name":"Subscript"},"Classes/MethodParameter.html#/c:@M@SourceryRuntime@objc(cs)MethodParameter(py)argumentLabel":{"name":"argumentLabel","abstract":"<p>Parameter external name</p>","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/c:@M@SourceryRuntime@objc(cs)MethodParameter(py)name":{"name":"name","abstract":"<p>Parameter internal name</p>","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/c:@M@SourceryRuntime@objc(cs)MethodParameter(py)typeName":{"name":"typeName","abstract":"<p>Parameter type name</p>","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/c:@M@SourceryRuntime@objc(cs)MethodParameter(py)inout":{"name":"inout","abstract":"<p>Parameter flag whether it&rsquo;s inout or not</p>","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/c:@M@SourceryRuntime@objc(cs)MethodParameter(py)type":{"name":"type","abstract":"<p>Parameter type, if known</p>","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/c:@M@SourceryRuntime@objc(cs)MethodParameter(py)typeAttributes":{"name":"typeAttributes","abstract":"<p>Parameter type attributes, i.e. <code>@escaping</code></p>","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/c:@M@SourceryRuntime@objc(cs)MethodParameter(py)defaultValue":{"name":"defaultValue","abstract":"<p>Method parameter default value expression</p>","parent_name":"MethodParameter"},"Classes/MethodParameter.html#/c:@M@SourceryRuntime@objc(cs)MethodParameter(py)annotations":{"name":"annotations","abstract":"<p>Annotations, that were created with // sourcery: annotation1, other = <q>annotation value</q>, alterantive = 2</p>","parent_name":"MethodParameter"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)name":{"name":"name","abstract":"<p>Full method name, including generic constraints, i.e. <code>foo&lt;T&gt;(bar: T)</code></p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)selectorName":{"name":"selectorName","abstract":"<p>Method name including arguments names, i.e. <code>foo(bar:)</code></p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)shortName":{"name":"shortName","abstract":"<p>Method name without arguments names and parenthesis, i.e. <code>foo&lt;T&gt;</code></p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)callName":{"name":"callName","abstract":"<p>Method name without arguments names, parenthesis and generic types, i.e. <code>foo</code> (can be used to generate code for method call)</p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)parameters":{"name":"parameters","abstract":"<p>Method parameters</p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)returnTypeName":{"name":"returnTypeName","abstract":"<p>Return value type name used in declaration, including generic constraints, i.e. <code>where T: Equatable</code></p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)actualReturnTypeName":{"name":"actualReturnTypeName","abstract":"<p>Actual return value type name if declaration uses typealias, otherwise just a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)returnTypeName\">returnTypeName</a></code></p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)returnType":{"name":"returnType","abstract":"<p>Actual return value type, if known</p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isOptionalReturnType":{"name":"isOptionalReturnType","abstract":"<p>Whether return value type is optional</p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isImplicitlyUnwrappedOptionalReturnType":{"name":"isImplicitlyUnwrappedOptionalReturnType","abstract":"<p>Whether return value type is implicitly unwrapped optional</p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)unwrappedReturnTypeName":{"name":"unwrappedReturnTypeName","abstract":"<p>Return value type name without attributes and optional type information</p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)throws":{"name":"throws","abstract":"<p>Whether method throws</p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)rethrows":{"name":"rethrows","abstract":"<p>Whether method rethrows</p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)accessLevel":{"name":"accessLevel","abstract":"<p>Method access level, i.e. <code>internal</code>, <code>private</code>, <code>fileprivate</code>, <code>public</code>, <code>open</code></p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isStatic":{"name":"isStatic","abstract":"<p>Whether method is a static method</p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isClass":{"name":"isClass","abstract":"<p>Whether method is a class method</p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isInitializer":{"name":"isInitializer","abstract":"<p>Whether method is an initializer</p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isDeinitializer":{"name":"isDeinitializer","abstract":"<p>Whether method is an deinitializer</p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isFailableInitializer":{"name":"isFailableInitializer","abstract":"<p>Whether method is a failable initializer</p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isConvenienceInitializer":{"name":"isConvenienceInitializer","abstract":"<p>Whether method is a convenience initializer</p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isRequired":{"name":"isRequired","abstract":"<p>Whether method is required</p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isFinal":{"name":"isFinal","abstract":"<p>Whether method is final</p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isMutating":{"name":"isMutating","abstract":"<p>Whether method is mutating</p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isGeneric":{"name":"isGeneric","abstract":"<p>Whether method is generic</p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)isOptional":{"name":"isOptional","abstract":"<p>Whether method is optional (in an Objective-C protocol)</p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)annotations":{"name":"annotations","abstract":"<p>Annotations, that were created with // sourcery: annotation1, other = <q>annotation value</q>, alterantive = 2</p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)definedInTypeName":{"name":"definedInTypeName","abstract":"<p>Reference to type name where the method is defined,","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)actualDefinedInTypeName":{"name":"actualDefinedInTypeName","abstract":"<p>Reference to actual type name where the method is defined if declaration uses typealias, otherwise just a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)definedInTypeName\">definedInTypeName</a></code></p>","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)definedInType":{"name":"definedInType","abstract":"<p>Reference to actual type where the object is defined,","parent_name":"Method"},"Classes/Method.html#/c:@M@SourceryRuntime@objc(cs)SwiftMethod(py)attributes":{"name":"attributes","abstract":"<p>Method attributes, i.e. <code>@discardableResult</code></p>","parent_name":"Method"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)name":{"name":"name","abstract":"<p>Variable name</p>","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)typeName":{"name":"typeName","abstract":"<p>Variable type name</p>","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)type":{"name":"type","abstract":"<p>Variable type, if known, i.e. if the type is declared in the scanned sources.","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)isComputed":{"name":"isComputed","abstract":"<p>Whether variable is computed and not stored</p>","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)isStatic":{"name":"isStatic","abstract":"<p>Whether variable is static</p>","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)readAccess":{"name":"readAccess","abstract":"<p>Variable read access level, i.e. <code>internal</code>, <code>private</code>, <code>fileprivate</code>, <code>public</code>, <code>open</code></p>","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)writeAccess":{"name":"writeAccess","abstract":"<p>Variable write access, i.e. <code>internal</code>, <code>private</code>, <code>fileprivate</code>, <code>public</code>, <code>open</code>.","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)isMutable":{"name":"isMutable","abstract":"<p>Whether variable is mutable or not</p>","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)defaultValue":{"name":"defaultValue","abstract":"<p>Variable default value expression</p>","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)annotations":{"name":"annotations","abstract":"<p>Annotations, that were created with // sourcery: annotation1, other = <q>annotation value</q>, alterantive = 2</p>","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)attributes":{"name":"attributes","abstract":"<p>Variable attributes, i.e. <code>@IBOutlet</code>, <code>@IBInspectable</code></p>","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)isFinal":{"name":"isFinal","abstract":"<p>Whether variable is final or not</p>","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)isLazy":{"name":"isLazy","abstract":"<p>Whether variable is lazy or not</p>","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)definedInTypeName":{"name":"definedInTypeName","abstract":"<p>Reference to type name where the variable is defined,","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)actualDefinedInTypeName":{"name":"actualDefinedInTypeName","abstract":"<p>Reference to actual type name where the method is defined if declaration uses typealias, otherwise just a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)definedInTypeName\">definedInTypeName</a></code></p>","parent_name":"Variable"},"Classes/Variable.html#/c:@M@SourceryRuntime@objc(cs)Variable(py)definedInType":{"name":"definedInType","abstract":"<p>Reference to actual type where the object is defined,","parent_name":"Variable"},"Classes/AssociatedValue.html#/c:@M@SourceryRuntime@objc(cs)AssociatedValue(py)localName":{"name":"localName","abstract":"<p>Associated value local name.","parent_name":"AssociatedValue"},"Classes/AssociatedValue.html#/c:@M@SourceryRuntime@objc(cs)AssociatedValue(py)externalName":{"name":"externalName","abstract":"<p>Associated value external name.","parent_name":"AssociatedValue"},"Classes/AssociatedValue.html#/c:@M@SourceryRuntime@objc(cs)AssociatedValue(py)typeName":{"name":"typeName","abstract":"<p>Associated value type name</p>","parent_name":"AssociatedValue"},"Classes/AssociatedValue.html#/c:@M@SourceryRuntime@objc(cs)AssociatedValue(py)type":{"name":"type","abstract":"<p>Associated value type, if known</p>","parent_name":"AssociatedValue"},"Classes/AssociatedValue.html#/c:@M@SourceryRuntime@objc(cs)AssociatedValue(py)annotations":{"name":"annotations","abstract":"<p>Annotations, that were created with // sourcery: annotation1, other = <q>annotation value</q>, alterantive = 2</p>","parent_name":"AssociatedValue"},"Classes/EnumCase.html#/c:@M@SourceryRuntime@objc(cs)EnumCase(py)name":{"name":"name","abstract":"<p>Enum case name</p>","parent_name":"EnumCase"},"Classes/EnumCase.html#/c:@M@SourceryRuntime@objc(cs)EnumCase(py)rawValue":{"name":"rawValue","abstract":"<p>Enum case raw value, if any</p>","parent_name":"EnumCase"},"Classes/EnumCase.html#/c:@M@SourceryRuntime@objc(cs)EnumCase(py)associatedValues":{"name":"associatedValues","abstract":"<p>Enum case associated values</p>","parent_name":"EnumCase"},"Classes/EnumCase.html#/c:@M@SourceryRuntime@objc(cs)EnumCase(py)annotations":{"name":"annotations","abstract":"<p>Enum case annotations</p>","parent_name":"EnumCase"},"Classes/EnumCase.html#/c:@M@SourceryRuntime@objc(cs)EnumCase(py)hasAssociatedValue":{"name":"hasAssociatedValue","abstract":"<p>Whether enum case has associated value</p>","parent_name":"EnumCase"},"Classes/Enum.html#/c:@M@SourceryRuntime@objc(cs)Enum(py)kind":{"name":"kind","abstract":"<p>Returns <q>enum</q></p>","parent_name":"Enum"},"Classes/Enum.html#/c:@M@SourceryRuntime@objc(cs)Enum(py)cases":{"name":"cases","abstract":"<p>Enum cases</p>","parent_name":"Enum"},"Classes/Enum.html#/c:@M@SourceryRuntime@objc(cs)Enum(py)rawTypeName":{"name":"rawTypeName","abstract":"<p>Enum raw value type name, if any</p>","parent_name":"Enum"},"Classes/Enum.html#/c:@M@SourceryRuntime@objc(cs)Enum(py)rawType":{"name":"rawType","abstract":"<p>Enum raw value type, if known</p>","parent_name":"Enum"},"Classes/Enum.html#/c:@M@SourceryRuntime@objc(cs)Enum(py)based":{"name":"based","abstract":"<p>Names of types or protocols this type inherits from, including unknown (not scanned) types</p>","parent_name":"Enum"},"Classes/Enum.html#/c:@M@SourceryRuntime@objc(cs)Enum(py)hasAssociatedValues":{"name":"hasAssociatedValues","abstract":"<p>Whether enum contains any associated values</p>","parent_name":"Enum"},"Classes/Struct.html#/c:@M@SourceryRuntime@objc(cs)Struct(py)kind":{"name":"kind","abstract":"<p>Returns <q>struct</q></p>","parent_name":"Struct"},"Classes/Class.html#/c:@M@SourceryRuntime@objc(cs)SwiftClass(py)kind":{"name":"kind","abstract":"<p>Returns <q>class</q></p>","parent_name":"Class"},"Classes/Class.html#/c:@M@SourceryRuntime@objc(cs)SwiftClass(py)isFinal":{"name":"isFinal","abstract":"<p>Whether type is final</p>","parent_name":"Class"},"Classes/Protocol.html#/c:@M@SourceryRuntime@objc(cs)Protocol(py)kind":{"name":"kind","abstract":"<p>Returns <q>protocol</q></p>","parent_name":"Protocol"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)isExtension":{"name":"isExtension","abstract":"<p>Whether declaration is an extension of some type</p>","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)kind":{"name":"kind","abstract":"<p>Kind of type declaration, i.e. <code>enum</code>, <code>struct</code>, <code>class</code>, <code>protocol</code> or <code>extension</code></p>","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)accessLevel":{"name":"accessLevel","abstract":"<p>Type access level, i.e. <code>internal</code>, <code>private</code>, <code>fileprivate</code>, <code>public</code>, <code>open</code></p>","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)name":{"name":"name","abstract":"<p>Type name in global scope. For inner types includes the name of its containing type, i.e. <code>Type.Inner</code></p>","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)isGeneric":{"name":"isGeneric","abstract":"<p>Whether type is generic</p>","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)localName":{"name":"localName","abstract":"<p>Type name in its own scope.</p>","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)variables":{"name":"variables","abstract":"<p>Variables defined in this type only, inluding variables defined in its extensions,","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)allVariables":{"name":"allVariables","abstract":"<p>All variables defined for this type, including variables defined in extensions,","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)methods":{"name":"methods","abstract":"<p>Methods defined in this type only, inluding methods defined in its extensions,","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)allMethods":{"name":"allMethods","abstract":"<p>All methods defined for this type, including methods defined in extensions,","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)subscripts":{"name":"subscripts","abstract":"<p>Subscripts defined in this type only, inluding subscripts defined in its extensions,","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)allSubscripts":{"name":"allSubscripts","abstract":"<p>All subscripts defined for this type, including subscripts defined in extensions,","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)bodyBytesRange":{"name":"bodyBytesRange","abstract":"<p>Bytes position of the body of this type in its declaration file if available.</p>","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)initializers":{"name":"initializers","abstract":"<p>All initializers defined in this type</p>","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)annotations":{"name":"annotations","abstract":"<p>All annotations for this type</p>","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)staticVariables":{"name":"staticVariables","abstract":"<p>Static variables defined in this type</p>","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)staticMethods":{"name":"staticMethods","abstract":"<p>Static methods defined in this type</p>","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)classMethods":{"name":"classMethods","abstract":"<p>Class methods defined in this type</p>","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)instanceVariables":{"name":"instanceVariables","abstract":"<p>Instance variables defined in this type</p>","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)instanceMethods":{"name":"instanceMethods","abstract":"<p>Instance methods defined in this type</p>","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)computedVariables":{"name":"computedVariables","abstract":"<p>Computed instance variables defined in this type</p>","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)storedVariables":{"name":"storedVariables","abstract":"<p>Stored instance variables defined in this type</p>","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)inheritedTypes":{"name":"inheritedTypes","abstract":"<p>Names of types this type inherits from (for classes only) and protocols it implements, in order of definition</p>","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)based":{"name":"based","abstract":"<p>Names of types or protocols this type inherits from, including unknown (not scanned) types</p>","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)inherits":{"name":"inherits","abstract":"<p>Types this type inherits from (only for classes)</p>","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)implements":{"name":"implements","abstract":"<p>Protocols this type implements</p>","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)containedTypes":{"name":"containedTypes","abstract":"<p>Contained types</p>","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)containedType":{"name":"containedType","abstract":"<p>Contained types groupd by their names</p>","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)parentName":{"name":"parentName","abstract":"<p>Name of parent type (for contained types only)</p>","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)parent":{"name":"parent","abstract":"<p>Parent type, if known (for contained types only)</p>","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)supertype":{"name":"supertype","abstract":"<p>Superclass type, if known (only for classes)</p>","parent_name":"Type"},"Classes/Type.html#/c:@M@SourceryRuntime@objc(cs)Type(py)attributes":{"name":"attributes","abstract":"<p>Type attributes, i.e. <code>@objc</code></p>","parent_name":"Type"},"Classes/Types.html#/c:@M@SourceryRuntime@objc(cs)Types(py)all":{"name":"all","abstract":"<p>All known types, excluding protocols</p>","parent_name":"Types"},"Classes/Types.html#/c:@M@SourceryRuntime@objc(cs)Types(py)protocols":{"name":"protocols","abstract":"<p>All known protocols</p>","parent_name":"Types"},"Classes/Types.html#/c:@M@SourceryRuntime@objc(cs)Types(py)classes":{"name":"classes","abstract":"<p>All known classes</p>","parent_name":"Types"},"Classes/Types.html#/c:@M@SourceryRuntime@objc(cs)Types(py)structs":{"name":"structs","abstract":"<p>All known structs</p>","parent_name":"Types"},"Classes/Types.html#/c:@M@SourceryRuntime@objc(cs)Types(py)enums":{"name":"enums","abstract":"<p>All known enums</p>","parent_name":"Types"},"Classes/Types.html#/c:@M@SourceryRuntime@objc(cs)Types(py)extensions":{"name":"extensions","abstract":"<p>All known extensions</p>","parent_name":"Types"},"Classes/Types.html#/c:@M@SourceryRuntime@objc(cs)Types(py)based":{"name":"based","abstract":"<p>Types based on any other type, grouped by its name, even if they are not known.","parent_name":"Types"},"Classes/Types.html#/c:@M@SourceryRuntime@objc(cs)Types(py)inheriting":{"name":"inheriting","abstract":"<p>Classes inheriting from any known class, grouped by its name.","parent_name":"Types"},"Classes/Types.html#/c:@M@SourceryRuntime@objc(cs)Types(py)implementing":{"name":"implementing","abstract":"<p>Types implementing known protocol, grouped by its name.","parent_name":"Types"},"Classes/Types.html":{"name":"Types","abstract":"<p>Collection of scanned types for accessing in templates</p>"},"Classes/Type.html":{"name":"Type","abstract":"<p>Defines Swift type</p>"},"Classes/Protocol.html":{"name":"Protocol","abstract":"<p>Describes Swift protocol</p>"},"Classes/Class.html":{"name":"Class","abstract":"<p>Descibes Swift class</p>"},"Classes/Struct.html":{"name":"Struct","abstract":"<p>Describes Swift struct</p>"},"Classes/Enum.html":{"name":"Enum","abstract":"<p>Defines Swift enum</p>"},"Classes/EnumCase.html":{"name":"EnumCase","abstract":"<p>Defines enum case</p>"},"Classes/AssociatedValue.html":{"name":"AssociatedValue","abstract":"<p>Defines enum case associated value</p>"},"Classes/Variable.html":{"name":"Variable","abstract":"<p>Defines variable</p>"},"Classes/Method.html":{"name":"Method","abstract":"<p>Describes method</p>"},"Classes/MethodParameter.html":{"name":"MethodParameter","abstract":"<p>Describes method parameter</p>"},"Classes/Subscript.html":{"name":"Subscript","abstract":"<p>Describes subscript</p>"},"Classes/TypeName.html":{"name":"TypeName","abstract":"<p>Describes name of the type used in typed declaration (variable, method parameter or return value etc.)</p>"},"Classes/TupleType.html":{"name":"TupleType","abstract":"<p>Describes tuple type</p>"},"Classes/TupleElement.html":{"name":"TupleElement","abstract":"<p>Describes tuple type element</p>"},"Classes/ArrayType.html":{"name":"ArrayType","abstract":"<p>Describes array type</p>"},"Classes/DictionaryType.html":{"name":"DictionaryType","abstract":"<p>Describes dictionary type</p>"},"Classes/ClosureType.html":{"name":"ClosureType","abstract":"<p>Describes closure type</p>"},"Classes/GenericType.html":{"name":"GenericType","abstract":"<p>Descibes Swift generic type</p>"},"Classes/GenericTypeParameter.html":{"name":"GenericTypeParameter","abstract":"<p>Descibes Swift generic type parameter</p>"},"Classes/Attribute.html":{"name":"Attribute","abstract":"<p>Describes Swift attribute</p>"},"equatable.html":{"name":"Equatable"},"hashable.html":{"name":"Hashable"},"enum-cases.html":{"name":"Enum cases"},"lenses.html":{"name":"Lenses"},"mocks.html":{"name":"Mocks"},"codable.html":{"name":"Codable"},"diffable.html":{"name":"Diffable"},"linuxmain.html":{"name":"LinuxMain"},"decorator.html":{"name":"Decorator"},"installing.html":{"name":"Installing"},"usage.html":{"name":"Usage"},"writing-templates.html":{"name":"Writing templates"},"Guides.html":{"name":"Guides"},"Examples.html":{"name":"Examples"},"Types.html":{"name":"Types"},"Other Protocols.html":{"name":"Other Protocols","abstract":"<p>The following protocols are available globally.</p>"}}