// Generated using Sourcery 2.1.3 â€” https://github.com/krzysztofzablocki/Sourcery
// DO NOT EDIT
// swiftlint:disable line_length
// swiftlint:disable variable_name

import Foundation
#if os(iOS) || os(tvOS) || os(watchOS)
import UIKit
#elseif os(OSX)
import AppKit
#endif

public class AccessLevelProtocolMock: AccessLevelProtocol {

    public init() {}

    public var company: String?
    public var name: String {
        get { return underlyingName }
        set(value) { underlyingName = value }
    }
    public var underlyingName: (String)!


    //MARK: - loadConfiguration

    public var LoadConfigurationStringCallsCount = 0
    public var LoadConfigurationStringCalled: Bool {
        return LoadConfigurationStringCallsCount > 0
    }
    public var LoadConfigurationStringReturnValue: String?
    public var LoadConfigurationStringClosure: (() -> String?)?

    public func loadConfiguration() -> String? {
        LoadConfigurationStringCallsCount += 1
        if let LoadConfigurationStringClosure = LoadConfigurationStringClosure {
            return LoadConfigurationStringClosure()
        } else {
            return LoadConfigurationStringReturnValue
        }
    }

}
class AnnotatedProtocolMock: AnnotatedProtocol {




    //MARK: - sayHelloWith

    var SayHelloWithNameStringVoidCallsCount = 0
    var SayHelloWithNameStringVoidCalled: Bool {
        return SayHelloWithNameStringVoidCallsCount > 0
    }
    var SayHelloWithNameStringVoidReceivedName: (String)?
    var SayHelloWithNameStringVoidReceivedInvocations: [(String)] = []
    var SayHelloWithNameStringVoidClosure: ((String) -> Void)?

    func sayHelloWith(name: String) {
        SayHelloWithNameStringVoidCallsCount += 1
        SayHelloWithNameStringVoidReceivedName = name
        SayHelloWithNameStringVoidReceivedInvocations.append(name)
        SayHelloWithNameStringVoidClosure?(name)
    }

}
class AnyProtocolMock: AnyProtocol {


    var a: any StubProtocol {
        get { return underlyingA }
        set(value) { underlyingA = value }
    }
    var underlyingA: (any StubProtocol)!
    var b: (any StubProtocol)?
    var c: (any StubProtocol)!
    var d: (((any StubProtocol)?) -> Void) {
        get { return underlyingD }
        set(value) { underlyingD = value }
    }
    var underlyingD: ((((any StubProtocol)?) -> Void))!
    var e: [(any StubProtocol)?] = []
    var g: any StubProtocol {
        get { return underlyingG }
        set(value) { underlyingG = value }
    }
    var underlyingG: (any StubProtocol)!
    var h: (any StubProtocol)?
    var i: (any StubProtocol)!
    var anyConfusingPropertyName: any StubProtocol {
        get { return underlyingAnyConfusingPropertyName }
        set(value) { underlyingAnyConfusingPropertyName = value }
    }
    var underlyingAnyConfusingPropertyName: (any StubProtocol)!
    var o: any StubWithAnyNameProtocol {
        get { return underlyingO }
        set(value) { underlyingO = value }
    }
    var underlyingO: (any StubWithAnyNameProtocol)!


    //MARK: - f

    var FXAnyStubProtocolYAnyStubProtocolZAnyStubProtocolVoidCallsCount = 0
    var FXAnyStubProtocolYAnyStubProtocolZAnyStubProtocolVoidCalled: Bool {
        return FXAnyStubProtocolYAnyStubProtocolZAnyStubProtocolVoidCallsCount > 0
    }
    var FXAnyStubProtocolYAnyStubProtocolZAnyStubProtocolVoidReceivedArguments: (x: (any StubProtocol)?, y: (any StubProtocol)?, z: any StubProtocol)?
    var FXAnyStubProtocolYAnyStubProtocolZAnyStubProtocolVoidReceivedInvocations: [(x: (any StubProtocol)?, y: (any StubProtocol)?, z: any StubProtocol)] = []
    var FXAnyStubProtocolYAnyStubProtocolZAnyStubProtocolVoidClosure: (((any StubProtocol)?, (any StubProtocol)?, any StubProtocol) -> Void)?

    func f(_ x: (any StubProtocol)?, y: (any StubProtocol)!, z: any StubProtocol) {
        FXAnyStubProtocolYAnyStubProtocolZAnyStubProtocolVoidCallsCount += 1
        FXAnyStubProtocolYAnyStubProtocolZAnyStubProtocolVoidReceivedArguments = (x: x, y: y, z: z)
        FXAnyStubProtocolYAnyStubProtocolZAnyStubProtocolVoidReceivedInvocations.append((x: x, y: y, z: z))
        FXAnyStubProtocolYAnyStubProtocolZAnyStubProtocolVoidClosure?(x, y, z)
    }

    //MARK: - j

    var JXAnyStubProtocolYAnyStubProtocolZAnyStubProtocolStringCallsCount = 0
    var JXAnyStubProtocolYAnyStubProtocolZAnyStubProtocolStringCalled: Bool {
        return JXAnyStubProtocolYAnyStubProtocolZAnyStubProtocolStringCallsCount > 0
    }
    var JXAnyStubProtocolYAnyStubProtocolZAnyStubProtocolStringReceivedArguments: (x: (any StubProtocol)?, y: (any StubProtocol)?, z: any StubProtocol)?
    var JXAnyStubProtocolYAnyStubProtocolZAnyStubProtocolStringReceivedInvocations: [(x: (any StubProtocol)?, y: (any StubProtocol)?, z: any StubProtocol)] = []
    var JXAnyStubProtocolYAnyStubProtocolZAnyStubProtocolStringReturnValue: String!
    var JXAnyStubProtocolYAnyStubProtocolZAnyStubProtocolStringClosure: (((any StubProtocol)?, (any StubProtocol)?, any StubProtocol) async -> String)?

    func j(x: (any StubProtocol)?, y: (any StubProtocol)!, z: any StubProtocol) async -> String {
        JXAnyStubProtocolYAnyStubProtocolZAnyStubProtocolStringCallsCount += 1
        JXAnyStubProtocolYAnyStubProtocolZAnyStubProtocolStringReceivedArguments = (x: x, y: y, z: z)
        JXAnyStubProtocolYAnyStubProtocolZAnyStubProtocolStringReceivedInvocations.append((x: x, y: y, z: z))
        if let JXAnyStubProtocolYAnyStubProtocolZAnyStubProtocolStringClosure = JXAnyStubProtocolYAnyStubProtocolZAnyStubProtocolStringClosure {
            return await JXAnyStubProtocolYAnyStubProtocolZAnyStubProtocolStringClosure(x, y, z)
        } else {
            return JXAnyStubProtocolYAnyStubProtocolZAnyStubProtocolStringReturnValue
        }
    }

    //MARK: - k

    var KXAnyStubProtocolVoidYAnyStubProtocolVoidVoidCallsCount = 0
    var KXAnyStubProtocolVoidYAnyStubProtocolVoidVoidCalled: Bool {
        return KXAnyStubProtocolVoidYAnyStubProtocolVoidVoidCallsCount > 0
    }
    var KXAnyStubProtocolVoidYAnyStubProtocolVoidVoidClosure: ((((any StubProtocol)?) -> Void, (any StubProtocol) -> Void) -> Void)?

    func k(x: ((any StubProtocol)?) -> Void, y: (any StubProtocol) -> Void) {
        KXAnyStubProtocolVoidYAnyStubProtocolVoidVoidCallsCount += 1
        KXAnyStubProtocolVoidYAnyStubProtocolVoidVoidClosure?(x, y)
    }

    //MARK: - l

    var LXAnyStubProtocolVoidYAnyStubProtocolVoidVoidCallsCount = 0
    var LXAnyStubProtocolVoidYAnyStubProtocolVoidVoidCalled: Bool {
        return LXAnyStubProtocolVoidYAnyStubProtocolVoidVoidCallsCount > 0
    }
    var LXAnyStubProtocolVoidYAnyStubProtocolVoidVoidClosure: ((((any StubProtocol)?) -> Void, (any StubProtocol) -> Void) -> Void)?

    func l(x: ((any StubProtocol)?) -> Void, y: (any StubProtocol) -> Void) {
        LXAnyStubProtocolVoidYAnyStubProtocolVoidVoidCallsCount += 1
        LXAnyStubProtocolVoidYAnyStubProtocolVoidVoidClosure?(x, y)
    }

    //MARK: - m

    var MAnyConfusingArgumentNameAnyStubProtocolVoidCallsCount = 0
    var MAnyConfusingArgumentNameAnyStubProtocolVoidCalled: Bool {
        return MAnyConfusingArgumentNameAnyStubProtocolVoidCallsCount > 0
    }
    var MAnyConfusingArgumentNameAnyStubProtocolVoidReceivedAnyConfusingArgumentName: (any StubProtocol)?
    var MAnyConfusingArgumentNameAnyStubProtocolVoidReceivedInvocations: [(any StubProtocol)] = []
    var MAnyConfusingArgumentNameAnyStubProtocolVoidClosure: ((any StubProtocol) -> Void)?

    func m(anyConfusingArgumentName: any StubProtocol) {
        MAnyConfusingArgumentNameAnyStubProtocolVoidCallsCount += 1
        MAnyConfusingArgumentNameAnyStubProtocolVoidReceivedAnyConfusingArgumentName = anyConfusingArgumentName
        MAnyConfusingArgumentNameAnyStubProtocolVoidReceivedInvocations.append(anyConfusingArgumentName)
        MAnyConfusingArgumentNameAnyStubProtocolVoidClosure?(anyConfusingArgumentName)
    }

    //MARK: - n

    var NXEscapingAnyStubProtocolVoidVoidCallsCount = 0
    var NXEscapingAnyStubProtocolVoidVoidCalled: Bool {
        return NXEscapingAnyStubProtocolVoidVoidCallsCount > 0
    }
    var NXEscapingAnyStubProtocolVoidVoidReceivedX: ((((any StubProtocol)?) -> Void))?
    var NXEscapingAnyStubProtocolVoidVoidReceivedInvocations: [((((any StubProtocol)?) -> Void))] = []
    var NXEscapingAnyStubProtocolVoidVoidClosure: ((@escaping ((any StubProtocol)?) -> Void) -> Void)?

    func n(x: @escaping ((any StubProtocol)?) -> Void) {
        NXEscapingAnyStubProtocolVoidVoidCallsCount += 1
        NXEscapingAnyStubProtocolVoidVoidReceivedX = x
        NXEscapingAnyStubProtocolVoidVoidReceivedInvocations.append(x)
        NXEscapingAnyStubProtocolVoidVoidClosure?(x)
    }

    //MARK: - p

    var PXAnyStubWithAnyNameProtocolVoidCallsCount = 0
    var PXAnyStubWithAnyNameProtocolVoidCalled: Bool {
        return PXAnyStubWithAnyNameProtocolVoidCallsCount > 0
    }
    var PXAnyStubWithAnyNameProtocolVoidReceivedX: (any StubWithAnyNameProtocol)?
    var PXAnyStubWithAnyNameProtocolVoidReceivedInvocations: [(any StubWithAnyNameProtocol)?] = []
    var PXAnyStubWithAnyNameProtocolVoidClosure: (((any StubWithAnyNameProtocol)?) -> Void)?

    func p(_ x: (any StubWithAnyNameProtocol)?) {
        PXAnyStubWithAnyNameProtocolVoidCallsCount += 1
        PXAnyStubWithAnyNameProtocolVoidReceivedX = x
        PXAnyStubWithAnyNameProtocolVoidReceivedInvocations.append(x)
        PXAnyStubWithAnyNameProtocolVoidClosure?(x)
    }

    //MARK: - q

    var QAnyStubProtocolCallsCount = 0
    var QAnyStubProtocolCalled: Bool {
        return QAnyStubProtocolCallsCount > 0
    }
    var QAnyStubProtocolReturnValue: (any StubProtocol)!
    var QAnyStubProtocolClosure: (() -> any StubProtocol)?

    func q() -> any StubProtocol {
        QAnyStubProtocolCallsCount += 1
        if let QAnyStubProtocolClosure = QAnyStubProtocolClosure {
            return QAnyStubProtocolClosure()
        } else {
            return QAnyStubProtocolReturnValue
        }
    }

    //MARK: - r

    var RAnyStubProtocolCallsCount = 0
    var RAnyStubProtocolCalled: Bool {
        return RAnyStubProtocolCallsCount > 0
    }
    var RAnyStubProtocolReturnValue: ((any StubProtocol)?)
    var RAnyStubProtocolClosure: (() -> (any StubProtocol)?)?

    func r() -> (any StubProtocol)? {
        RAnyStubProtocolCallsCount += 1
        if let RAnyStubProtocolClosure = RAnyStubProtocolClosure {
            return RAnyStubProtocolClosure()
        } else {
            return RAnyStubProtocolReturnValue
        }
    }

    //MARK: - s

    var S____AnyStubProtocolCallsCount = 0
    var S____AnyStubProtocolCalled: Bool {
        return S____AnyStubProtocolCallsCount > 0
    }
    var S____AnyStubProtocolReturnValue: ((() -> any StubProtocol))!
    var S____AnyStubProtocolClosure: (() -> (() -> any StubProtocol))?

    func s() -> (() -> any StubProtocol) {
        S____AnyStubProtocolCallsCount += 1
        if let S____AnyStubProtocolClosure = S____AnyStubProtocolClosure {
            return S____AnyStubProtocolClosure()
        } else {
            return S____AnyStubProtocolReturnValue
        }
    }

    //MARK: - t

    var T____AnyStubProtocolCallsCount = 0
    var T____AnyStubProtocolCalled: Bool {
        return T____AnyStubProtocolCallsCount > 0
    }
    var T____AnyStubProtocolReturnValue: ((() -> (any StubProtocol)?))!
    var T____AnyStubProtocolClosure: (() -> (() -> (any StubProtocol)?))?

    func t() -> (() -> (any StubProtocol)?) {
        T____AnyStubProtocolCallsCount += 1
        if let T____AnyStubProtocolClosure = T____AnyStubProtocolClosure {
            return T____AnyStubProtocolClosure()
        } else {
            return T____AnyStubProtocolReturnValue
        }
    }

    //MARK: - u

    var U_IntAnyStubProtocolCallsCount = 0
    var U_IntAnyStubProtocolCalled: Bool {
        return U_IntAnyStubProtocolCallsCount > 0
    }
    var U_IntAnyStubProtocolReturnValue: ((Int, () -> (any StubProtocol)?))!
    var U_IntAnyStubProtocolClosure: (() -> (Int, () -> (any StubProtocol)?))?

    func u() -> (Int, () -> (any StubProtocol)?) {
        U_IntAnyStubProtocolCallsCount += 1
        if let U_IntAnyStubProtocolClosure = U_IntAnyStubProtocolClosure {
            return U_IntAnyStubProtocolClosure()
        } else {
            return U_IntAnyStubProtocolReturnValue
        }
    }

    //MARK: - v

    var V_IntAnyStubProtocolCallsCount = 0
    var V_IntAnyStubProtocolCalled: Bool {
        return V_IntAnyStubProtocolCallsCount > 0
    }
    var V_IntAnyStubProtocolReturnValue: ((Int, (() -> any StubProtocol)?))!
    var V_IntAnyStubProtocolClosure: (() -> (Int, (() -> any StubProtocol)?))?

    func v() -> (Int, (() -> any StubProtocol)?) {
        V_IntAnyStubProtocolCallsCount += 1
        if let V_IntAnyStubProtocolClosure = V_IntAnyStubProtocolClosure {
            return V_IntAnyStubProtocolClosure()
        } else {
            return V_IntAnyStubProtocolReturnValue
        }
    }

    //MARK: - w

    var W_AnyStubProtocolCallsCount = 0
    var W_AnyStubProtocolCalled: Bool {
        return W_AnyStubProtocolCallsCount > 0
    }
    var W_AnyStubProtocolReturnValue: ([(any StubProtocol)?])!
    var W_AnyStubProtocolClosure: (() -> [(any StubProtocol)?])?

    func w() -> [(any StubProtocol)?] {
        W_AnyStubProtocolCallsCount += 1
        if let W_AnyStubProtocolClosure = W_AnyStubProtocolClosure {
            return W_AnyStubProtocolClosure()
        } else {
            return W_AnyStubProtocolReturnValue
        }
    }

    //MARK: - x

    var XStringAnyStubProtocolCallsCount = 0
    var XStringAnyStubProtocolCalled: Bool {
        return XStringAnyStubProtocolCallsCount > 0
    }
    var XStringAnyStubProtocolReturnValue: ([String: (any StubProtocol)?])!
    var XStringAnyStubProtocolClosure: (() -> [String: (any StubProtocol)?])?

    func x() -> [String: (any StubProtocol)?] {
        XStringAnyStubProtocolCallsCount += 1
        if let XStringAnyStubProtocolClosure = XStringAnyStubProtocolClosure {
            return XStringAnyStubProtocolClosure()
        } else {
            return XStringAnyStubProtocolReturnValue
        }
    }

    //MARK: - y

    var Y_AnyStubProtocolAnyStubProtocolCallsCount = 0
    var Y_AnyStubProtocolAnyStubProtocolCalled: Bool {
        return Y_AnyStubProtocolAnyStubProtocolCallsCount > 0
    }
    var Y_AnyStubProtocolAnyStubProtocolReturnValue: ((any StubProtocol, (any StubProtocol)?))!
    var Y_AnyStubProtocolAnyStubProtocolClosure: (() -> (any StubProtocol, (any StubProtocol)?))?

    func y() -> (any StubProtocol, (any StubProtocol)?) {
        Y_AnyStubProtocolAnyStubProtocolCallsCount += 1
        if let Y_AnyStubProtocolAnyStubProtocolClosure = Y_AnyStubProtocolAnyStubProtocolClosure {
            return Y_AnyStubProtocolAnyStubProtocolClosure()
        } else {
            return Y_AnyStubProtocolAnyStubProtocolReturnValue
        }
    }

    //MARK: - z

    var ZAnyStubProtocol&CustomStringConvertibleCallsCount = 0
    var ZAnyStubProtocol&CustomStringConvertibleCalled: Bool {
        return ZAnyStubProtocol&CustomStringConvertibleCallsCount > 0
    }
    var ZAnyStubProtocol&CustomStringConvertibleReturnValue: (any StubProtocol & CustomStringConvertible)!
    var ZAnyStubProtocol&CustomStringConvertibleClosure: (() -> any StubProtocol & CustomStringConvertible)?

    func z() -> any StubProtocol & CustomStringConvertible {
        ZAnyStubProtocol&CustomStringConvertibleCallsCount += 1
        if let ZAnyStubProtocol&CustomStringConvertibleClosure = ZAnyStubProtocol&CustomStringConvertibleClosure {
            return ZAnyStubProtocol&CustomStringConvertibleClosure()
        } else {
            return ZAnyStubProtocol&CustomStringConvertibleReturnValue
        }
    }

}
class AsyncProtocolMock: AsyncProtocol {




    //MARK: - callAsync

    var CallAsyncParameterIntStringCallsCount = 0
    var CallAsyncParameterIntStringCalled: Bool {
        return CallAsyncParameterIntStringCallsCount > 0
    }
    var CallAsyncParameterIntStringReceivedParameter: (Int)?
    var CallAsyncParameterIntStringReceivedInvocations: [(Int)] = []
    var CallAsyncParameterIntStringReturnValue: String!
    var CallAsyncParameterIntStringClosure: ((Int) async -> String)?

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    func callAsync(parameter: Int) async -> String {
        CallAsyncParameterIntStringCallsCount += 1
        CallAsyncParameterIntStringReceivedParameter = parameter
        CallAsyncParameterIntStringReceivedInvocations.append(parameter)
        if let CallAsyncParameterIntStringClosure = CallAsyncParameterIntStringClosure {
            return await CallAsyncParameterIntStringClosure(parameter)
        } else {
            return CallAsyncParameterIntStringReturnValue
        }
    }

    //MARK: - callAsyncAndThrow

    var CallAsyncAndThrowParameterIntStringThrowableError: Error?
    var CallAsyncAndThrowParameterIntStringCallsCount = 0
    var CallAsyncAndThrowParameterIntStringCalled: Bool {
        return CallAsyncAndThrowParameterIntStringCallsCount > 0
    }
    var CallAsyncAndThrowParameterIntStringReceivedParameter: (Int)?
    var CallAsyncAndThrowParameterIntStringReceivedInvocations: [(Int)] = []
    var CallAsyncAndThrowParameterIntStringReturnValue: String!
    var CallAsyncAndThrowParameterIntStringClosure: ((Int) async throws -> String)?

    func callAsyncAndThrow(parameter: Int) async throws -> String {
        CallAsyncAndThrowParameterIntStringCallsCount += 1
        CallAsyncAndThrowParameterIntStringReceivedParameter = parameter
        CallAsyncAndThrowParameterIntStringReceivedInvocations.append(parameter)
        if let error = CallAsyncAndThrowParameterIntStringThrowableError {
            throw error
        }
        if let CallAsyncAndThrowParameterIntStringClosure = CallAsyncAndThrowParameterIntStringClosure {
            return try await CallAsyncAndThrowParameterIntStringClosure(parameter)
        } else {
            return CallAsyncAndThrowParameterIntStringReturnValue
        }
    }

    //MARK: - callAsyncVoid

    var CallAsyncVoidParameterIntVoidCallsCount = 0
    var CallAsyncVoidParameterIntVoidCalled: Bool {
        return CallAsyncVoidParameterIntVoidCallsCount > 0
    }
    var CallAsyncVoidParameterIntVoidReceivedParameter: (Int)?
    var CallAsyncVoidParameterIntVoidReceivedInvocations: [(Int)] = []
    var CallAsyncVoidParameterIntVoidClosure: ((Int) async -> Void)?

    func callAsyncVoid(parameter: Int) async {
        CallAsyncVoidParameterIntVoidCallsCount += 1
        CallAsyncVoidParameterIntVoidReceivedParameter = parameter
        CallAsyncVoidParameterIntVoidReceivedInvocations.append(parameter)
        await CallAsyncVoidParameterIntVoidClosure?(parameter)
    }

    //MARK: - callAsyncAndThrowVoid

    var CallAsyncAndThrowVoidParameterIntVoidThrowableError: Error?
    var CallAsyncAndThrowVoidParameterIntVoidCallsCount = 0
    var CallAsyncAndThrowVoidParameterIntVoidCalled: Bool {
        return CallAsyncAndThrowVoidParameterIntVoidCallsCount > 0
    }
    var CallAsyncAndThrowVoidParameterIntVoidReceivedParameter: (Int)?
    var CallAsyncAndThrowVoidParameterIntVoidReceivedInvocations: [(Int)] = []
    var CallAsyncAndThrowVoidParameterIntVoidClosure: ((Int) async throws -> Void)?

    func callAsyncAndThrowVoid(parameter: Int) async throws {
        CallAsyncAndThrowVoidParameterIntVoidCallsCount += 1
        CallAsyncAndThrowVoidParameterIntVoidReceivedParameter = parameter
        CallAsyncAndThrowVoidParameterIntVoidReceivedInvocations.append(parameter)
        if let error = CallAsyncAndThrowVoidParameterIntVoidThrowableError {
            throw error
        }
        try await CallAsyncAndThrowVoidParameterIntVoidClosure?(parameter)
    }

}
class AsyncThrowingVariablesProtocolMock: AsyncThrowingVariablesProtocol {


    var titleCallsCount = 0
    var titleCalled: Bool {
        return titleCallsCount > 0
    }

    var title: String? {
        get async throws {
            titleCallsCount += 1
            if let error = titleThrowableError {
                throw error
            }
            if let titleClosure = titleClosure {
                return try await titleClosure()
            } else {
                return underlyingTitle
            }
        }
    }
    var underlyingTitle: String?
    var titleThrowableError: Error?
    var titleClosure: (() async throws -> String?)?
    var firstNameCallsCount = 0
    var firstNameCalled: Bool {
        return firstNameCallsCount > 0
    }

    var firstName: String {
        get async throws {
            firstNameCallsCount += 1
            if let error = firstNameThrowableError {
                throw error
            }
            if let firstNameClosure = firstNameClosure {
                return try await firstNameClosure()
            } else {
                return underlyingFirstName
            }
        }
    }
    var underlyingFirstName: String!
    var firstNameThrowableError: Error?
    var firstNameClosure: (() async throws -> String)?


}
class AsyncVariablesProtocolMock: AsyncVariablesProtocol {


    var titleCallsCount = 0
    var titleCalled: Bool {
        return titleCallsCount > 0
    }

    var title: String? {
        get async {
            titleCallsCount += 1
            if let titleClosure = titleClosure {
                return await titleClosure()
            } else {
                return underlyingTitle
            }
        }
    }
    var underlyingTitle: String?
    var titleClosure: (() async -> String?)?
    var firstNameCallsCount = 0
    var firstNameCalled: Bool {
        return firstNameCallsCount > 0
    }

    var firstName: String {
        get async {
            firstNameCallsCount += 1
            if let firstNameClosure = firstNameClosure {
                return await firstNameClosure()
            } else {
                return underlyingFirstName
            }
        }
    }
    var underlyingFirstName: String!
    var firstNameClosure: (() async -> String)?


}
class BasicProtocolMock: BasicProtocol {




    //MARK: - loadConfiguration

    var LoadConfigurationStringCallsCount = 0
    var LoadConfigurationStringCalled: Bool {
        return LoadConfigurationStringCallsCount > 0
    }
    var LoadConfigurationStringReturnValue: String?
    var LoadConfigurationStringClosure: (() -> String?)?

    func loadConfiguration() -> String? {
        LoadConfigurationStringCallsCount += 1
        if let LoadConfigurationStringClosure = LoadConfigurationStringClosure {
            return LoadConfigurationStringClosure()
        } else {
            return LoadConfigurationStringReturnValue
        }
    }

    //MARK: - save

    var SaveConfigurationStringVoidCallsCount = 0
    var SaveConfigurationStringVoidCalled: Bool {
        return SaveConfigurationStringVoidCallsCount > 0
    }
    var SaveConfigurationStringVoidReceivedConfiguration: (String)?
    var SaveConfigurationStringVoidReceivedInvocations: [(String)] = []
    var SaveConfigurationStringVoidClosure: ((String) -> Void)?

    func save(configuration: String) {
        SaveConfigurationStringVoidCallsCount += 1
        SaveConfigurationStringVoidReceivedConfiguration = configuration
        SaveConfigurationStringVoidReceivedInvocations.append(configuration)
        SaveConfigurationStringVoidClosure?(configuration)
    }

}
class ClosureProtocolMock: ClosureProtocol {




    //MARK: - setClosure

    var SetClosureClosureEscapingVoidVoidCallsCount = 0
    var SetClosureClosureEscapingVoidVoidCalled: Bool {
        return SetClosureClosureEscapingVoidVoidCallsCount > 0
    }
    var SetClosureClosureEscapingVoidVoidReceivedClosure: ((() -> Void))?
    var SetClosureClosureEscapingVoidVoidReceivedInvocations: [((() -> Void))] = []
    var SetClosureClosureEscapingVoidVoidClosure: ((@escaping () -> Void) -> Void)?

    func setClosure(_ closure: @escaping () -> Void) {
        SetClosureClosureEscapingVoidVoidCallsCount += 1
        SetClosureClosureEscapingVoidVoidReceivedClosure = closure
        SetClosureClosureEscapingVoidVoidReceivedInvocations.append(closure)
        SetClosureClosureEscapingVoidVoidClosure?(closure)
    }

}
class CurrencyPresenterMock: CurrencyPresenter {




    //MARK: - showSourceCurrency

    var ShowSourceCurrencyCurrencyStringVoidCallsCount = 0
    var ShowSourceCurrencyCurrencyStringVoidCalled: Bool {
        return ShowSourceCurrencyCurrencyStringVoidCallsCount > 0
    }
    var ShowSourceCurrencyCurrencyStringVoidReceivedCurrency: (String)?
    var ShowSourceCurrencyCurrencyStringVoidReceivedInvocations: [(String)] = []
    var ShowSourceCurrencyCurrencyStringVoidClosure: ((String) -> Void)?

    func showSourceCurrency(_ currency: String) {
        ShowSourceCurrencyCurrencyStringVoidCallsCount += 1
        ShowSourceCurrencyCurrencyStringVoidReceivedCurrency = currency
        ShowSourceCurrencyCurrencyStringVoidReceivedInvocations.append(currency)
        ShowSourceCurrencyCurrencyStringVoidClosure?(currency)
    }

}
class ExampleVarargMock: ExampleVararg {




    //MARK: - string

    var StringKeyStringArgsCVarArgStringCallsCount = 0
    var StringKeyStringArgsCVarArgStringCalled: Bool {
        return StringKeyStringArgsCVarArgStringCallsCount > 0
    }
    var StringKeyStringArgsCVarArgStringReceivedArguments: (key: String, args: CVarArg...)?
    var StringKeyStringArgsCVarArgStringReceivedInvocations: [(key: String, args: CVarArg...)] = []
    var StringKeyStringArgsCVarArgStringReturnValue: String!
    var StringKeyStringArgsCVarArgStringClosure: ((String, CVarArg...) -> String)?

    func string(key: String, args: CVarArg...) -> String {
        StringKeyStringArgsCVarArgStringCallsCount += 1
        StringKeyStringArgsCVarArgStringReceivedArguments = (key: key, args: args)
        StringKeyStringArgsCVarArgStringReceivedInvocations.append((key: key, args: args))
        if let StringKeyStringArgsCVarArgStringClosure = StringKeyStringArgsCVarArgStringClosure {
            return StringKeyStringArgsCVarArgStringClosure(key, args)
        } else {
            return StringKeyStringArgsCVarArgStringReturnValue
        }
    }

}
class ExtendableProtocolMock: ExtendableProtocol {


    var canReport: Bool {
        get { return underlyingCanReport }
        set(value) { underlyingCanReport = value }
    }
    var underlyingCanReport: (Bool)!


    //MARK: - report

    var ReportMessageStringVoidCallsCount = 0
    var ReportMessageStringVoidCalled: Bool {
        return ReportMessageStringVoidCallsCount > 0
    }
    var ReportMessageStringVoidReceivedMessage: (String)?
    var ReportMessageStringVoidReceivedInvocations: [(String)] = []
    var ReportMessageStringVoidClosure: ((String) -> Void)?

    func report(message: String) {
        ReportMessageStringVoidCallsCount += 1
        ReportMessageStringVoidReceivedMessage = message
        ReportMessageStringVoidReceivedInvocations.append(message)
        ReportMessageStringVoidClosure?(message)
    }

}
class FunctionWithAttributesMock: FunctionWithAttributes {




    //MARK: - callOneAttribute

    var CallOneAttributeStringCallsCount = 0
    var CallOneAttributeStringCalled: Bool {
        return CallOneAttributeStringCallsCount > 0
    }
    var CallOneAttributeStringReturnValue: String!
    var CallOneAttributeStringClosure: (() -> String)?

    @discardableResult
    func callOneAttribute() -> String {
        CallOneAttributeStringCallsCount += 1
        if let CallOneAttributeStringClosure = CallOneAttributeStringClosure {
            return CallOneAttributeStringClosure()
        } else {
            return CallOneAttributeStringReturnValue
        }
    }

    //MARK: - callTwoAttributes

    var CallTwoAttributesIntCallsCount = 0
    var CallTwoAttributesIntCalled: Bool {
        return CallTwoAttributesIntCallsCount > 0
    }
    var CallTwoAttributesIntReturnValue: Int!
    var CallTwoAttributesIntClosure: (() -> Int)?

    @available(macOS 10.15, *)
    @discardableResult
    func callTwoAttributes() -> Int {
        CallTwoAttributesIntCallsCount += 1
        if let CallTwoAttributesIntClosure = CallTwoAttributesIntClosure {
            return CallTwoAttributesIntClosure()
        } else {
            return CallTwoAttributesIntReturnValue
        }
    }

    //MARK: - callRepeatedAttributes

    var CallRepeatedAttributesBoolCallsCount = 0
    var CallRepeatedAttributesBoolCalled: Bool {
        return CallRepeatedAttributesBoolCallsCount > 0
    }
    var CallRepeatedAttributesBoolReturnValue: Bool!
    var CallRepeatedAttributesBoolClosure: (() -> Bool)?

    @available(iOS 13.0, *)
    @available(macOS 10.15, *)
    @discardableResult
    func callRepeatedAttributes() -> Bool {
        CallRepeatedAttributesBoolCallsCount += 1
        if let CallRepeatedAttributesBoolClosure = CallRepeatedAttributesBoolClosure {
            return CallRepeatedAttributesBoolClosure()
        } else {
            return CallRepeatedAttributesBoolReturnValue
        }
    }

}
class FunctionWithClosureReturnTypeMock: FunctionWithClosureReturnType {




    //MARK: - get

    var Get____VoidCallsCount = 0
    var Get____VoidCalled: Bool {
        return Get____VoidCallsCount > 0
    }
    var Get____VoidReturnValue: ((() -> Void))!
    var Get____VoidClosure: (() -> (() -> Void))?

    func get() -> (() -> Void) {
        Get____VoidCallsCount += 1
        if let Get____VoidClosure = Get____VoidClosure {
            return Get____VoidClosure()
        } else {
            return Get____VoidReturnValue
        }
    }

    //MARK: - getOptional

    var GetOptional_____VoidCallsCount = 0
    var GetOptional_____VoidCalled: Bool {
        return GetOptional_____VoidCallsCount > 0
    }
    var GetOptional_____VoidReturnValue: ((() -> Void)?)
    var GetOptional_____VoidClosure: (() -> ((() -> Void)?))?

    func getOptional() -> ((() -> Void)?) {
        GetOptional_____VoidCallsCount += 1
        if let GetOptional_____VoidClosure = GetOptional_____VoidClosure {
            return GetOptional_____VoidClosure()
        } else {
            return GetOptional_____VoidReturnValue
        }
    }

}
class FunctionWithMultilineDeclarationMock: FunctionWithMultilineDeclaration {




    //MARK: - start

    var StartCarStringOfModelStringVoidCallsCount = 0
    var StartCarStringOfModelStringVoidCalled: Bool {
        return StartCarStringOfModelStringVoidCallsCount > 0
    }
    var StartCarStringOfModelStringVoidReceivedArguments: (car: String, model: String)?
    var StartCarStringOfModelStringVoidReceivedInvocations: [(car: String, model: String)] = []
    var StartCarStringOfModelStringVoidClosure: ((String, String) -> Void)?

    func start(car: String, of model: String) {
        StartCarStringOfModelStringVoidCallsCount += 1
        StartCarStringOfModelStringVoidReceivedArguments = (car: car, model: model)
        StartCarStringOfModelStringVoidReceivedInvocations.append((car: car, model: model))
        StartCarStringOfModelStringVoidClosure?(car, model)
    }

}
class HouseProtocolMock: HouseProtocol {


    var aPublisher: AnyPublisher<any PersonProtocol, Never>?
    var bPublisher: AnyPublisher<(any PersonProtocol)?, Never>?
    var cPublisher: CurrentValueSubject<(any PersonProtocol)?, Never>?
    var dPublisher: PassthroughSubject<(any PersonProtocol)?, Never>?
    var e1Publisher: GenericType<(any PersonProtocol)?, Never, Never>?
    var e2Publisher: GenericType<Never, (any PersonProtocol)?, Never>?
    var e3Publisher: GenericType<Never, Never, (any PersonProtocol)?>?
    var e4Publisher: GenericType<(any PersonProtocol)?, (any PersonProtocol)?, (any PersonProtocol)?>?
    var f1Publisher: GenericType<any PersonProtocol, Never, Never>?
    var f2Publisher: GenericType<Never, any PersonProtocol, Never>?
    var f3Publisher: GenericType<Never, Never, any PersonProtocol>?
    var f4Publisher: GenericType<any PersonProtocol, any PersonProtocol, any PersonProtocol>?


}
class ImplicitlyUnwrappedOptionalReturnValueProtocolMock: ImplicitlyUnwrappedOptionalReturnValueProtocol {




    //MARK: - implicitReturn

    var ImplicitReturnStringCallsCount = 0
    var ImplicitReturnStringCalled: Bool {
        return ImplicitReturnStringCallsCount > 0
    }
    var ImplicitReturnStringReturnValue: String!
    var ImplicitReturnStringClosure: (() -> String!)?

    func implicitReturn() -> String! {
        ImplicitReturnStringCallsCount += 1
        if let ImplicitReturnStringClosure = ImplicitReturnStringClosure {
            return ImplicitReturnStringClosure()
        } else {
            return ImplicitReturnStringReturnValue
        }
    }

}
class InitializationProtocolMock: InitializationProtocol {




    //MARK: - init

    var InitIntParameterIntStringParameterStringOptionalParameterStringInitializationProtocolReceivedArguments: (intParameter: Int, stringParameter: String, optionalParameter: String?)?
    var InitIntParameterIntStringParameterStringOptionalParameterStringInitializationProtocolReceivedInvocations: [(intParameter: Int, stringParameter: String, optionalParameter: String?)] = []
    var InitIntParameterIntStringParameterStringOptionalParameterStringInitializationProtocolClosure: ((Int, String, String?) -> Void)?

    required init(intParameter: Int, stringParameter: String, optionalParameter: String?) {
        InitIntParameterIntStringParameterStringOptionalParameterStringInitializationProtocolReceivedArguments = (intParameter: intParameter, stringParameter: stringParameter, optionalParameter: optionalParameter)
        InitIntParameterIntStringParameterStringOptionalParameterStringInitializationProtocolReceivedInvocations.append((intParameter: intParameter, stringParameter: stringParameter, optionalParameter: optionalParameter))
        InitIntParameterIntStringParameterStringOptionalParameterStringInitializationProtocolClosure?(intParameter, stringParameter, optionalParameter)
    }
    //MARK: - start

    var StartVoidCallsCount = 0
    var StartVoidCalled: Bool {
        return StartVoidCallsCount > 0
    }
    var StartVoidClosure: (() -> Void)?

    func start() {
        StartVoidCallsCount += 1
        StartVoidClosure?()
    }

    //MARK: - stop

    var StopVoidCallsCount = 0
    var StopVoidCalled: Bool {
        return StopVoidCallsCount > 0
    }
    var StopVoidClosure: (() -> Void)?

    func stop() {
        StopVoidCallsCount += 1
        StopVoidClosure?()
    }

}
class MultiClosureProtocolMock: MultiClosureProtocol {




    //MARK: - setClosure

    var SetClosureNameStringClosureEscapingVoidVoidCallsCount = 0
    var SetClosureNameStringClosureEscapingVoidVoidCalled: Bool {
        return SetClosureNameStringClosureEscapingVoidVoidCallsCount > 0
    }
    var SetClosureNameStringClosureEscapingVoidVoidReceivedArguments: (name: String, closure: () -> Void)?
    var SetClosureNameStringClosureEscapingVoidVoidReceivedInvocations: [(name: String, closure: () -> Void)] = []
    var SetClosureNameStringClosureEscapingVoidVoidClosure: ((String, @escaping () -> Void) -> Void)?

    func setClosure(name: String, _ closure: @escaping () -> Void) {
        SetClosureNameStringClosureEscapingVoidVoidCallsCount += 1
        SetClosureNameStringClosureEscapingVoidVoidReceivedArguments = (name: name, closure: closure)
        SetClosureNameStringClosureEscapingVoidVoidReceivedInvocations.append((name: name, closure: closure))
        SetClosureNameStringClosureEscapingVoidVoidClosure?(name, closure)
    }

}
class MultiNonEscapingClosureProtocolMock: MultiNonEscapingClosureProtocol {




    //MARK: - executeClosure

    var ExecuteClosureNameStringClosureVoidVoidCallsCount = 0
    var ExecuteClosureNameStringClosureVoidVoidCalled: Bool {
        return ExecuteClosureNameStringClosureVoidVoidCallsCount > 0
    }
    var ExecuteClosureNameStringClosureVoidVoidClosure: ((String, () -> Void) -> Void)?

    func executeClosure(name: String, _ closure: () -> Void) {
        ExecuteClosureNameStringClosureVoidVoidCallsCount += 1
        ExecuteClosureNameStringClosureVoidVoidClosure?(name, closure)
    }

}
class NonEscapingClosureProtocolMock: NonEscapingClosureProtocol {




    //MARK: - executeClosure

    var ExecuteClosureClosureVoidVoidCallsCount = 0
    var ExecuteClosureClosureVoidVoidCalled: Bool {
        return ExecuteClosureClosureVoidVoidCallsCount > 0
    }
    var ExecuteClosureClosureVoidVoidClosure: ((() -> Void) -> Void)?

    func executeClosure(_ closure: () -> Void) {
        ExecuteClosureClosureVoidVoidCallsCount += 1
        ExecuteClosureClosureVoidVoidClosure?(closure)
    }

}
public class ProtocolWithOverridesMock: ProtocolWithOverrides {

    public init() {}



    //MARK: - doSomething

    public var DoSomethingDataIntStringCallsCount = 0
    public var DoSomethingDataIntStringCalled: Bool {
        return DoSomethingDataIntStringCallsCount > 0
    }
    public var DoSomethingDataIntStringReceivedData: (Int)?
    public var DoSomethingDataIntStringReceivedInvocations: [(Int)] = []
    public var DoSomethingDataIntStringReturnValue: [String]!
    public var DoSomethingDataIntStringClosure: ((Int) -> [String])?

    public func doSomething(_ data: Int) -> [String] {
        DoSomethingDataIntStringCallsCount += 1
        DoSomethingDataIntStringReceivedData = data
        DoSomethingDataIntStringReceivedInvocations.append(data)
        if let DoSomethingDataIntStringClosure = DoSomethingDataIntStringClosure {
            return DoSomethingDataIntStringClosure(data)
        } else {
            return DoSomethingDataIntStringReturnValue
        }
    }

    //MARK: - doSomething

    public var DoSomethingDataStringStringCallsCount = 0
    public var DoSomethingDataStringStringCalled: Bool {
        return DoSomethingDataStringStringCallsCount > 0
    }
    public var DoSomethingDataStringStringReceivedData: (String)?
    public var DoSomethingDataStringStringReceivedInvocations: [(String)] = []
    public var DoSomethingDataStringStringReturnValue: [String]!
    public var DoSomethingDataStringStringClosure: ((String) -> [String])?

    public func doSomething(_ data: String) -> [String] {
        DoSomethingDataStringStringCallsCount += 1
        DoSomethingDataStringStringReceivedData = data
        DoSomethingDataStringStringReceivedInvocations.append(data)
        if let DoSomethingDataStringStringClosure = DoSomethingDataStringStringClosure {
            return DoSomethingDataStringStringClosure(data)
        } else {
            return DoSomethingDataStringStringReturnValue
        }
    }

    //MARK: - doSomething

    public var DoSomethingDataStringIntCallsCount = 0
    public var DoSomethingDataStringIntCalled: Bool {
        return DoSomethingDataStringIntCallsCount > 0
    }
    public var DoSomethingDataStringIntReceivedData: (String)?
    public var DoSomethingDataStringIntReceivedInvocations: [(String)] = []
    public var DoSomethingDataStringIntReturnValue: [Int]!
    public var DoSomethingDataStringIntClosure: ((String) -> [Int])?

    public func doSomething(_ data: String) -> [Int] {
        DoSomethingDataStringIntCallsCount += 1
        DoSomethingDataStringIntReceivedData = data
        DoSomethingDataStringIntReceivedInvocations.append(data)
        if let DoSomethingDataStringIntClosure = DoSomethingDataStringIntClosure {
            return DoSomethingDataStringIntClosure(data)
        } else {
            return DoSomethingDataStringIntReturnValue
        }
    }

    //MARK: - doSomething

    public var DoSomethingDataString_IntStringCallsCount = 0
    public var DoSomethingDataString_IntStringCalled: Bool {
        return DoSomethingDataString_IntStringCallsCount > 0
    }
    public var DoSomethingDataString_IntStringReceivedData: (String)?
    public var DoSomethingDataString_IntStringReceivedInvocations: [(String)] = []
    public var DoSomethingDataString_IntStringReturnValue: ([Int], [String])!
    public var DoSomethingDataString_IntStringClosure: ((String) -> ([Int], [String]))?

    public func doSomething(_ data: String) -> ([Int], [String]) {
        DoSomethingDataString_IntStringCallsCount += 1
        DoSomethingDataString_IntStringReceivedData = data
        DoSomethingDataString_IntStringReceivedInvocations.append(data)
        if let DoSomethingDataString_IntStringClosure = DoSomethingDataString_IntStringClosure {
            return DoSomethingDataString_IntStringClosure(data)
        } else {
            return DoSomethingDataString_IntStringReturnValue
        }
    }

    //MARK: - doSomething

    public var DoSomethingDataString_IntAnyThrowableError: Error?
    public var DoSomethingDataString_IntAnyCallsCount = 0
    public var DoSomethingDataString_IntAnyCalled: Bool {
        return DoSomethingDataString_IntAnyCallsCount > 0
    }
    public var DoSomethingDataString_IntAnyReceivedData: (String)?
    public var DoSomethingDataString_IntAnyReceivedInvocations: [(String)] = []
    public var DoSomethingDataString_IntAnyReturnValue: ([Int], [Any])!
    public var DoSomethingDataString_IntAnyClosure: ((String) throws -> ([Int], [Any]))?

    public func doSomething(_ data: String) throws -> ([Int], [Any]) {
        DoSomethingDataString_IntAnyCallsCount += 1
        DoSomethingDataString_IntAnyReceivedData = data
        DoSomethingDataString_IntAnyReceivedInvocations.append(data)
        if let error = DoSomethingDataString_IntAnyThrowableError {
            throw error
        }
        if let DoSomethingDataString_IntAnyClosure = DoSomethingDataString_IntAnyClosure {
            return try DoSomethingDataString_IntAnyClosure(data)
        } else {
            return DoSomethingDataString_IntAnyReturnValue
        }
    }

    //MARK: - doSomething

    public var DoSomethingDataString_IntStringVoidCallsCount = 0
    public var DoSomethingDataString_IntStringVoidCalled: Bool {
        return DoSomethingDataString_IntStringVoidCallsCount > 0
    }
    public var DoSomethingDataString_IntStringVoidReceivedData: (String)?
    public var DoSomethingDataString_IntStringVoidReceivedInvocations: [(String)] = []
    public var DoSomethingDataString_IntStringVoidReturnValue: ((([Int], [String]) -> Void))!
    public var DoSomethingDataString_IntStringVoidClosure: ((String) -> (([Int], [String]) -> Void))?

    public func doSomething(_ data: String) -> (([Int], [String]) -> Void) {
        DoSomethingDataString_IntStringVoidCallsCount += 1
        DoSomethingDataString_IntStringVoidReceivedData = data
        DoSomethingDataString_IntStringVoidReceivedInvocations.append(data)
        if let DoSomethingDataString_IntStringVoidClosure = DoSomethingDataString_IntStringVoidClosure {
            return DoSomethingDataString_IntStringVoidClosure(data)
        } else {
            return DoSomethingDataString_IntStringVoidReturnValue
        }
    }

    //MARK: - doSomething

    public var DoSomethingDataString_IntAnyVoidThrowableError: Error?
    public var DoSomethingDataString_IntAnyVoidCallsCount = 0
    public var DoSomethingDataString_IntAnyVoidCalled: Bool {
        return DoSomethingDataString_IntAnyVoidCallsCount > 0
    }
    public var DoSomethingDataString_IntAnyVoidReceivedData: (String)?
    public var DoSomethingDataString_IntAnyVoidReceivedInvocations: [(String)] = []
    public var DoSomethingDataString_IntAnyVoidReturnValue: ((([Int], [Any]) -> Void))!
    public var DoSomethingDataString_IntAnyVoidClosure: ((String) throws -> (([Int], [Any]) -> Void))?

    public func doSomething(_ data: String) throws -> (([Int], [Any]) -> Void) {
        DoSomethingDataString_IntAnyVoidCallsCount += 1
        DoSomethingDataString_IntAnyVoidReceivedData = data
        DoSomethingDataString_IntAnyVoidReceivedInvocations.append(data)
        if let error = DoSomethingDataString_IntAnyVoidThrowableError {
            throw error
        }
        if let DoSomethingDataString_IntAnyVoidClosure = DoSomethingDataString_IntAnyVoidClosure {
            return try DoSomethingDataString_IntAnyVoidClosure(data)
        } else {
            return DoSomethingDataString_IntAnyVoidReturnValue
        }
    }

}
class ReservedWordsProtocolMock: ReservedWordsProtocol {




    //MARK: - `continue`

    var ContinueWithMessageStringStringCallsCount = 0
    var ContinueWithMessageStringStringCalled: Bool {
        return ContinueWithMessageStringStringCallsCount > 0
    }
    var ContinueWithMessageStringStringReceivedMessage: (String)?
    var ContinueWithMessageStringStringReceivedInvocations: [(String)] = []
    var ContinueWithMessageStringStringReturnValue: String!
    var ContinueWithMessageStringStringClosure: ((String) -> String)?

    func `continue`(with message: String) -> String {
        ContinueWithMessageStringStringCallsCount += 1
        ContinueWithMessageStringStringReceivedMessage = message
        ContinueWithMessageStringStringReceivedInvocations.append(message)
        if let ContinueWithMessageStringStringClosure = ContinueWithMessageStringStringClosure {
            return ContinueWithMessageStringStringClosure(message)
        } else {
            return ContinueWithMessageStringStringReturnValue
        }
    }

}
class SameShortMethodNamesProtocolMock: SameShortMethodNamesProtocol {




    //MARK: - start

    var StartCarStringOfModelStringVoidCallsCount = 0
    var StartCarStringOfModelStringVoidCalled: Bool {
        return StartCarStringOfModelStringVoidCallsCount > 0
    }
    var StartCarStringOfModelStringVoidReceivedArguments: (car: String, model: String)?
    var StartCarStringOfModelStringVoidReceivedInvocations: [(car: String, model: String)] = []
    var StartCarStringOfModelStringVoidClosure: ((String, String) -> Void)?

    func start(car: String, of model: String) {
        StartCarStringOfModelStringVoidCallsCount += 1
        StartCarStringOfModelStringVoidReceivedArguments = (car: car, model: model)
        StartCarStringOfModelStringVoidReceivedInvocations.append((car: car, model: model))
        StartCarStringOfModelStringVoidClosure?(car, model)
    }

    //MARK: - start

    var StartPlaneStringOfModelStringVoidCallsCount = 0
    var StartPlaneStringOfModelStringVoidCalled: Bool {
        return StartPlaneStringOfModelStringVoidCallsCount > 0
    }
    var StartPlaneStringOfModelStringVoidReceivedArguments: (plane: String, model: String)?
    var StartPlaneStringOfModelStringVoidReceivedInvocations: [(plane: String, model: String)] = []
    var StartPlaneStringOfModelStringVoidClosure: ((String, String) -> Void)?

    func start(plane: String, of model: String) {
        StartPlaneStringOfModelStringVoidCallsCount += 1
        StartPlaneStringOfModelStringVoidReceivedArguments = (plane: plane, model: model)
        StartPlaneStringOfModelStringVoidReceivedInvocations.append((plane: plane, model: model))
        StartPlaneStringOfModelStringVoidClosure?(plane, model)
    }

}
class SingleOptionalParameterFunctionMock: SingleOptionalParameterFunction {




    //MARK: - send

    var SendMessageStringVoidCallsCount = 0
    var SendMessageStringVoidCalled: Bool {
        return SendMessageStringVoidCallsCount > 0
    }
    var SendMessageStringVoidReceivedMessage: (String)?
    var SendMessageStringVoidReceivedInvocations: [(String)?] = []
    var SendMessageStringVoidClosure: ((String?) -> Void)?

    func send(message: String?) {
        SendMessageStringVoidCallsCount += 1
        SendMessageStringVoidReceivedMessage = message
        SendMessageStringVoidReceivedInvocations.append(message)
        SendMessageStringVoidClosure?(message)
    }

}
class SomeProtocolMock: SomeProtocol {




    //MARK: - a

    var AXSomeStubProtocolYSomeStubProtocolZSomeStubProtocolVoidCallsCount = 0
    var AXSomeStubProtocolYSomeStubProtocolZSomeStubProtocolVoidCalled: Bool {
        return AXSomeStubProtocolYSomeStubProtocolZSomeStubProtocolVoidCallsCount > 0
    }
    var AXSomeStubProtocolYSomeStubProtocolZSomeStubProtocolVoidReceivedArguments: (x: (any StubProtocol)?, y: (any StubProtocol)?, z: any StubProtocol)?
    var AXSomeStubProtocolYSomeStubProtocolZSomeStubProtocolVoidReceivedInvocations: [(x: (any StubProtocol)?, y: (any StubProtocol)?, z: any StubProtocol)] = []
    var AXSomeStubProtocolYSomeStubProtocolZSomeStubProtocolVoidClosure: (((any StubProtocol)?, (any StubProtocol)?, any StubProtocol) -> Void)?

    func a(_ x: (some StubProtocol)?, y: (some StubProtocol)!, z: some StubProtocol) {
        AXSomeStubProtocolYSomeStubProtocolZSomeStubProtocolVoidCallsCount += 1
        AXSomeStubProtocolYSomeStubProtocolZSomeStubProtocolVoidReceivedArguments = (x: x, y: y, z: z)
        AXSomeStubProtocolYSomeStubProtocolZSomeStubProtocolVoidReceivedInvocations.append((x: x, y: y, z: z))
        AXSomeStubProtocolYSomeStubProtocolZSomeStubProtocolVoidClosure?(x, y, z)
    }

    //MARK: - b

    var BXSomeStubProtocolYSomeStubProtocolZSomeStubProtocolStringCallsCount = 0
    var BXSomeStubProtocolYSomeStubProtocolZSomeStubProtocolStringCalled: Bool {
        return BXSomeStubProtocolYSomeStubProtocolZSomeStubProtocolStringCallsCount > 0
    }
    var BXSomeStubProtocolYSomeStubProtocolZSomeStubProtocolStringReceivedArguments: (x: (any StubProtocol)?, y: (any StubProtocol)?, z: any StubProtocol)?
    var BXSomeStubProtocolYSomeStubProtocolZSomeStubProtocolStringReceivedInvocations: [(x: (any StubProtocol)?, y: (any StubProtocol)?, z: any StubProtocol)] = []
    var BXSomeStubProtocolYSomeStubProtocolZSomeStubProtocolStringReturnValue: String!
    var BXSomeStubProtocolYSomeStubProtocolZSomeStubProtocolStringClosure: (((any StubProtocol)?, (any StubProtocol)?, any StubProtocol) async -> String)?

    func b(x: (some StubProtocol)?, y: (some StubProtocol)!, z: some StubProtocol) async -> String {
        BXSomeStubProtocolYSomeStubProtocolZSomeStubProtocolStringCallsCount += 1
        BXSomeStubProtocolYSomeStubProtocolZSomeStubProtocolStringReceivedArguments = (x: x, y: y, z: z)
        BXSomeStubProtocolYSomeStubProtocolZSomeStubProtocolStringReceivedInvocations.append((x: x, y: y, z: z))
        if let BXSomeStubProtocolYSomeStubProtocolZSomeStubProtocolStringClosure = BXSomeStubProtocolYSomeStubProtocolZSomeStubProtocolStringClosure {
            return await BXSomeStubProtocolYSomeStubProtocolZSomeStubProtocolStringClosure(x, y, z)
        } else {
            return BXSomeStubProtocolYSomeStubProtocolZSomeStubProtocolStringReturnValue
        }
    }

    //MARK: - someConfusingFuncName

    var SomeConfusingFuncNameXSomeStubProtocolVoidCallsCount = 0
    var SomeConfusingFuncNameXSomeStubProtocolVoidCalled: Bool {
        return SomeConfusingFuncNameXSomeStubProtocolVoidCallsCount > 0
    }
    var SomeConfusingFuncNameXSomeStubProtocolVoidReceivedX: (any StubProtocol)?
    var SomeConfusingFuncNameXSomeStubProtocolVoidReceivedInvocations: [(any StubProtocol)] = []
    var SomeConfusingFuncNameXSomeStubProtocolVoidClosure: ((any StubProtocol) -> Void)?

    func someConfusingFuncName(x: some StubProtocol) {
        SomeConfusingFuncNameXSomeStubProtocolVoidCallsCount += 1
        SomeConfusingFuncNameXSomeStubProtocolVoidReceivedX = x
        SomeConfusingFuncNameXSomeStubProtocolVoidReceivedInvocations.append(x)
        SomeConfusingFuncNameXSomeStubProtocolVoidClosure?(x)
    }

    //MARK: - c

    var CSomeConfusingArgumentNameSomeStubProtocolVoidCallsCount = 0
    var CSomeConfusingArgumentNameSomeStubProtocolVoidCalled: Bool {
        return CSomeConfusingArgumentNameSomeStubProtocolVoidCallsCount > 0
    }
    var CSomeConfusingArgumentNameSomeStubProtocolVoidReceivedSomeConfusingArgumentName: (any StubProtocol)?
    var CSomeConfusingArgumentNameSomeStubProtocolVoidReceivedInvocations: [(any StubProtocol)] = []
    var CSomeConfusingArgumentNameSomeStubProtocolVoidClosure: ((any StubProtocol) -> Void)?

    func c(someConfusingArgumentName: some StubProtocol) {
        CSomeConfusingArgumentNameSomeStubProtocolVoidCallsCount += 1
        CSomeConfusingArgumentNameSomeStubProtocolVoidReceivedSomeConfusingArgumentName = someConfusingArgumentName
        CSomeConfusingArgumentNameSomeStubProtocolVoidReceivedInvocations.append(someConfusingArgumentName)
        CSomeConfusingArgumentNameSomeStubProtocolVoidClosure?(someConfusingArgumentName)
    }

    //MARK: - d

    var DXSomeStubWithSomeNameProtocolVoidCallsCount = 0
    var DXSomeStubWithSomeNameProtocolVoidCalled: Bool {
        return DXSomeStubWithSomeNameProtocolVoidCallsCount > 0
    }
    var DXSomeStubWithSomeNameProtocolVoidReceivedX: (any StubWithSomeNameProtocol)?
    var DXSomeStubWithSomeNameProtocolVoidReceivedInvocations: [(any StubWithSomeNameProtocol)?] = []
    var DXSomeStubWithSomeNameProtocolVoidClosure: (((any StubWithSomeNameProtocol)?) -> Void)?

    func d(_ x: (some StubWithSomeNameProtocol)?) {
        DXSomeStubWithSomeNameProtocolVoidCallsCount += 1
        DXSomeStubWithSomeNameProtocolVoidReceivedX = x
        DXSomeStubWithSomeNameProtocolVoidReceivedInvocations.append(x)
        DXSomeStubWithSomeNameProtocolVoidClosure?(x)
    }

}
class StaticMethodProtocolMock: StaticMethodProtocol {



    static func reset()
    {
         //MARK: - staticFunction
        StaticFunctionStringStringCallsCount = 0
        StaticFunctionStringStringReceived = nil
        StaticFunctionStringStringReceivedInvocations = []
        StaticFunctionStringStringClosure = nil


    }

    //MARK: - staticFunction

    static var StaticFunctionStringStringCallsCount = 0
    static var StaticFunctionStringStringCalled: Bool {
        return StaticFunctionStringStringCallsCount > 0
    }
    static var StaticFunctionStringStringReceived: (String)?
    static var StaticFunctionStringStringReceivedInvocations: [(String)] = []
    static var StaticFunctionStringStringReturnValue: String!
    static var StaticFunctionStringStringClosure: ((String) -> String)?

    static func staticFunction(_ : String) -> String {
        StaticFunctionStringStringCallsCount += 1
        StaticFunctionStringStringReceived = 
        StaticFunctionStringStringReceivedInvocations.append()
        if let StaticFunctionStringStringClosure = StaticFunctionStringStringClosure {
            return StaticFunctionStringStringClosure()
        } else {
            return StaticFunctionStringStringReturnValue
        }
    }

}
class SubscriptProtocolMock: SubscriptProtocol {
    //MARK: - Subscript #1
    subscript(arg: Int) -> String {
        get { fatalError("Subscripts are not fully supported yet") }
        set { fatalError("Subscripts are not fully supported yet") }
    }
    //MARK: - Subscript #2
    subscript<T>(arg: T) -> Int {
        get { fatalError("Subscripts are not fully supported yet") }
    }
    //MARK: - Subscript #3
    subscript<T>(arg: T) -> String {
        get async { fatalError("Subscripts are not fully supported yet") }
    }
    //MARK: - Subscript #4
    subscript<T: Hashable>(arg: T) -> T? {
        get { fatalError("Subscripts are not fully supported yet") }
        set { fatalError("Subscripts are not fully supported yet") }
    }
    //MARK: - Subscript #5
    subscript<T>(arg: String) -> T? where T : Cancellable {
        get throws { fatalError("Subscripts are not fully supported yet") }
    }
}
class ThrowableProtocolMock: ThrowableProtocol {




    //MARK: - doOrThrow

    var DoOrThrowStringThrowableError: Error?
    var DoOrThrowStringCallsCount = 0
    var DoOrThrowStringCalled: Bool {
        return DoOrThrowStringCallsCount > 0
    }
    var DoOrThrowStringReturnValue: String!
    var DoOrThrowStringClosure: (() throws -> String)?

    func doOrThrow() throws -> String {
        DoOrThrowStringCallsCount += 1
        if let error = DoOrThrowStringThrowableError {
            throw error
        }
        if let DoOrThrowStringClosure = DoOrThrowStringClosure {
            return try DoOrThrowStringClosure()
        } else {
            return DoOrThrowStringReturnValue
        }
    }

    //MARK: - doOrThrowVoid

    var DoOrThrowVoidVoidThrowableError: Error?
    var DoOrThrowVoidVoidCallsCount = 0
    var DoOrThrowVoidVoidCalled: Bool {
        return DoOrThrowVoidVoidCallsCount > 0
    }
    var DoOrThrowVoidVoidClosure: (() throws -> Void)?

    func doOrThrowVoid() throws {
        DoOrThrowVoidVoidCallsCount += 1
        if let error = DoOrThrowVoidVoidThrowableError {
            throw error
        }
        try DoOrThrowVoidVoidClosure?()
    }

}
class ThrowingVariablesProtocolMock: ThrowingVariablesProtocol {


    var titleCallsCount = 0
    var titleCalled: Bool {
        return titleCallsCount > 0
    }

    var title: String? {
        get throws {
            titleCallsCount += 1
            if let error = titleThrowableError {
                throw error
            }
            if let titleClosure = titleClosure {
                return try titleClosure()
            } else {
                return underlyingTitle
            }
        }
    }
    var underlyingTitle: String?
    var titleThrowableError: Error?
    var titleClosure: (() throws -> String?)?
    var firstNameCallsCount = 0
    var firstNameCalled: Bool {
        return firstNameCallsCount > 0
    }

    var firstName: String {
        get throws {
            firstNameCallsCount += 1
            if let error = firstNameThrowableError {
                throw error
            }
            if let firstNameClosure = firstNameClosure {
                return try firstNameClosure()
            } else {
                return underlyingFirstName
            }
        }
    }
    var underlyingFirstName: String!
    var firstNameThrowableError: Error?
    var firstNameClosure: (() throws -> String)?


}
class VariablesProtocolMock: VariablesProtocol {


    var company: String?
    var name: String {
        get { return underlyingName }
        set(value) { underlyingName = value }
    }
    var underlyingName: (String)!
    var age: Int {
        get { return underlyingAge }
        set(value) { underlyingAge = value }
    }
    var underlyingAge: (Int)!
    var kids: [String] = []
    var universityMarks: [String: Int] = [:]


}
