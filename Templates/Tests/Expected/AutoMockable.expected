// Generated using Sourcery 2.1.2 â€” https://github.com/krzysztofzablocki/Sourcery
// DO NOT EDIT
// swiftlint:disable line_length
// swiftlint:disable variable_name

import Foundation
#if os(iOS) || os(tvOS) || os(watchOS)
import UIKit
#elseif os(OSX)
import AppKit
#endif

public class AccessLevelProtocolMock: AccessLevelProtocol {

    public init() {}

    public var company: String?
    public var name: String {
        get { return underlyingName }
        set(value) { underlyingName = value }
    }
    public var underlyingName: (String)!


    //MARK: - loadConfiguration

    public var loadConfigurationCallsCount = 0
    public var loadConfigurationCalled: Bool {
        return loadConfigurationCallsCount > 0
    }
    public var loadConfigurationReturnValue: String?
    public var loadConfigurationClosure: (() -> String?)?

    public func loadConfiguration() -> String? {
        loadConfigurationCallsCount += 1
        if let loadConfigurationClosure = loadConfigurationClosure {
            return loadConfigurationClosure()
        } else {
            return loadConfigurationReturnValue
        }
    }

}
class AnnotatedProtocolMock: AnnotatedProtocol {




    //MARK: - sayHelloWith

    var sayHelloWithNameStringCallsCount = 0
    var sayHelloWithNameStringCalled: Bool {
        return sayHelloWithNameStringCallsCount > 0
    }
    var sayHelloWithNameStringReceivedName: (String)?
    var sayHelloWithNameStringReceivedInvocations: [(String)] = []
    var sayHelloWithNameStringClosure: ((String) -> Void)?

    func sayHelloWith(name: String) {
        sayHelloWithNameStringCallsCount += 1
        sayHelloWithNameStringReceivedName = name
        sayHelloWithNameStringReceivedInvocations.append(name)
        sayHelloWithNameStringClosure?(name)
    }

}
class AnyProtocolMock: AnyProtocol {


    var a: any StubProtocol {
        get { return underlyingA }
        set(value) { underlyingA = value }
    }
    var underlyingA: (any StubProtocol)!
    var b: (any StubProtocol)?
    var c: (any StubProtocol)!
    var d: (((any StubProtocol)?) -> Void) {
        get { return underlyingD }
        set(value) { underlyingD = value }
    }
    var underlyingD: ((((any StubProtocol)?) -> Void))!
    var e: [(any StubProtocol)?] = []
    var g: any StubProtocol {
        get { return underlyingG }
        set(value) { underlyingG = value }
    }
    var underlyingG: (any StubProtocol)!
    var h: (any StubProtocol)?
    var i: (any StubProtocol)!
    var anyConfusingPropertyName: any StubProtocol {
        get { return underlyingAnyConfusingPropertyName }
        set(value) { underlyingAnyConfusingPropertyName = value }
    }
    var underlyingAnyConfusingPropertyName: (any StubProtocol)!
    var o: any StubWithAnyNameProtocol {
        get { return underlyingO }
        set(value) { underlyingO = value }
    }
    var underlyingO: (any StubWithAnyNameProtocol)!


    //MARK: - f

    var fxAnyStubProtocolYAnyStubProtocolZAnyStubProtocolCallsCount = 0
    var fxAnyStubProtocolYAnyStubProtocolZAnyStubProtocolCalled: Bool {
        return fxAnyStubProtocolYAnyStubProtocolZAnyStubProtocolCallsCount > 0
    }
    var fxAnyStubProtocolYAnyStubProtocolZAnyStubProtocolReceivedArguments: (x: (any StubProtocol)?, y: (any StubProtocol)?, z: any StubProtocol)?
    var fxAnyStubProtocolYAnyStubProtocolZAnyStubProtocolReceivedInvocations: [(x: (any StubProtocol)?, y: (any StubProtocol)?, z: any StubProtocol)] = []
    var fxAnyStubProtocolYAnyStubProtocolZAnyStubProtocolClosure: (((any StubProtocol)?, (any StubProtocol)?, any StubProtocol) -> Void)?

    func f(_ x: (any StubProtocol)?, y: (any StubProtocol)!, z: any StubProtocol) {
        fxAnyStubProtocolYAnyStubProtocolZAnyStubProtocolCallsCount += 1
        fxAnyStubProtocolYAnyStubProtocolZAnyStubProtocolReceivedArguments = (x: x, y: y, z: z)
        fxAnyStubProtocolYAnyStubProtocolZAnyStubProtocolReceivedInvocations.append((x: x, y: y, z: z))
        fxAnyStubProtocolYAnyStubProtocolZAnyStubProtocolClosure?(x, y, z)
    }

    //MARK: - j

    var jxAnyStubProtocolYAnyStubProtocolZAnyStubProtocolCallsCount = 0
    var jxAnyStubProtocolYAnyStubProtocolZAnyStubProtocolCalled: Bool {
        return jxAnyStubProtocolYAnyStubProtocolZAnyStubProtocolCallsCount > 0
    }
    var jxAnyStubProtocolYAnyStubProtocolZAnyStubProtocolReceivedArguments: (x: (any StubProtocol)?, y: (any StubProtocol)?, z: any StubProtocol)?
    var jxAnyStubProtocolYAnyStubProtocolZAnyStubProtocolReceivedInvocations: [(x: (any StubProtocol)?, y: (any StubProtocol)?, z: any StubProtocol)] = []
    var jxAnyStubProtocolYAnyStubProtocolZAnyStubProtocolReturnValue: String!
    var jxAnyStubProtocolYAnyStubProtocolZAnyStubProtocolClosure: (((any StubProtocol)?, (any StubProtocol)?, any StubProtocol) async -> String)?

    func j(x: (any StubProtocol)?, y: (any StubProtocol)!, z: any StubProtocol) async -> String {
        jxAnyStubProtocolYAnyStubProtocolZAnyStubProtocolCallsCount += 1
        jxAnyStubProtocolYAnyStubProtocolZAnyStubProtocolReceivedArguments = (x: x, y: y, z: z)
        jxAnyStubProtocolYAnyStubProtocolZAnyStubProtocolReceivedInvocations.append((x: x, y: y, z: z))
        if let jxAnyStubProtocolYAnyStubProtocolZAnyStubProtocolClosure = jxAnyStubProtocolYAnyStubProtocolZAnyStubProtocolClosure {
            return await jxAnyStubProtocolYAnyStubProtocolZAnyStubProtocolClosure(x, y, z)
        } else {
            return jxAnyStubProtocolYAnyStubProtocolZAnyStubProtocolReturnValue
        }
    }

    //MARK: - k

    var kxAnyStubProtocolVoidYAnyStubProtocolVoidCallsCount = 0
    var kxAnyStubProtocolVoidYAnyStubProtocolVoidCalled: Bool {
        return kxAnyStubProtocolVoidYAnyStubProtocolVoidCallsCount > 0
    }
    var kxAnyStubProtocolVoidYAnyStubProtocolVoidClosure: ((((any StubProtocol)?) -> Void, (any StubProtocol) -> Void) -> Void)?

    func k(x: ((any StubProtocol)?) -> Void, y: (any StubProtocol) -> Void) {
        kxAnyStubProtocolVoidYAnyStubProtocolVoidCallsCount += 1
        kxAnyStubProtocolVoidYAnyStubProtocolVoidClosure?(x, y)
    }

    //MARK: - l

    var lxAnyStubProtocolVoidYAnyStubProtocolVoidCallsCount = 0
    var lxAnyStubProtocolVoidYAnyStubProtocolVoidCalled: Bool {
        return lxAnyStubProtocolVoidYAnyStubProtocolVoidCallsCount > 0
    }
    var lxAnyStubProtocolVoidYAnyStubProtocolVoidClosure: ((((any StubProtocol)?) -> Void, (any StubProtocol) -> Void) -> Void)?

    func l(x: ((any StubProtocol)?) -> Void, y: (any StubProtocol) -> Void) {
        lxAnyStubProtocolVoidYAnyStubProtocolVoidCallsCount += 1
        lxAnyStubProtocolVoidYAnyStubProtocolVoidClosure?(x, y)
    }

    //MARK: - m

    var mAnyConfusingArgumentNameAnyStubProtocolCallsCount = 0
    var mAnyConfusingArgumentNameAnyStubProtocolCalled: Bool {
        return mAnyConfusingArgumentNameAnyStubProtocolCallsCount > 0
    }
    var mAnyConfusingArgumentNameAnyStubProtocolReceivedAnyConfusingArgumentName: (any StubProtocol)?
    var mAnyConfusingArgumentNameAnyStubProtocolReceivedInvocations: [(any StubProtocol)] = []
    var mAnyConfusingArgumentNameAnyStubProtocolClosure: ((any StubProtocol) -> Void)?

    func m(anyConfusingArgumentName: any StubProtocol) {
        mAnyConfusingArgumentNameAnyStubProtocolCallsCount += 1
        mAnyConfusingArgumentNameAnyStubProtocolReceivedAnyConfusingArgumentName = anyConfusingArgumentName
        mAnyConfusingArgumentNameAnyStubProtocolReceivedInvocations.append(anyConfusingArgumentName)
        mAnyConfusingArgumentNameAnyStubProtocolClosure?(anyConfusingArgumentName)
    }

    //MARK: - n

    var nxEscapingAnyStubProtocolVoidCallsCount = 0
    var nxEscapingAnyStubProtocolVoidCalled: Bool {
        return nxEscapingAnyStubProtocolVoidCallsCount > 0
    }
    var nxEscapingAnyStubProtocolVoidReceivedX: ((((any StubProtocol)?) -> Void))?
    var nxEscapingAnyStubProtocolVoidReceivedInvocations: [((((any StubProtocol)?) -> Void))] = []
    var nxEscapingAnyStubProtocolVoidClosure: ((@escaping ((any StubProtocol)?) -> Void) -> Void)?

    func n(x: @escaping ((any StubProtocol)?) -> Void) {
        nxEscapingAnyStubProtocolVoidCallsCount += 1
        nxEscapingAnyStubProtocolVoidReceivedX = x
        nxEscapingAnyStubProtocolVoidReceivedInvocations.append(x)
        nxEscapingAnyStubProtocolVoidClosure?(x)
    }

    //MARK: - p

    var pxAnyStubWithAnyNameProtocolCallsCount = 0
    var pxAnyStubWithAnyNameProtocolCalled: Bool {
        return pxAnyStubWithAnyNameProtocolCallsCount > 0
    }
    var pxAnyStubWithAnyNameProtocolReceivedX: (any StubWithAnyNameProtocol)?
    var pxAnyStubWithAnyNameProtocolReceivedInvocations: [(any StubWithAnyNameProtocol)?] = []
    var pxAnyStubWithAnyNameProtocolClosure: (((any StubWithAnyNameProtocol)?) -> Void)?

    func p(_ x: (any StubWithAnyNameProtocol)?) {
        pxAnyStubWithAnyNameProtocolCallsCount += 1
        pxAnyStubWithAnyNameProtocolReceivedX = x
        pxAnyStubWithAnyNameProtocolReceivedInvocations.append(x)
        pxAnyStubWithAnyNameProtocolClosure?(x)
    }

    //MARK: - q

    var qCallsCount = 0
    var qCalled: Bool {
        return qCallsCount > 0
    }
    var qReturnValue: (any StubProtocol)!
    var qClosure: (() -> any StubProtocol)?

    func q() -> any StubProtocol {
        qCallsCount += 1
        if let qClosure = qClosure {
            return qClosure()
        } else {
            return qReturnValue
        }
    }

    //MARK: - r

    var rCallsCount = 0
    var rCalled: Bool {
        return rCallsCount > 0
    }
    var rReturnValue: ((any StubProtocol)?)
    var rClosure: (() -> (any StubProtocol)?)?

    func r() -> (any StubProtocol)? {
        rCallsCount += 1
        if let rClosure = rClosure {
            return rClosure()
        } else {
            return rReturnValue
        }
    }

    //MARK: - s

    var sCallsCount = 0
    var sCalled: Bool {
        return sCallsCount > 0
    }
    var sReturnValue: (() -> any StubProtocol)!
    var sClosure: (() -> () -> any StubProtocol)?

    func s() -> () -> any StubProtocol {
        sCallsCount += 1
        if let sClosure = sClosure {
            return sClosure()
        } else {
            return sReturnValue
        }
    }

    //MARK: - t

    var tCallsCount = 0
    var tCalled: Bool {
        return tCallsCount > 0
    }
    var tReturnValue: ((() -> (any StubProtocol)?))!
    var tClosure: (() -> (() -> (any StubProtocol)?))?

    func t() -> (() -> (any StubProtocol)?) {
        tCallsCount += 1
        if let tClosure = tClosure {
            return tClosure()
        } else {
            return tReturnValue
        }
    }

    //MARK: - u

    var uCallsCount = 0
    var uCalled: Bool {
        return uCallsCount > 0
    }
    var uReturnValue: ((Int, () -> (any StubProtocol)?))!
    var uClosure: (() -> (Int, () -> (any StubProtocol)?))?

    func u() -> (Int, () -> (any StubProtocol)?) {
        uCallsCount += 1
        if let uClosure = uClosure {
            return uClosure()
        } else {
            return uReturnValue
        }
    }

    //MARK: - v

    var vCallsCount = 0
    var vCalled: Bool {
        return vCallsCount > 0
    }
    var vReturnValue: ((Int, (() -> any StubProtocol)?))!
    var vClosure: (() -> (Int, (() -> any StubProtocol)?))?

    func v() -> (Int, (() -> any StubProtocol)?) {
        vCallsCount += 1
        if let vClosure = vClosure {
            return vClosure()
        } else {
            return vReturnValue
        }
    }

    //MARK: - w

    var wCallsCount = 0
    var wCalled: Bool {
        return wCallsCount > 0
    }
    var wReturnValue: ([(any StubProtocol)?])!
    var wClosure: (() -> [(any StubProtocol)?])?

    func w() -> [(any StubProtocol)?] {
        wCallsCount += 1
        if let wClosure = wClosure {
            return wClosure()
        } else {
            return wReturnValue
        }
    }

    //MARK: - x

    var xCallsCount = 0
    var xCalled: Bool {
        return xCallsCount > 0
    }
    var xReturnValue: ([String: (any StubProtocol)?])!
    var xClosure: (() -> [String: (any StubProtocol)?])?

    func x() -> [String: (any StubProtocol)?] {
        xCallsCount += 1
        if let xClosure = xClosure {
            return xClosure()
        } else {
            return xReturnValue
        }
    }

    //MARK: - y

    var yCallsCount = 0
    var yCalled: Bool {
        return yCallsCount > 0
    }
    var yReturnValue: ((any StubProtocol, (any StubProtocol)?))!
    var yClosure: (() -> (any StubProtocol, (any StubProtocol)?))?

    func y() -> (any StubProtocol, (any StubProtocol)?) {
        yCallsCount += 1
        if let yClosure = yClosure {
            return yClosure()
        } else {
            return yReturnValue
        }
    }

    //MARK: - z

    var zCallsCount = 0
    var zCalled: Bool {
        return zCallsCount > 0
    }
    var zReturnValue: (any StubProtocol & CustomStringConvertible)!
    var zClosure: (() -> any StubProtocol & CustomStringConvertible)?

    func z() -> any StubProtocol & CustomStringConvertible {
        zCallsCount += 1
        if let zClosure = zClosure {
            return zClosure()
        } else {
            return zReturnValue
        }
    }

}
class AsyncProtocolMock: AsyncProtocol {




    //MARK: - callAsync

    var callAsyncParameterIntCallsCount = 0
    var callAsyncParameterIntCalled: Bool {
        return callAsyncParameterIntCallsCount > 0
    }
    var callAsyncParameterIntReceivedParameter: (Int)?
    var callAsyncParameterIntReceivedInvocations: [(Int)] = []
    var callAsyncParameterIntReturnValue: String!
    var callAsyncParameterIntClosure: ((Int) async -> String)?

    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    func callAsync(parameter: Int) async -> String {
        callAsyncParameterIntCallsCount += 1
        callAsyncParameterIntReceivedParameter = parameter
        callAsyncParameterIntReceivedInvocations.append(parameter)
        if let callAsyncParameterIntClosure = callAsyncParameterIntClosure {
            return await callAsyncParameterIntClosure(parameter)
        } else {
            return callAsyncParameterIntReturnValue
        }
    }

    //MARK: - callAsyncAndThrow

    var callAsyncAndThrowParameterIntThrowableError: Error?
    var callAsyncAndThrowParameterIntCallsCount = 0
    var callAsyncAndThrowParameterIntCalled: Bool {
        return callAsyncAndThrowParameterIntCallsCount > 0
    }
    var callAsyncAndThrowParameterIntReceivedParameter: (Int)?
    var callAsyncAndThrowParameterIntReceivedInvocations: [(Int)] = []
    var callAsyncAndThrowParameterIntReturnValue: String!
    var callAsyncAndThrowParameterIntClosure: ((Int) async throws -> String)?

    func callAsyncAndThrow(parameter: Int) async throws -> String {
        callAsyncAndThrowParameterIntCallsCount += 1
        callAsyncAndThrowParameterIntReceivedParameter = parameter
        callAsyncAndThrowParameterIntReceivedInvocations.append(parameter)
        if let error = callAsyncAndThrowParameterIntThrowableError {
            throw error
        }
        if let callAsyncAndThrowParameterIntClosure = callAsyncAndThrowParameterIntClosure {
            return try await callAsyncAndThrowParameterIntClosure(parameter)
        } else {
            return callAsyncAndThrowParameterIntReturnValue
        }
    }

    //MARK: - callAsyncVoid

    var callAsyncVoidParameterIntCallsCount = 0
    var callAsyncVoidParameterIntCalled: Bool {
        return callAsyncVoidParameterIntCallsCount > 0
    }
    var callAsyncVoidParameterIntReceivedParameter: (Int)?
    var callAsyncVoidParameterIntReceivedInvocations: [(Int)] = []
    var callAsyncVoidParameterIntClosure: ((Int) async -> Void)?

    func callAsyncVoid(parameter: Int) async {
        callAsyncVoidParameterIntCallsCount += 1
        callAsyncVoidParameterIntReceivedParameter = parameter
        callAsyncVoidParameterIntReceivedInvocations.append(parameter)
        await callAsyncVoidParameterIntClosure?(parameter)
    }

    //MARK: - callAsyncAndThrowVoid

    var callAsyncAndThrowVoidParameterIntThrowableError: Error?
    var callAsyncAndThrowVoidParameterIntCallsCount = 0
    var callAsyncAndThrowVoidParameterIntCalled: Bool {
        return callAsyncAndThrowVoidParameterIntCallsCount > 0
    }
    var callAsyncAndThrowVoidParameterIntReceivedParameter: (Int)?
    var callAsyncAndThrowVoidParameterIntReceivedInvocations: [(Int)] = []
    var callAsyncAndThrowVoidParameterIntClosure: ((Int) async throws -> Void)?

    func callAsyncAndThrowVoid(parameter: Int) async throws {
        callAsyncAndThrowVoidParameterIntCallsCount += 1
        callAsyncAndThrowVoidParameterIntReceivedParameter = parameter
        callAsyncAndThrowVoidParameterIntReceivedInvocations.append(parameter)
        if let error = callAsyncAndThrowVoidParameterIntThrowableError {
            throw error
        }
        try await callAsyncAndThrowVoidParameterIntClosure?(parameter)
    }

}
class AsyncThrowingVariablesProtocolMock: AsyncThrowingVariablesProtocol {


    var titleCallsCount = 0
    var titleCalled: Bool {
        return titleCallsCount > 0
    }

    var title: String? {
        get async throws {
            titleCallsCount += 1
            if let error = titleThrowableError {
                throw error
            }
            if let titleClosure = titleClosure {
                return try await titleClosure()
            } else {
                return underlyingTitle
            }
        }
    }
    var underlyingTitle: String?
    var titleThrowableError: Error?
    var titleClosure: (() async throws -> String?)?
    var firstNameCallsCount = 0
    var firstNameCalled: Bool {
        return firstNameCallsCount > 0
    }

    var firstName: String {
        get async throws {
            firstNameCallsCount += 1
            if let error = firstNameThrowableError {
                throw error
            }
            if let firstNameClosure = firstNameClosure {
                return try await firstNameClosure()
            } else {
                return underlyingFirstName
            }
        }
    }
    var underlyingFirstName: String!
    var firstNameThrowableError: Error?
    var firstNameClosure: (() async throws -> String)?


}
class AsyncVariablesProtocolMock: AsyncVariablesProtocol {


    var titleCallsCount = 0
    var titleCalled: Bool {
        return titleCallsCount > 0
    }

    var title: String? {
        get async {
            titleCallsCount += 1
            if let titleClosure = titleClosure {
                return await titleClosure()
            } else {
                return underlyingTitle
            }
        }
    }
    var underlyingTitle: String?
    var titleClosure: (() async -> String?)?
    var firstNameCallsCount = 0
    var firstNameCalled: Bool {
        return firstNameCallsCount > 0
    }

    var firstName: String {
        get async {
            firstNameCallsCount += 1
            if let firstNameClosure = firstNameClosure {
                return await firstNameClosure()
            } else {
                return underlyingFirstName
            }
        }
    }
    var underlyingFirstName: String!
    var firstNameClosure: (() async -> String)?


}
class BasicProtocolMock: BasicProtocol {




    //MARK: - loadConfiguration

    var loadConfigurationCallsCount = 0
    var loadConfigurationCalled: Bool {
        return loadConfigurationCallsCount > 0
    }
    var loadConfigurationReturnValue: String?
    var loadConfigurationClosure: (() -> String?)?

    func loadConfiguration() -> String? {
        loadConfigurationCallsCount += 1
        if let loadConfigurationClosure = loadConfigurationClosure {
            return loadConfigurationClosure()
        } else {
            return loadConfigurationReturnValue
        }
    }

    //MARK: - save

    var saveConfigurationStringCallsCount = 0
    var saveConfigurationStringCalled: Bool {
        return saveConfigurationStringCallsCount > 0
    }
    var saveConfigurationStringReceivedConfiguration: (String)?
    var saveConfigurationStringReceivedInvocations: [(String)] = []
    var saveConfigurationStringClosure: ((String) -> Void)?

    func save(configuration: String) {
        saveConfigurationStringCallsCount += 1
        saveConfigurationStringReceivedConfiguration = configuration
        saveConfigurationStringReceivedInvocations.append(configuration)
        saveConfigurationStringClosure?(configuration)
    }

}
class ClosureProtocolMock: ClosureProtocol {




    //MARK: - setClosure

    var setClosureClosureEscapingVoidCallsCount = 0
    var setClosureClosureEscapingVoidCalled: Bool {
        return setClosureClosureEscapingVoidCallsCount > 0
    }
    var setClosureClosureEscapingVoidReceivedClosure: ((() -> Void))?
    var setClosureClosureEscapingVoidReceivedInvocations: [((() -> Void))] = []
    var setClosureClosureEscapingVoidClosure: ((@escaping () -> Void) -> Void)?

    func setClosure(_ closure: @escaping () -> Void) {
        setClosureClosureEscapingVoidCallsCount += 1
        setClosureClosureEscapingVoidReceivedClosure = closure
        setClosureClosureEscapingVoidReceivedInvocations.append(closure)
        setClosureClosureEscapingVoidClosure?(closure)
    }

}
class CurrencyPresenterMock: CurrencyPresenter {




    //MARK: - showSourceCurrency

    var showSourceCurrencyCurrencyStringCallsCount = 0
    var showSourceCurrencyCurrencyStringCalled: Bool {
        return showSourceCurrencyCurrencyStringCallsCount > 0
    }
    var showSourceCurrencyCurrencyStringReceivedCurrency: (String)?
    var showSourceCurrencyCurrencyStringReceivedInvocations: [(String)] = []
    var showSourceCurrencyCurrencyStringClosure: ((String) -> Void)?

    func showSourceCurrency(_ currency: String) {
        showSourceCurrencyCurrencyStringCallsCount += 1
        showSourceCurrencyCurrencyStringReceivedCurrency = currency
        showSourceCurrencyCurrencyStringReceivedInvocations.append(currency)
        showSourceCurrencyCurrencyStringClosure?(currency)
    }

}
class ExtendableProtocolMock: ExtendableProtocol {


    var canReport: Bool {
        get { return underlyingCanReport }
        set(value) { underlyingCanReport = value }
    }
    var underlyingCanReport: (Bool)!


    //MARK: - report

    var reportMessageStringCallsCount = 0
    var reportMessageStringCalled: Bool {
        return reportMessageStringCallsCount > 0
    }
    var reportMessageStringReceivedMessage: (String)?
    var reportMessageStringReceivedInvocations: [(String)] = []
    var reportMessageStringClosure: ((String) -> Void)?

    func report(message: String) {
        reportMessageStringCallsCount += 1
        reportMessageStringReceivedMessage = message
        reportMessageStringReceivedInvocations.append(message)
        reportMessageStringClosure?(message)
    }

}
class FunctionWithAttributesMock: FunctionWithAttributes {




    //MARK: - callOneAttribute

    var callOneAttributeCallsCount = 0
    var callOneAttributeCalled: Bool {
        return callOneAttributeCallsCount > 0
    }
    var callOneAttributeReturnValue: String!
    var callOneAttributeClosure: (() -> String)?

    @discardableResult
    func callOneAttribute() -> String {
        callOneAttributeCallsCount += 1
        if let callOneAttributeClosure = callOneAttributeClosure {
            return callOneAttributeClosure()
        } else {
            return callOneAttributeReturnValue
        }
    }

    //MARK: - callTwoAttributes

    var callTwoAttributesCallsCount = 0
    var callTwoAttributesCalled: Bool {
        return callTwoAttributesCallsCount > 0
    }
    var callTwoAttributesReturnValue: Int!
    var callTwoAttributesClosure: (() -> Int)?

    @available(macOS 10.15, *)
    @discardableResult
    func callTwoAttributes() -> Int {
        callTwoAttributesCallsCount += 1
        if let callTwoAttributesClosure = callTwoAttributesClosure {
            return callTwoAttributesClosure()
        } else {
            return callTwoAttributesReturnValue
        }
    }

    //MARK: - callRepeatedAttributes

    var callRepeatedAttributesCallsCount = 0
    var callRepeatedAttributesCalled: Bool {
        return callRepeatedAttributesCallsCount > 0
    }
    var callRepeatedAttributesReturnValue: Bool!
    var callRepeatedAttributesClosure: (() -> Bool)?

    @available(iOS 13.0, *)
    @available(macOS 10.15, *)
    @discardableResult
    func callRepeatedAttributes() -> Bool {
        callRepeatedAttributesCallsCount += 1
        if let callRepeatedAttributesClosure = callRepeatedAttributesClosure {
            return callRepeatedAttributesClosure()
        } else {
            return callRepeatedAttributesReturnValue
        }
    }

}
class FunctionWithClosureReturnTypeMock: FunctionWithClosureReturnType {




    //MARK: - get

    var getCallsCount = 0
    var getCalled: Bool {
        return getCallsCount > 0
    }
    var getReturnValue: (() -> Void)!
    var getClosure: (() -> () -> Void)?

    func get() -> () -> Void {
        getCallsCount += 1
        if let getClosure = getClosure {
            return getClosure()
        } else {
            return getReturnValue
        }
    }

    //MARK: - getOptional

    var getOptionalCallsCount = 0
    var getOptionalCalled: Bool {
        return getOptionalCallsCount > 0
    }
    var getOptionalReturnValue: (() -> Void)?
    var getOptionalClosure: (() -> (() -> Void)?)?

    func getOptional() -> (() -> Void)? {
        getOptionalCallsCount += 1
        if let getOptionalClosure = getOptionalClosure {
            return getOptionalClosure()
        } else {
            return getOptionalReturnValue
        }
    }

}
class FunctionWithMultilineDeclarationMock: FunctionWithMultilineDeclaration {




    //MARK: - start

    var startCarStringOfModelStringCallsCount = 0
    var startCarStringOfModelStringCalled: Bool {
        return startCarStringOfModelStringCallsCount > 0
    }
    var startCarStringOfModelStringReceivedArguments: (car: String, model: String)?
    var startCarStringOfModelStringReceivedInvocations: [(car: String, model: String)] = []
    var startCarStringOfModelStringClosure: ((String, String) -> Void)?

    func start(car: String, of model: String) {
        startCarStringOfModelStringCallsCount += 1
        startCarStringOfModelStringReceivedArguments = (car: car, model: model)
        startCarStringOfModelStringReceivedInvocations.append((car: car, model: model))
        startCarStringOfModelStringClosure?(car, model)
    }

}
class HouseProtocolMock: HouseProtocol {


    var aPublisher: AnyPublisher<any PersonProtocol, Never>?
    var bPublisher: AnyPublisher<(any PersonProtocol)?, Never>?
    var cPublisher: CurrentValueSubject<(any PersonProtocol)?, Never>?
    var dPublisher: PassthroughSubject<(any PersonProtocol)?, Never>?
    var e1Publisher: GenericType<(any PersonProtocol)?, Never, Never>?
    var e2Publisher: GenericType<Never, (any PersonProtocol)?, Never>?
    var e3Publisher: GenericType<Never, Never, (any PersonProtocol)?>?
    var e4Publisher: GenericType<(any PersonProtocol)?, (any PersonProtocol)?, (any PersonProtocol)?>?
    var f1Publisher: GenericType<any PersonProtocol, Never, Never>?
    var f2Publisher: GenericType<Never, any PersonProtocol, Never>?
    var f3Publisher: GenericType<Never, Never, any PersonProtocol>?
    var f4Publisher: GenericType<any PersonProtocol, any PersonProtocol, any PersonProtocol>?


}
class ImplicitlyUnwrappedOptionalReturnValueProtocolMock: ImplicitlyUnwrappedOptionalReturnValueProtocol {




    //MARK: - implicitReturn

    var implicitReturnCallsCount = 0
    var implicitReturnCalled: Bool {
        return implicitReturnCallsCount > 0
    }
    var implicitReturnReturnValue: String!
    var implicitReturnClosure: (() -> String!)?

    func implicitReturn() -> String! {
        implicitReturnCallsCount += 1
        if let implicitReturnClosure = implicitReturnClosure {
            return implicitReturnClosure()
        } else {
            return implicitReturnReturnValue
        }
    }

}
class InitializationProtocolMock: InitializationProtocol {




    //MARK: - init

    var initIntParameterIntStringParameterStringOptionalParameterStringReceivedArguments: (intParameter: Int, stringParameter: String, optionalParameter: String?)?
    var initIntParameterIntStringParameterStringOptionalParameterStringReceivedInvocations: [(intParameter: Int, stringParameter: String, optionalParameter: String?)] = []
    var initIntParameterIntStringParameterStringOptionalParameterStringClosure: ((Int, String, String?) -> Void)?

    required init(intParameter: Int, stringParameter: String, optionalParameter: String?) {
        initIntParameterIntStringParameterStringOptionalParameterStringReceivedArguments = (intParameter: intParameter, stringParameter: stringParameter, optionalParameter: optionalParameter)
        initIntParameterIntStringParameterStringOptionalParameterStringReceivedInvocations.append((intParameter: intParameter, stringParameter: stringParameter, optionalParameter: optionalParameter))
        initIntParameterIntStringParameterStringOptionalParameterStringClosure?(intParameter, stringParameter, optionalParameter)
    }
    //MARK: - start

    var startCallsCount = 0
    var startCalled: Bool {
        return startCallsCount > 0
    }
    var startClosure: (() -> Void)?

    func start() {
        startCallsCount += 1
        startClosure?()
    }

    //MARK: - stop

    var stopCallsCount = 0
    var stopCalled: Bool {
        return stopCallsCount > 0
    }
    var stopClosure: (() -> Void)?

    func stop() {
        stopCallsCount += 1
        stopClosure?()
    }

}
class MultiClosureProtocolMock: MultiClosureProtocol {




    //MARK: - setClosure

    var setClosureNameStringClosureEscapingVoidCallsCount = 0
    var setClosureNameStringClosureEscapingVoidCalled: Bool {
        return setClosureNameStringClosureEscapingVoidCallsCount > 0
    }
    var setClosureNameStringClosureEscapingVoidReceivedArguments: (name: String, closure: () -> Void)?
    var setClosureNameStringClosureEscapingVoidReceivedInvocations: [(name: String, closure: () -> Void)] = []
    var setClosureNameStringClosureEscapingVoidClosure: ((String, @escaping () -> Void) -> Void)?

    func setClosure(name: String, _ closure: @escaping () -> Void) {
        setClosureNameStringClosureEscapingVoidCallsCount += 1
        setClosureNameStringClosureEscapingVoidReceivedArguments = (name: name, closure: closure)
        setClosureNameStringClosureEscapingVoidReceivedInvocations.append((name: name, closure: closure))
        setClosureNameStringClosureEscapingVoidClosure?(name, closure)
    }

}
class MultiNonEscapingClosureProtocolMock: MultiNonEscapingClosureProtocol {




    //MARK: - executeClosure

    var executeClosureNameStringClosureVoidCallsCount = 0
    var executeClosureNameStringClosureVoidCalled: Bool {
        return executeClosureNameStringClosureVoidCallsCount > 0
    }
    var executeClosureNameStringClosureVoidClosure: ((String, () -> Void) -> Void)?

    func executeClosure(name: String, _ closure: () -> Void) {
        executeClosureNameStringClosureVoidCallsCount += 1
        executeClosureNameStringClosureVoidClosure?(name, closure)
    }

}
class NonEscapingClosureProtocolMock: NonEscapingClosureProtocol {




    //MARK: - executeClosure

    var executeClosureClosureVoidCallsCount = 0
    var executeClosureClosureVoidCalled: Bool {
        return executeClosureClosureVoidCallsCount > 0
    }
    var executeClosureClosureVoidClosure: ((() -> Void) -> Void)?

    func executeClosure(_ closure: () -> Void) {
        executeClosureClosureVoidCallsCount += 1
        executeClosureClosureVoidClosure?(closure)
    }

}
class ReservedWordsProtocolMock: ReservedWordsProtocol {




    //MARK: - `continue`

    var continueWithMessageStringCallsCount = 0
    var continueWithMessageStringCalled: Bool {
        return continueWithMessageStringCallsCount > 0
    }
    var continueWithMessageStringReceivedMessage: (String)?
    var continueWithMessageStringReceivedInvocations: [(String)] = []
    var continueWithMessageStringReturnValue: String!
    var continueWithMessageStringClosure: ((String) -> String)?

    func `continue`(with message: String) -> String {
        continueWithMessageStringCallsCount += 1
        continueWithMessageStringReceivedMessage = message
        continueWithMessageStringReceivedInvocations.append(message)
        if let continueWithMessageStringClosure = continueWithMessageStringClosure {
            return continueWithMessageStringClosure(message)
        } else {
            return continueWithMessageStringReturnValue
        }
    }

}
class SameShortMethodNamesProtocolMock: SameShortMethodNamesProtocol {




    //MARK: - start

    var startCarStringOfModelStringCallsCount = 0
    var startCarStringOfModelStringCalled: Bool {
        return startCarStringOfModelStringCallsCount > 0
    }
    var startCarStringOfModelStringReceivedArguments: (car: String, model: String)?
    var startCarStringOfModelStringReceivedInvocations: [(car: String, model: String)] = []
    var startCarStringOfModelStringClosure: ((String, String) -> Void)?

    func start(car: String, of model: String) {
        startCarStringOfModelStringCallsCount += 1
        startCarStringOfModelStringReceivedArguments = (car: car, model: model)
        startCarStringOfModelStringReceivedInvocations.append((car: car, model: model))
        startCarStringOfModelStringClosure?(car, model)
    }

    //MARK: - start

    var startPlaneStringOfModelStringCallsCount = 0
    var startPlaneStringOfModelStringCalled: Bool {
        return startPlaneStringOfModelStringCallsCount > 0
    }
    var startPlaneStringOfModelStringReceivedArguments: (plane: String, model: String)?
    var startPlaneStringOfModelStringReceivedInvocations: [(plane: String, model: String)] = []
    var startPlaneStringOfModelStringClosure: ((String, String) -> Void)?

    func start(plane: String, of model: String) {
        startPlaneStringOfModelStringCallsCount += 1
        startPlaneStringOfModelStringReceivedArguments = (plane: plane, model: model)
        startPlaneStringOfModelStringReceivedInvocations.append((plane: plane, model: model))
        startPlaneStringOfModelStringClosure?(plane, model)
    }

}
class SingleOptionalParameterFunctionMock: SingleOptionalParameterFunction {




    //MARK: - send

    var sendMessageStringCallsCount = 0
    var sendMessageStringCalled: Bool {
        return sendMessageStringCallsCount > 0
    }
    var sendMessageStringReceivedMessage: (String)?
    var sendMessageStringReceivedInvocations: [(String)?] = []
    var sendMessageStringClosure: ((String?) -> Void)?

    func send(message: String?) {
        sendMessageStringCallsCount += 1
        sendMessageStringReceivedMessage = message
        sendMessageStringReceivedInvocations.append(message)
        sendMessageStringClosure?(message)
    }

}
class SomeProtocolMock: SomeProtocol {




    //MARK: - a

    var axSomeStubProtocolYSomeStubProtocolZSomeStubProtocolCallsCount = 0
    var axSomeStubProtocolYSomeStubProtocolZSomeStubProtocolCalled: Bool {
        return axSomeStubProtocolYSomeStubProtocolZSomeStubProtocolCallsCount > 0
    }
    var axSomeStubProtocolYSomeStubProtocolZSomeStubProtocolReceivedArguments: (x: (any StubProtocol)?, y: (any StubProtocol)?, z: any StubProtocol)?
    var axSomeStubProtocolYSomeStubProtocolZSomeStubProtocolReceivedInvocations: [(x: (any StubProtocol)?, y: (any StubProtocol)?, z: any StubProtocol)] = []
    var axSomeStubProtocolYSomeStubProtocolZSomeStubProtocolClosure: (((any StubProtocol)?, (any StubProtocol)?, any StubProtocol) -> Void)?

    func a(_ x: (some StubProtocol)?, y: (some StubProtocol)!, z: some StubProtocol) {
        axSomeStubProtocolYSomeStubProtocolZSomeStubProtocolCallsCount += 1
        axSomeStubProtocolYSomeStubProtocolZSomeStubProtocolReceivedArguments = (x: x, y: y, z: z)
        axSomeStubProtocolYSomeStubProtocolZSomeStubProtocolReceivedInvocations.append((x: x, y: y, z: z))
        axSomeStubProtocolYSomeStubProtocolZSomeStubProtocolClosure?(x, y, z)
    }

    //MARK: - b

    var bxSomeStubProtocolYSomeStubProtocolZSomeStubProtocolCallsCount = 0
    var bxSomeStubProtocolYSomeStubProtocolZSomeStubProtocolCalled: Bool {
        return bxSomeStubProtocolYSomeStubProtocolZSomeStubProtocolCallsCount > 0
    }
    var bxSomeStubProtocolYSomeStubProtocolZSomeStubProtocolReceivedArguments: (x: (any StubProtocol)?, y: (any StubProtocol)?, z: any StubProtocol)?
    var bxSomeStubProtocolYSomeStubProtocolZSomeStubProtocolReceivedInvocations: [(x: (any StubProtocol)?, y: (any StubProtocol)?, z: any StubProtocol)] = []
    var bxSomeStubProtocolYSomeStubProtocolZSomeStubProtocolReturnValue: String!
    var bxSomeStubProtocolYSomeStubProtocolZSomeStubProtocolClosure: (((any StubProtocol)?, (any StubProtocol)?, any StubProtocol) async -> String)?

    func b(x: (some StubProtocol)?, y: (some StubProtocol)!, z: some StubProtocol) async -> String {
        bxSomeStubProtocolYSomeStubProtocolZSomeStubProtocolCallsCount += 1
        bxSomeStubProtocolYSomeStubProtocolZSomeStubProtocolReceivedArguments = (x: x, y: y, z: z)
        bxSomeStubProtocolYSomeStubProtocolZSomeStubProtocolReceivedInvocations.append((x: x, y: y, z: z))
        if let bxSomeStubProtocolYSomeStubProtocolZSomeStubProtocolClosure = bxSomeStubProtocolYSomeStubProtocolZSomeStubProtocolClosure {
            return await bxSomeStubProtocolYSomeStubProtocolZSomeStubProtocolClosure(x, y, z)
        } else {
            return bxSomeStubProtocolYSomeStubProtocolZSomeStubProtocolReturnValue
        }
    }

    //MARK: - someConfusingFuncName

    var someConfusingFuncNameXSomeStubProtocolCallsCount = 0
    var someConfusingFuncNameXSomeStubProtocolCalled: Bool {
        return someConfusingFuncNameXSomeStubProtocolCallsCount > 0
    }
    var someConfusingFuncNameXSomeStubProtocolReceivedX: (any StubProtocol)?
    var someConfusingFuncNameXSomeStubProtocolReceivedInvocations: [(any StubProtocol)] = []
    var someConfusingFuncNameXSomeStubProtocolClosure: ((any StubProtocol) -> Void)?

    func someConfusingFuncName(x: some StubProtocol) {
        someConfusingFuncNameXSomeStubProtocolCallsCount += 1
        someConfusingFuncNameXSomeStubProtocolReceivedX = x
        someConfusingFuncNameXSomeStubProtocolReceivedInvocations.append(x)
        someConfusingFuncNameXSomeStubProtocolClosure?(x)
    }

    //MARK: - c

    var cSomeConfusingArgumentNameSomeStubProtocolCallsCount = 0
    var cSomeConfusingArgumentNameSomeStubProtocolCalled: Bool {
        return cSomeConfusingArgumentNameSomeStubProtocolCallsCount > 0
    }
    var cSomeConfusingArgumentNameSomeStubProtocolReceivedSomeConfusingArgumentName: (any StubProtocol)?
    var cSomeConfusingArgumentNameSomeStubProtocolReceivedInvocations: [(any StubProtocol)] = []
    var cSomeConfusingArgumentNameSomeStubProtocolClosure: ((any StubProtocol) -> Void)?

    func c(someConfusingArgumentName: some StubProtocol) {
        cSomeConfusingArgumentNameSomeStubProtocolCallsCount += 1
        cSomeConfusingArgumentNameSomeStubProtocolReceivedSomeConfusingArgumentName = someConfusingArgumentName
        cSomeConfusingArgumentNameSomeStubProtocolReceivedInvocations.append(someConfusingArgumentName)
        cSomeConfusingArgumentNameSomeStubProtocolClosure?(someConfusingArgumentName)
    }

    //MARK: - d

    var dxSomeStubWithSomeNameProtocolCallsCount = 0
    var dxSomeStubWithSomeNameProtocolCalled: Bool {
        return dxSomeStubWithSomeNameProtocolCallsCount > 0
    }
    var dxSomeStubWithSomeNameProtocolReceivedX: (any StubWithSomeNameProtocol)?
    var dxSomeStubWithSomeNameProtocolReceivedInvocations: [(any StubWithSomeNameProtocol)?] = []
    var dxSomeStubWithSomeNameProtocolClosure: (((any StubWithSomeNameProtocol)?) -> Void)?

    func d(_ x: (some StubWithSomeNameProtocol)?) {
        dxSomeStubWithSomeNameProtocolCallsCount += 1
        dxSomeStubWithSomeNameProtocolReceivedX = x
        dxSomeStubWithSomeNameProtocolReceivedInvocations.append(x)
        dxSomeStubWithSomeNameProtocolClosure?(x)
    }

}
class StaticMethodProtocolMock: StaticMethodProtocol {



    static func reset()
    {
         //MARK: - staticFunction
        staticFunctionStringCallsCount = 0
        staticFunctionStringReceived = nil
        staticFunctionStringReceivedInvocations = []
        staticFunctionStringClosure = nil


    }

    //MARK: - staticFunction

    static var staticFunctionStringCallsCount = 0
    static var staticFunctionStringCalled: Bool {
        return staticFunctionStringCallsCount > 0
    }
    static var staticFunctionStringReceived: (String)?
    static var staticFunctionStringReceivedInvocations: [(String)] = []
    static var staticFunctionStringReturnValue: String!
    static var staticFunctionStringClosure: ((String) -> String)?

    static func staticFunction(_ : String) -> String {
        staticFunctionStringCallsCount += 1
        staticFunctionStringReceived = 
        staticFunctionStringReceivedInvocations.append()
        if let staticFunctionStringClosure = staticFunctionStringClosure {
            return staticFunctionStringClosure()
        } else {
            return staticFunctionStringReturnValue
        }
    }

}
class ThrowableProtocolMock: ThrowableProtocol {




    //MARK: - doOrThrow

    var doOrThrowThrowableError: Error?
    var doOrThrowCallsCount = 0
    var doOrThrowCalled: Bool {
        return doOrThrowCallsCount > 0
    }
    var doOrThrowReturnValue: String!
    var doOrThrowClosure: (() throws -> String)?

    func doOrThrow() throws -> String {
        doOrThrowCallsCount += 1
        if let error = doOrThrowThrowableError {
            throw error
        }
        if let doOrThrowClosure = doOrThrowClosure {
            return try doOrThrowClosure()
        } else {
            return doOrThrowReturnValue
        }
    }

    //MARK: - doOrThrowVoid

    var doOrThrowVoidThrowableError: Error?
    var doOrThrowVoidCallsCount = 0
    var doOrThrowVoidCalled: Bool {
        return doOrThrowVoidCallsCount > 0
    }
    var doOrThrowVoidClosure: (() throws -> Void)?

    func doOrThrowVoid() throws {
        doOrThrowVoidCallsCount += 1
        if let error = doOrThrowVoidThrowableError {
            throw error
        }
        try doOrThrowVoidClosure?()
    }

}
class ThrowingVariablesProtocolMock: ThrowingVariablesProtocol {


    var titleCallsCount = 0
    var titleCalled: Bool {
        return titleCallsCount > 0
    }

    var title: String? {
        get throws {
            titleCallsCount += 1
            if let error = titleThrowableError {
                throw error
            }
            if let titleClosure = titleClosure {
                return try titleClosure()
            } else {
                return underlyingTitle
            }
        }
    }
    var underlyingTitle: String?
    var titleThrowableError: Error?
    var titleClosure: (() throws -> String?)?
    var firstNameCallsCount = 0
    var firstNameCalled: Bool {
        return firstNameCallsCount > 0
    }

    var firstName: String {
        get throws {
            firstNameCallsCount += 1
            if let error = firstNameThrowableError {
                throw error
            }
            if let firstNameClosure = firstNameClosure {
                return try firstNameClosure()
            } else {
                return underlyingFirstName
            }
        }
    }
    var underlyingFirstName: String!
    var firstNameThrowableError: Error?
    var firstNameClosure: (() throws -> String)?


}
class VariablesProtocolMock: VariablesProtocol {


    var company: String?
    var name: String {
        get { return underlyingName }
        set(value) { underlyingName = value }
    }
    var underlyingName: (String)!
    var age: Int {
        get { return underlyingAge }
        set(value) { underlyingAge = value }
    }
    var underlyingAge: (Int)!
    var kids: [String] = []
    var universityMarks: [String: Int] = [:]


}
