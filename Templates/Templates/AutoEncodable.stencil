{% macro nameWithTransform name transform %}{% if transform == "camelToSnake" or not transform %}{{ name|camelToSnakeCase }}{% elif transform == "camelToSnake:idToUUID" %}{{ name|camelToSnakeCase|replace:"id","uuid" }}{% elif transform == "idToUUID" %}{{ name|replace:"id","uuid" }}{% endif %}{% endmacro %}
{% macro keyedNameFor type  variable %}{% if variable|annotated:"codingKey" %} = "{{ variable.annotations.codingKey }}"{% elif type|annotated:"codingKeyTransform" %}= "{% call decodeNameWithTransform variable.name type.annotations.codingKeyTransform %}"{% endif %}{% endmacro %}

{% macro convertTypeForEncoder var %}
  {% set encodeCall %}{% if var.isOptional %}encodeIfPresent{% else %}encode{% endif %}{% endset %}
  {% if var|!annotated:"encodingType" %}
    try container.{{ encodeCall }}({{ var.name }}, forKey: .{{ var.name }})
  {% else %}
  {% set typename %}{{ var.typeName.name }}{% endset %}
  {% set encodingType %}{{ var.annotations.encodingType }}{% endset %}
  {% if typename == "Bool" and encodingType == "String" %}
    try container.encode({{ var.name }} ? 'true' : 'false', forKey: .{{ var.name }})
  {% elif typename == "Bool" and encodingType == "Int" %}
    try container.encode({{ var.name }} ? 1 : 0, forKey: .{{ var.name }})
  {% endif %}
  {% endif %}
{% endmacro %}

{% macro encode type %}
  {{ type.accessLevel }} func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: EncodableKeys.self)
    {% for variable in type.instanceVariables where variable|!annotated:"skipCoding" %}
    {% call convertTypeForEncoder variable %}
    {% endfor %}
  }
{% endmacro %}

{% macro codingKeys type %}
  private enum EncodableKeys: String, CodingKey {
    {% for variable in type.instanceVariables where variable|!annotated:"skipCoding" %}
    case {{ variable.name }} {% call keyedNameFor type variable %}
    {% endfor %}
  }
{% endmacro %}

{% for type in types.all|!class|!enum where type.based.AutoEncodable and not type.supertype.based.AutoDecodable or type|annotated:"AutoEncodable" and type.name != "AutoCodable" and type.name != "AutoEncodable" %}
// MARK: {{ type.name }}+Encodable | AutoEncodable
extension {{ type.name }} {
  {% call codingKeys type %}

  {% call encode type %}
}
{% endfor %}
